[
    {"number": 218, "slug": "the-skyline-problem", "title": "The Skyline Problem", "difficulty": "Hard", "tags": ["Array", "Divide and Conquer", "Binary Indexed Tree", "Segment Tree", "Line Sweep", "Sorting", "Heap (Priority Queue)", "Ordered Set"], "similar_problems": [{"slug": "falling-squares", "title": "Falling Squares", "difficulty": "Hard"}, {"slug": "shifting-letters-ii", "title": "Shifting Letters II", "difficulty": "Medium"}]},
    {"number": 307, "slug": "range-sum-query-mutable", "title": "Range Sum Query - Mutable", "difficulty": "Medium", "tags": ["Array", "Divide and Conquer", "Design", "Binary Indexed Tree", "Segment Tree"], "similar_problems": [{"slug": "range-sum-query-immutable", "title": "Range Sum Query - Immutable", "difficulty": "Easy"}, {"slug": "range-sum-query-2d-mutable", "title": "Range Sum Query 2D - Mutable", "difficulty": "Medium"}, {"slug": "shifting-letters-ii", "title": "Shifting Letters II", "difficulty": "Medium"}]},
    {"number": 308, "slug": "range-sum-query-2d-mutable", "title": "Range Sum Query 2D - Mutable", "difficulty": "Medium", "tags": ["Array", "Design", "Binary Indexed Tree", "Segment Tree", "Matrix"], "similar_problems": [{"slug": "range-sum-query-2d-immutable", "title": "Range Sum Query 2D - Immutable", "difficulty": "Medium"}, {"slug": "range-sum-query-mutable", "title": "Range Sum Query - Mutable", "difficulty": "Medium"}, {"slug": "increment-submatrices-by-one", "title": "Increment Submatrices by One", "difficulty": "Medium"}, {"slug": "sum-of-matrix-after-queries", "title": "Sum of Matrix After Queries", "difficulty": "Medium"}]},
    {"number": 315, "slug": "count-of-smaller-numbers-after-self", "title": "Count of Smaller Numbers After Self", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Divide and Conquer", "Binary Indexed Tree", "Segment Tree", "Merge Sort", "Ordered Set"], "similar_problems": [{"slug": "count-of-range-sum", "title": "Count of Range Sum", "difficulty": "Hard"}, {"slug": "queue-reconstruction-by-height", "title": "Queue Reconstruction by Height", "difficulty": "Medium"}, {"slug": "reverse-pairs", "title": "Reverse Pairs", "difficulty": "Hard"}, {"slug": "how-many-numbers-are-smaller-than-the-current-number", "title": "How Many Numbers Are Smaller Than the Current Number", "difficulty": "Easy"}, {"slug": "count-good-triplets-in-an-array", "title": "Count Good Triplets in an Array", "difficulty": "Hard"}, {"slug": "count-the-number-of-k-big-indices", "title": "Count the Number of K-Big Indices", "difficulty": "Hard"}]},
    {"number": 327, "slug": "count-of-range-sum", "title": "Count of Range Sum", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Divide and Conquer", "Binary Indexed Tree", "Segment Tree", "Merge Sort", "Ordered Set"], "similar_problems": [{"slug": "count-of-smaller-numbers-after-self", "title": "Count of Smaller Numbers After Self", "difficulty": "Hard"}, {"slug": "reverse-pairs", "title": "Reverse Pairs", "difficulty": "Hard"}, {"slug": "count-the-number-of-fair-pairs", "title": "Count the Number of Fair Pairs", "difficulty": "Medium"}, {"slug": "find-the-number-of-copy-arrays", "title": "Find the Number of Copy Arrays", "difficulty": "Medium"}]},
    {"number": 406, "slug": "queue-reconstruction-by-height", "title": "Queue Reconstruction by Height", "difficulty": "Medium", "tags": ["Array", "Binary Indexed Tree", "Segment Tree", "Sorting"], "similar_problems": [{"slug": "count-of-smaller-numbers-after-self", "title": "Count of Smaller Numbers After Self", "difficulty": "Hard"}, {"slug": "reward-top-k-students", "title": "Reward Top K Students", "difficulty": "Medium"}]},
    {"number": 493, "slug": "reverse-pairs", "title": "Reverse Pairs", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Divide and Conquer", "Binary Indexed Tree", "Segment Tree", "Merge Sort", "Ordered Set"], "similar_problems": [{"slug": "count-of-smaller-numbers-after-self", "title": "Count of Smaller Numbers After Self", "difficulty": "Hard"}, {"slug": "count-of-range-sum", "title": "Count of Range Sum", "difficulty": "Hard"}]},
    {"number": 673, "slug": "number-of-longest-increasing-subsequence", "title": "Number of Longest Increasing Subsequence", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Binary Indexed Tree", "Segment Tree"], "similar_problems": [{"slug": "longest-increasing-subsequence", "title": "Longest Increasing Subsequence", "difficulty": "Medium"}, {"slug": "longest-continuous-increasing-subsequence", "title": "Longest Continuous Increasing Subsequence", "difficulty": "Easy"}, {"slug": "longest-increasing-subsequence-ii", "title": "Longest Increasing Subsequence II", "difficulty": "Hard"}]},
    {"number": 683, "slug": "k-empty-slots", "title": "K Empty Slots", "difficulty": "Hard", "tags": ["Array", "Binary Indexed Tree", "Segment Tree", "Queue", "Sliding Window", "Heap (Priority Queue)", "Ordered Set", "Monotonic Queue"], "similar_problems": []},
    {"number": 1157, "slug": "online-majority-element-in-subarray", "title": "Online Majority Element In Subarray", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Design", "Binary Indexed Tree", "Segment Tree"], "similar_problems": []},
    {"number": 1395, "slug": "count-number-of-teams", "title": "Count Number of Teams", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Binary Indexed Tree", "Segment Tree"], "similar_problems": []},
    {"number": 1409, "slug": "queries-on-a-permutation-with-key", "title": "Queries on a Permutation With Key", "difficulty": "Medium", "tags": ["Array", "Binary Indexed Tree", "Simulation"], "similar_problems": []},
    {"number": 1505, "slug": "minimum-possible-integer-after-at-most-k-adjacent-swaps-on-digits", "title": "Minimum Possible Integer After at Most K Adjacent Swaps On Digits", "difficulty": "Hard", "tags": ["String", "Greedy", "Binary Indexed Tree", "Segment Tree"], "similar_problems": []},
    {"number": 1649, "slug": "create-sorted-array-through-instructions", "title": "Create Sorted Array through Instructions", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Divide and Conquer", "Binary Indexed Tree", "Segment Tree", "Merge Sort", "Ordered Set"], "similar_problems": [{"slug": "count-good-triplets-in-an-array", "title": "Count Good Triplets in an Array", "difficulty": "Hard"}, {"slug": "longest-substring-of-one-repeating-character", "title": "Longest Substring of One Repeating Character", "difficulty": "Hard"}, {"slug": "sort-array-by-moving-items-to-empty-space", "title": "Sort Array by Moving Items to Empty Space", "difficulty": "Hard"}]},
    {"number": 1756, "slug": "design-most-recently-used-queue", "title": "Design Most Recently Used Queue", "difficulty": "Medium", "tags": ["Array", "Hash Table", "Stack", "Design", "Binary Indexed Tree", "Ordered Set"], "similar_problems": [{"slug": "lru-cache", "title": "LRU Cache", "difficulty": "Medium"}]},
    {"number": 1964, "slug": "find-the-longest-valid-obstacle-course-at-each-position", "title": "Find the Longest Valid Obstacle Course at Each Position", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Binary Indexed Tree"], "similar_problems": [{"slug": "longest-increasing-subsequence", "title": "Longest Increasing Subsequence", "difficulty": "Medium"}]},
    {"number": 2031, "slug": "count-subarrays-with-more-ones-than-zeros", "title": "Count Subarrays With More Ones Than Zeros", "difficulty": "Medium", "tags": ["Array", "Binary Search", "Divide and Conquer", "Binary Indexed Tree", "Segment Tree", "Merge Sort", "Ordered Set"], "similar_problems": [{"slug": "ones-and-zeroes", "title": "Ones and Zeroes", "difficulty": "Medium"}, {"slug": "longer-contiguous-segments-of-ones-than-zeros", "title": "Longer Contiguous Segments of Ones than Zeros", "difficulty": "Easy"}, {"slug": "all-divisions-with-the-highest-score-of-a-binary-array", "title": "All Divisions With the Highest Score of a Binary Array", "difficulty": "Medium"}]},
    {"number": 2179, "slug": "count-good-triplets-in-an-array", "title": "Count Good Triplets in an Array", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Divide and Conquer", "Binary Indexed Tree", "Segment Tree", "Merge Sort", "Ordered Set"], "similar_problems": [{"slug": "count-of-smaller-numbers-after-self", "title": "Count of Smaller Numbers After Self", "difficulty": "Hard"}, {"slug": "increasing-triplet-subsequence", "title": "Increasing Triplet Subsequence", "difficulty": "Medium"}, {"slug": "create-sorted-array-through-instructions", "title": "Create Sorted Array through Instructions", "difficulty": "Hard"}, {"slug": "number-of-good-paths", "title": "Number of Good Paths", "difficulty": "Hard"}, {"slug": "count-increasing-quadruplets", "title": "Count Increasing Quadruplets", "difficulty": "Hard"}]},
    {"number": 2193, "slug": "minimum-number-of-moves-to-make-palindrome", "title": "Minimum Number of Moves to Make Palindrome", "difficulty": "Hard", "tags": ["Two Pointers", "String", "Greedy", "Binary Indexed Tree"], "similar_problems": [{"slug": "minimum-insertion-steps-to-make-a-string-palindrome", "title": "Minimum Insertion Steps to Make a String Palindrome", "difficulty": "Hard"}, {"slug": "minimum-number-of-flips-to-make-binary-grid-palindromic-i", "title": "Minimum Number of Flips to Make Binary Grid Palindromic I", "difficulty": "Medium"}]},
    {"number": 2250, "slug": "count-number-of-rectangles-containing-each-point", "title": "Count Number of Rectangles Containing Each Point", "difficulty": "Medium", "tags": ["Array", "Hash Table", "Binary Search", "Binary Indexed Tree", "Sorting"], "similar_problems": [{"slug": "queries-on-number-of-points-inside-a-circle", "title": "Queries on Number of Points Inside a Circle", "difficulty": "Medium"}]},
    {"number": 2286, "slug": "booking-concert-tickets-in-groups", "title": "Booking Concert Tickets in Groups", "difficulty": "Hard", "tags": ["Binary Search", "Design", "Binary Indexed Tree", "Segment Tree"], "similar_problems": [{"slug": "cinema-seat-allocation", "title": "Cinema Seat Allocation", "difficulty": "Medium"}, {"slug": "longest-increasing-subsequence-ii", "title": "Longest Increasing Subsequence II", "difficulty": "Hard"}]},
    {"number": 2407, "slug": "longest-increasing-subsequence-ii", "title": "Longest Increasing Subsequence II", "difficulty": "Hard", "tags": ["Array", "Divide and Conquer", "Dynamic Programming", "Binary Indexed Tree", "Segment Tree", "Queue", "Monotonic Queue"], "similar_problems": [{"slug": "longest-increasing-subsequence", "title": "Longest Increasing Subsequence", "difficulty": "Medium"}, {"slug": "number-of-longest-increasing-subsequence", "title": "Number of Longest Increasing Subsequence", "difficulty": "Medium"}, {"slug": "longest-continuous-increasing-subsequence", "title": "Longest Continuous Increasing Subsequence", "difficulty": "Easy"}, {"slug": "longest-substring-of-one-repeating-character", "title": "Longest Substring of One Repeating Character", "difficulty": "Hard"}, {"slug": "booking-concert-tickets-in-groups", "title": "Booking Concert Tickets in Groups", "difficulty": "Hard"}, {"slug": "longest-subsequence-with-decreasing-adjacent-difference", "title": "Longest Subsequence With Decreasing Adjacent Difference", "difficulty": "Medium"}]},
    {"number": 2424, "slug": "longest-uploaded-prefix", "title": "Longest Uploaded Prefix", "difficulty": "Medium", "tags": ["Hash Table", "Binary Search", "Union Find", "Design", "Binary Indexed Tree", "Segment Tree", "Heap (Priority Queue)", "Ordered Set"], "similar_problems": [{"slug": "design-an-ordered-stream", "title": "Design an Ordered Stream", "difficulty": "Easy"}, {"slug": "find-x-value-of-array-ii", "title": "Find X Value of Array II", "difficulty": "Hard"}]},
    {"number": 2426, "slug": "number-of-pairs-satisfying-inequality", "title": "Number of Pairs Satisfying Inequality", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Divide and Conquer", "Binary Indexed Tree", "Segment Tree", "Merge Sort", "Ordered Set"], "similar_problems": [{"slug": "k-diff-pairs-in-an-array", "title": "K-diff Pairs in an Array", "difficulty": "Medium"}, {"slug": "count-nice-pairs-in-an-array", "title": "Count Nice Pairs in an Array", "difficulty": "Medium"}, {"slug": "count-number-of-bad-pairs", "title": "Count Number of Bad Pairs", "difficulty": "Medium"}, {"slug": "maximum-balanced-subsequence-sum", "title": "Maximum Balanced Subsequence Sum", "difficulty": "Hard"}]},
    {"number": 2519, "slug": "count-the-number-of-k-big-indices", "title": "Count the Number of K-Big Indices", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Divide and Conquer", "Binary Indexed Tree", "Segment Tree", "Merge Sort", "Ordered Set"], "similar_problems": [{"slug": "count-of-smaller-numbers-after-self", "title": "Count of Smaller Numbers After Self", "difficulty": "Hard"}, {"slug": "find-all-good-indices", "title": "Find All Good Indices", "difficulty": "Medium"}]},
    {"number": 2552, "slug": "count-increasing-quadruplets", "title": "Count Increasing Quadruplets", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Binary Indexed Tree", "Enumeration", "Prefix Sum"], "similar_problems": [{"slug": "increasing-triplet-subsequence", "title": "Increasing Triplet Subsequence", "difficulty": "Medium"}, {"slug": "count-special-quadruplets", "title": "Count Special Quadruplets", "difficulty": "Easy"}, {"slug": "count-good-triplets-in-an-array", "title": "Count Good Triplets in an Array", "difficulty": "Hard"}]},
    {"number": 2659, "slug": "make-array-empty", "title": "Make Array Empty", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Greedy", "Binary Indexed Tree", "Segment Tree", "Sorting", "Ordered Set"], "similar_problems": []},
    {"number": 2736, "slug": "maximum-sum-queries", "title": "Maximum Sum Queries", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Stack", "Binary Indexed Tree", "Segment Tree", "Sorting", "Monotonic Stack"], "similar_problems": [{"slug": "most-beautiful-item-for-each-query", "title": "Most Beautiful Item for Each Query", "difficulty": "Medium"}]},
    {"number": 2907, "slug": "maximum-profitable-triplets-with-increasing-prices-i", "title": "Maximum Profitable Triplets With Increasing Prices I", "difficulty": "Medium", "tags": ["Array", "Binary Indexed Tree", "Segment Tree"], "similar_problems": []},
    {"number": 2916, "slug": "subarrays-distinct-element-sum-of-squares-ii", "title": "Subarrays Distinct Element Sum of Squares II", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Binary Indexed Tree", "Segment Tree"], "similar_problems": []},
    {"number": 2921, "slug": "maximum-profitable-triplets-with-increasing-prices-ii", "title": "Maximum Profitable Triplets With Increasing Prices II", "difficulty": "Hard", "tags": ["Array", "Binary Indexed Tree", "Segment Tree"], "similar_problems": []},
    {"number": 2926, "slug": "maximum-balanced-subsequence-sum", "title": "Maximum Balanced Subsequence Sum", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Dynamic Programming", "Binary Indexed Tree", "Segment Tree"], "similar_problems": [{"slug": "number-of-pairs-satisfying-inequality", "title": "Number of Pairs Satisfying Inequality", "difficulty": "Hard"}]},
    {"number": 2940, "slug": "find-building-where-alice-and-bob-can-meet", "title": "Find Building Where Alice and Bob Can Meet", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Stack", "Binary Indexed Tree", "Segment Tree", "Heap (Priority Queue)", "Monotonic Stack"], "similar_problems": [{"slug": "number-of-visible-people-in-a-queue", "title": "Number of Visible People in a Queue", "difficulty": "Hard"}, {"slug": "furthest-building-you-can-reach", "title": "Furthest Building You Can Reach", "difficulty": "Medium"}]},
    {"number": 3009, "slug": "maximum-number-of-intersections-on-the-chart", "title": "Maximum Number of Intersections on the Chart", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Math", "Binary Indexed Tree", "Geometry", "Line Sweep", "Sorting"], "similar_problems": []},
    {"number": 3072, "slug": "distribute-elements-into-two-arrays-ii", "title": "Distribute Elements Into Two Arrays II", "difficulty": "Hard", "tags": ["Array", "Binary Indexed Tree", "Segment Tree", "Simulation"], "similar_problems": [{"slug": "split-array-largest-sum", "title": "Split Array Largest Sum", "difficulty": "Hard"}, {"slug": "divide-array-into-equal-pairs", "title": "Divide Array Into Equal Pairs", "difficulty": "Easy"}]},
    {"number": 3109, "slug": "find-the-index-of-permutation", "title": "Find the Index of Permutation", "difficulty": "Medium", "tags": ["Array", "Binary Search", "Divide and Conquer", "Binary Indexed Tree", "Segment Tree", "Merge Sort", "Ordered Set"], "similar_problems": []},
    {"number": 3161, "slug": "block-placement-queries", "title": "Block Placement Queries", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Binary Indexed Tree", "Segment Tree"], "similar_problems": [{"slug": "building-boxes", "title": "Building Boxes", "difficulty": "Hard"}, {"slug": "fruits-into-baskets-iii", "title": "Fruits Into Baskets III", "difficulty": "Medium"}]},
    {"number": 3187, "slug": "peaks-in-array", "title": "Peaks in Array", "difficulty": "Hard", "tags": ["Array", "Binary Indexed Tree", "Segment Tree"], "similar_problems": []},
    {"number": 3245, "slug": "alternating-groups-iii", "title": "Alternating Groups III", "difficulty": "Hard", "tags": ["Array", "Binary Indexed Tree", "Ordered Set"], "similar_problems": []},
    {"number": 3380, "slug": "maximum-area-rectangle-with-point-constraints-i", "title": "Maximum Area Rectangle With Point Constraints I", "difficulty": "Medium", "tags": ["Array", "Math", "Binary Indexed Tree", "Segment Tree", "Geometry", "Sorting", "Enumeration"], "similar_problems": [{"slug": "minimum-area-rectangle", "title": "Minimum Area Rectangle", "difficulty": "Medium"}]},
    {"number": 3382, "slug": "maximum-area-rectangle-with-point-constraints-ii", "title": "Maximum Area Rectangle With Point Constraints II", "difficulty": "Hard", "tags": ["Array", "Math", "Binary Indexed Tree", "Segment Tree", "Geometry", "Sorting"], "similar_problems": [{"slug": "minimum-area-rectangle", "title": "Minimum Area Rectangle", "difficulty": "Medium"}]},
    {"number": 3515, "slug": "shortest-path-in-a-weighted-tree", "title": "Shortest Path in a Weighted Tree", "difficulty": "Hard", "tags": ["Array", "Tree", "Depth-First Search", "Binary Indexed Tree", "Segment Tree"], "similar_problems": []},
    {"number": 3520, "slug": "minimum-threshold-for-inversion-pairs-count", "title": "Minimum Threshold for Inversion Pairs Count", "difficulty": "Medium", "tags": ["Array", "Binary Search", "Binary Indexed Tree", "Segment Tree"], "similar_problems": []},
    {"number": 3624, "slug": "number-of-integers-with-popcount-depth-equal-to-k-ii", "title": "Number of Integers With Popcount-Depth Equal to K II", "difficulty": "Hard", "tags": ["Array", "Divide and Conquer", "Binary Indexed Tree", "Segment Tree"], "similar_problems": []}
]