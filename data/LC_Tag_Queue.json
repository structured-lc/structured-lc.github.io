[
    {"number": 225, "slug": "implement-stack-using-queues", "title": "Implement Stack using Queues", "difficulty": "Easy", "tags": ["Stack", "Design", "Queue"], "similar_problems": [{"slug": "implement-queue-using-stacks", "title": "Implement Queue using Stacks", "difficulty": "Easy"}]},
    {"number": 232, "slug": "implement-queue-using-stacks", "title": "Implement Queue using Stacks", "difficulty": "Easy", "tags": ["Stack", "Design", "Queue"], "similar_problems": [{"slug": "implement-stack-using-queues", "title": "Implement Stack using Queues", "difficulty": "Easy"}]},
    {"number": 239, "slug": "sliding-window-maximum", "title": "Sliding Window Maximum", "difficulty": "Hard", "tags": ["Array", "Queue", "Sliding Window", "Heap (Priority Queue)", "Monotonic Queue"], "similar_problems": [{"slug": "minimum-window-substring", "title": "Minimum Window Substring", "difficulty": "Hard"}, {"slug": "min-stack", "title": "Min Stack", "difficulty": "Medium"}, {"slug": "longest-substring-with-at-most-two-distinct-characters", "title": "Longest Substring with At Most Two Distinct Characters", "difficulty": "Medium"}, {"slug": "paint-house-ii", "title": "Paint House II", "difficulty": "Hard"}, {"slug": "jump-game-vi", "title": "Jump Game VI", "difficulty": "Medium"}, {"slug": "maximum-number-of-robots-within-budget", "title": "Maximum Number of Robots Within Budget", "difficulty": "Hard"}, {"slug": "maximum-tastiness-of-candy-basket", "title": "Maximum Tastiness of Candy Basket", "difficulty": "Medium"}, {"slug": "maximal-score-after-applying-k-operations", "title": "Maximal Score After Applying K Operations", "difficulty": "Medium"}]},
    {"number": 281, "slug": "zigzag-iterator", "title": "Zigzag Iterator", "difficulty": "Medium", "tags": ["Array", "Design", "Queue", "Iterator"], "similar_problems": [{"slug": "binary-search-tree-iterator", "title": "Binary Search Tree Iterator", "difficulty": "Medium"}, {"slug": "flatten-2d-vector", "title": "Flatten 2D Vector", "difficulty": "Medium"}, {"slug": "peeking-iterator", "title": "Peeking Iterator", "difficulty": "Medium"}, {"slug": "flatten-nested-list-iterator", "title": "Flatten Nested List Iterator", "difficulty": "Medium"}, {"slug": "merge-strings-alternately", "title": "Merge Strings Alternately", "difficulty": "Easy"}]},
    {"number": 341, "slug": "flatten-nested-list-iterator", "title": "Flatten Nested List Iterator", "difficulty": "Medium", "tags": ["Stack", "Tree", "Depth-First Search", "Design", "Queue", "Iterator"], "similar_problems": [{"slug": "flatten-2d-vector", "title": "Flatten 2D Vector", "difficulty": "Medium"}, {"slug": "zigzag-iterator", "title": "Zigzag Iterator", "difficulty": "Medium"}, {"slug": "mini-parser", "title": "Mini Parser", "difficulty": "Medium"}, {"slug": "array-nesting", "title": "Array Nesting", "difficulty": "Medium"}]},
    {"number": 346, "slug": "moving-average-from-data-stream", "title": "Moving Average from Data Stream", "difficulty": "Easy", "tags": ["Array", "Design", "Queue", "Data Stream"], "similar_problems": [{"slug": "k-radius-subarray-averages", "title": "K Radius Subarray Averages", "difficulty": "Medium"}]},
    {"number": 353, "slug": "design-snake-game", "title": "Design Snake Game", "difficulty": "Medium", "tags": ["Array", "Hash Table", "Design", "Queue", "Simulation"], "similar_problems": []},
    {"number": 362, "slug": "design-hit-counter", "title": "Design Hit Counter", "difficulty": "Medium", "tags": ["Array", "Binary Search", "Design", "Queue", "Data Stream"], "similar_problems": [{"slug": "logger-rate-limiter", "title": "Logger Rate Limiter", "difficulty": "Easy"}]},
    {"number": 379, "slug": "design-phone-directory", "title": "Design Phone Directory", "difficulty": "Medium", "tags": ["Array", "Hash Table", "Linked List", "Design", "Queue"], "similar_problems": [{"slug": "seat-reservation-manager", "title": "Seat Reservation Manager", "difficulty": "Medium"}]},
    {"number": 387, "slug": "first-unique-character-in-a-string", "title": "First Unique Character in a String", "difficulty": "Easy", "tags": ["Hash Table", "String", "Queue", "Counting"], "similar_problems": [{"slug": "sort-characters-by-frequency", "title": "Sort Characters By Frequency", "difficulty": "Medium"}, {"slug": "first-letter-to-appear-twice", "title": "First Letter to Appear Twice", "difficulty": "Easy"}]},
    {"number": 622, "slug": "design-circular-queue", "title": "Design Circular Queue", "difficulty": "Medium", "tags": ["Array", "Linked List", "Design", "Queue"], "similar_problems": [{"slug": "design-circular-deque", "title": "Design Circular Deque", "difficulty": "Medium"}, {"slug": "design-front-middle-back-queue", "title": "Design Front Middle Back Queue", "difficulty": "Medium"}]},
    {"number": 641, "slug": "design-circular-deque", "title": "Design Circular Deque", "difficulty": "Medium", "tags": ["Array", "Linked List", "Design", "Queue"], "similar_problems": [{"slug": "design-circular-queue", "title": "Design Circular Queue", "difficulty": "Medium"}, {"slug": "design-front-middle-back-queue", "title": "Design Front Middle Back Queue", "difficulty": "Medium"}]},
    {"number": 649, "slug": "dota2-senate", "title": "Dota2 Senate", "difficulty": "Medium", "tags": ["String", "Greedy", "Queue"], "similar_problems": [{"slug": "teemo-attacking", "title": "Teemo Attacking", "difficulty": "Easy"}]},
    {"number": 683, "slug": "k-empty-slots", "title": "K Empty Slots", "difficulty": "Hard", "tags": ["Array", "Binary Indexed Tree", "Segment Tree", "Queue", "Sliding Window", "Heap (Priority Queue)", "Ordered Set", "Monotonic Queue"], "similar_problems": []},
    {"number": 862, "slug": "shortest-subarray-with-sum-at-least-k", "title": "Shortest Subarray with Sum at Least K", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Queue", "Sliding Window", "Heap (Priority Queue)", "Prefix Sum", "Monotonic Queue"], "similar_problems": [{"slug": "shortest-subarray-with-or-at-least-k-ii", "title": "Shortest Subarray With OR at Least K II", "difficulty": "Medium"}, {"slug": "shortest-subarray-with-or-at-least-k-i", "title": "Shortest Subarray With OR at Least K I", "difficulty": "Easy"}]},
    {"number": 918, "slug": "maximum-sum-circular-subarray", "title": "Maximum Sum Circular Subarray", "difficulty": "Medium", "tags": ["Array", "Divide and Conquer", "Dynamic Programming", "Queue", "Monotonic Queue"], "similar_problems": []},
    {"number": 933, "slug": "number-of-recent-calls", "title": "Number of Recent Calls", "difficulty": "Easy", "tags": ["Design", "Queue", "Data Stream"], "similar_problems": []},
    {"number": 936, "slug": "stamping-the-sequence", "title": "Stamping The Sequence", "difficulty": "Hard", "tags": ["String", "Stack", "Greedy", "Queue"], "similar_problems": []},
    {"number": 950, "slug": "reveal-cards-in-increasing-order", "title": "Reveal Cards In Increasing Order", "difficulty": "Medium", "tags": ["Array", "Queue", "Sorting", "Simulation"], "similar_problems": []},
    {"number": 995, "slug": "minimum-number-of-k-consecutive-bit-flips", "title": "Minimum Number of K Consecutive Bit Flips", "difficulty": "Hard", "tags": ["Array", "Bit Manipulation", "Queue", "Sliding Window", "Prefix Sum"], "similar_problems": [{"slug": "bulb-switcher", "title": "Bulb Switcher", "difficulty": "Medium"}, {"slug": "minimum-time-to-remove-all-cars-containing-illegal-goods", "title": "Minimum Time to Remove All Cars Containing Illegal Goods", "difficulty": "Hard"}, {"slug": "number-of-distinct-binary-strings-after-applying-operations", "title": "Number of Distinct Binary Strings After Applying Operations", "difficulty": "Medium"}, {"slug": "minimum-operations-to-make-binary-array-elements-equal-to-one-i", "title": "Minimum Operations to Make Binary Array Elements Equal to One I", "difficulty": "Medium"}, {"slug": "smallest-number-with-all-set-bits", "title": "Smallest Number With All Set Bits", "difficulty": "Easy"}]},
    {"number": 1425, "slug": "constrained-subsequence-sum", "title": "Constrained Subsequence Sum", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Queue", "Sliding Window", "Heap (Priority Queue)", "Monotonic Queue"], "similar_problems": [{"slug": "maximum-element-sum-of-a-complete-subset-of-indices", "title": "Maximum Element-Sum of a Complete Subset of Indices", "difficulty": "Hard"}]},
    {"number": 1429, "slug": "first-unique-number", "title": "First Unique Number", "difficulty": "Medium", "tags": ["Array", "Hash Table", "Design", "Queue", "Data Stream"], "similar_problems": []},
    {"number": 1438, "slug": "longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit", "title": "Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit", "difficulty": "Medium", "tags": ["Array", "Queue", "Sliding Window", "Heap (Priority Queue)", "Ordered Set", "Monotonic Queue"], "similar_problems": [{"slug": "partition-array-such-that-maximum-difference-is-k", "title": "Partition Array Such That Maximum Difference Is K", "difficulty": "Medium"}, {"slug": "count-subarrays-with-fixed-bounds", "title": "Count Subarrays With Fixed Bounds", "difficulty": "Hard"}]},
    {"number": 1499, "slug": "max-value-of-equation", "title": "Max Value of Equation", "difficulty": "Hard", "tags": ["Array", "Queue", "Sliding Window", "Heap (Priority Queue)", "Monotonic Queue"], "similar_problems": [{"slug": "count-pairs-in-two-arrays", "title": "Count Pairs in Two Arrays", "difficulty": "Medium"}]},
    {"number": 1670, "slug": "design-front-middle-back-queue", "title": "Design Front Middle Back Queue", "difficulty": "Medium", "tags": ["Array", "Linked List", "Design", "Queue", "Data Stream"], "similar_problems": [{"slug": "design-circular-deque", "title": "Design Circular Deque", "difficulty": "Medium"}, {"slug": "design-circular-queue", "title": "Design Circular Queue", "difficulty": "Medium"}]},
    {"number": 1687, "slug": "delivering-boxes-from-storage-to-ports", "title": "Delivering Boxes from Storage to Ports", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Segment Tree", "Queue", "Heap (Priority Queue)", "Prefix Sum", "Monotonic Queue"], "similar_problems": []},
    {"number": 1696, "slug": "jump-game-vi", "title": "Jump Game VI", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Queue", "Heap (Priority Queue)", "Monotonic Queue"], "similar_problems": [{"slug": "sliding-window-maximum", "title": "Sliding Window Maximum", "difficulty": "Hard"}, {"slug": "jump-game-vii", "title": "Jump Game VII", "difficulty": "Medium"}, {"slug": "jump-game-viii", "title": "Jump Game VIII", "difficulty": "Medium"}, {"slug": "maximize-value-of-function-in-a-ball-passing-game", "title": "Maximize Value of Function in a Ball Passing Game", "difficulty": "Hard"}]},
    {"number": 1700, "slug": "number-of-students-unable-to-eat-lunch", "title": "Number of Students Unable to Eat Lunch", "difficulty": "Easy", "tags": ["Array", "Stack", "Queue", "Simulation"], "similar_problems": [{"slug": "time-needed-to-buy-tickets", "title": "Time Needed to Buy Tickets", "difficulty": "Easy"}]},
    {"number": 1823, "slug": "find-the-winner-of-the-circular-game", "title": "Find the Winner of the Circular Game", "difficulty": "Medium", "tags": ["Array", "Math", "Recursion", "Queue", "Simulation"], "similar_problems": []},
    {"number": 1825, "slug": "finding-mk-average", "title": "Finding MK Average", "difficulty": "Hard", "tags": ["Design", "Queue", "Heap (Priority Queue)", "Data Stream", "Ordered Set"], "similar_problems": [{"slug": "find-median-from-data-stream", "title": "Find Median from Data Stream", "difficulty": "Hard"}, {"slug": "kth-largest-element-in-a-stream", "title": "Kth Largest Element in a Stream", "difficulty": "Easy"}, {"slug": "sequentially-ordinal-rank-tracker", "title": "Sequentially Ordinal Rank Tracker", "difficulty": "Hard"}]},
    {"number": 2071, "slug": "maximum-number-of-tasks-you-can-assign", "title": "Maximum Number of Tasks You Can Assign", "difficulty": "Hard", "tags": ["Array", "Two Pointers", "Binary Search", "Greedy", "Queue", "Sorting", "Monotonic Queue"], "similar_problems": [{"slug": "most-profit-assigning-work", "title": "Most Profit Assigning Work", "difficulty": "Medium"}, {"slug": "maximum-running-time-of-n-computers", "title": "Maximum Running Time of N Computers", "difficulty": "Hard"}, {"slug": "maximum-number-of-robots-within-budget", "title": "Maximum Number of Robots Within Budget", "difficulty": "Hard"}, {"slug": "maximum-matching-of-players-with-trainers", "title": "Maximum Matching of Players With Trainers", "difficulty": "Medium"}, {"slug": "maximize-the-minimum-powered-city", "title": "Maximize the Minimum Powered City", "difficulty": "Hard"}]},
    {"number": 2073, "slug": "time-needed-to-buy-tickets", "title": "Time Needed to Buy Tickets", "difficulty": "Easy", "tags": ["Array", "Queue", "Simulation"], "similar_problems": [{"slug": "number-of-students-unable-to-eat-lunch", "title": "Number of Students Unable to Eat Lunch", "difficulty": "Easy"}]},
    {"number": 2327, "slug": "number-of-people-aware-of-a-secret", "title": "Number of People Aware of a Secret", "difficulty": "Medium", "tags": ["Dynamic Programming", "Queue", "Simulation"], "similar_problems": []},
    {"number": 2398, "slug": "maximum-number-of-robots-within-budget", "title": "Maximum Number of Robots Within Budget", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Queue", "Sliding Window", "Heap (Priority Queue)", "Prefix Sum", "Monotonic Queue"], "similar_problems": [{"slug": "sliding-window-maximum", "title": "Sliding Window Maximum", "difficulty": "Hard"}, {"slug": "kth-smallest-product-of-two-sorted-arrays", "title": "Kth Smallest Product of Two Sorted Arrays", "difficulty": "Hard"}, {"slug": "maximum-number-of-tasks-you-can-assign", "title": "Maximum Number of Tasks You Can Assign", "difficulty": "Hard"}, {"slug": "minimized-maximum-of-products-distributed-to-any-store", "title": "Minimized Maximum of Products Distributed to Any Store", "difficulty": "Medium"}, {"slug": "minimum-time-to-complete-trips", "title": "Minimum Time to Complete Trips", "difficulty": "Medium"}]},
    {"number": 2407, "slug": "longest-increasing-subsequence-ii", "title": "Longest Increasing Subsequence II", "difficulty": "Hard", "tags": ["Array", "Divide and Conquer", "Dynamic Programming", "Binary Indexed Tree", "Segment Tree", "Queue", "Monotonic Queue"], "similar_problems": [{"slug": "longest-increasing-subsequence", "title": "Longest Increasing Subsequence", "difficulty": "Medium"}, {"slug": "number-of-longest-increasing-subsequence", "title": "Number of Longest Increasing Subsequence", "difficulty": "Medium"}, {"slug": "longest-continuous-increasing-subsequence", "title": "Longest Continuous Increasing Subsequence", "difficulty": "Easy"}, {"slug": "longest-substring-of-one-repeating-character", "title": "Longest Substring of One Repeating Character", "difficulty": "Hard"}, {"slug": "booking-concert-tickets-in-groups", "title": "Booking Concert Tickets in Groups", "difficulty": "Hard"}, {"slug": "longest-subsequence-with-decreasing-adjacent-difference", "title": "Longest Subsequence With Decreasing Adjacent Difference", "difficulty": "Medium"}]},
    {"number": 2444, "slug": "count-subarrays-with-fixed-bounds", "title": "Count Subarrays With Fixed Bounds", "difficulty": "Hard", "tags": ["Array", "Queue", "Sliding Window", "Monotonic Queue"], "similar_problems": [{"slug": "count-number-of-nice-subarrays", "title": "Count Number of Nice Subarrays", "difficulty": "Medium"}, {"slug": "longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit", "title": "Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit", "difficulty": "Medium"}, {"slug": "find-the-number-of-subarrays-where-boundary-elements-are-maximum", "title": "Find the Number of Subarrays Where Boundary Elements Are Maximum", "difficulty": "Hard"}]},
    {"number": 2526, "slug": "find-consecutive-integers-from-a-data-stream", "title": "Find Consecutive Integers from a Data Stream", "difficulty": "Medium", "tags": ["Hash Table", "Design", "Queue", "Counting", "Data Stream"], "similar_problems": [{"slug": "number-of-zero-filled-subarrays", "title": "Number of Zero-Filled Subarrays", "difficulty": "Medium"}]},
    {"number": 2528, "slug": "maximize-the-minimum-powered-city", "title": "Maximize the Minimum Powered City", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Greedy", "Queue", "Sliding Window", "Prefix Sum"], "similar_problems": [{"slug": "maximum-number-of-tasks-you-can-assign", "title": "Maximum Number of Tasks You Can Assign", "difficulty": "Hard"}]},
    {"number": 2534, "slug": "time-taken-to-cross-the-door", "title": "Time Taken to Cross the Door", "difficulty": "Hard", "tags": ["Array", "Queue", "Simulation"], "similar_problems": [{"slug": "the-latest-time-to-catch-a-bus", "title": "The Latest Time to Catch a Bus", "difficulty": "Medium"}]},
    {"number": 2762, "slug": "continuous-subarrays", "title": "Continuous Subarrays", "difficulty": "Medium", "tags": ["Array", "Queue", "Sliding Window", "Heap (Priority Queue)", "Ordered Set", "Monotonic Queue"], "similar_problems": []},
    {"number": 2944, "slug": "minimum-number-of-coins-for-fruits", "title": "Minimum Number of Coins for Fruits", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Queue", "Heap (Priority Queue)", "Monotonic Queue"], "similar_problems": []},
    {"number": 2945, "slug": "find-maximum-non-decreasing-array-length", "title": "Find Maximum Non-decreasing Array Length", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Dynamic Programming", "Stack", "Queue", "Monotonic Stack", "Monotonic Queue"], "similar_problems": []},
    {"number": 2969, "slug": "minimum-number-of-coins-for-fruits-ii", "title": "Minimum Number of Coins for Fruits II", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Queue", "Heap (Priority Queue)", "Monotonic Queue"], "similar_problems": []},
    {"number": 3117, "slug": "minimum-sum-of-values-by-dividing-array", "title": "Minimum Sum of Values by Dividing Array", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Dynamic Programming", "Bit Manipulation", "Segment Tree", "Queue"], "similar_problems": [{"slug": "minimum-cost-to-split-an-array", "title": "Minimum Cost to Split an Array", "difficulty": "Hard"}, {"slug": "split-with-minimum-sum", "title": "Split With Minimum Sum", "difficulty": "Easy"}, {"slug": "find-subarray-with-bitwise-or-closest-to-k", "title": "Find Subarray With Bitwise OR Closest to K", "difficulty": "Hard"}, {"slug": "find-x-value-of-array-ii", "title": "Find X Value of Array II", "difficulty": "Hard"}]},
    {"number": 3191, "slug": "minimum-operations-to-make-binary-array-elements-equal-to-one-i", "title": "Minimum Operations to Make Binary Array Elements Equal to One I", "difficulty": "Medium", "tags": ["Array", "Bit Manipulation", "Queue", "Sliding Window", "Prefix Sum"], "similar_problems": [{"slug": "minimum-number-of-k-consecutive-bit-flips", "title": "Minimum Number of K Consecutive Bit Flips", "difficulty": "Hard"}]},
    {"number": 3369, "slug": "design-an-array-statistics-tracker", "title": "Design an Array Statistics Tracker ", "difficulty": "Hard", "tags": ["Hash Table", "Binary Search", "Design", "Queue", "Heap (Priority Queue)", "Data Stream", "Ordered Set"], "similar_problems": []},
    {"number": 3420, "slug": "count-non-decreasing-subarrays-after-k-operations", "title": "Count Non-Decreasing Subarrays After K Operations", "difficulty": "Hard", "tags": ["Array", "Stack", "Segment Tree", "Queue", "Sliding Window", "Monotonic Stack", "Monotonic Queue"], "similar_problems": [{"slug": "non-decreasing-array", "title": "Non-decreasing Array", "difficulty": "Medium"}]},
    {"number": 3508, "slug": "implement-router", "title": "Implement Router", "difficulty": "Medium", "tags": ["Array", "Hash Table", "Binary Search", "Design", "Queue", "Ordered Set"], "similar_problems": []},
    {"number": 3578, "slug": "count-partitions-with-max-min-difference-at-most-k", "title": "Count Partitions With Max-Min Difference at Most K", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Queue", "Sliding Window", "Prefix Sum", "Monotonic Queue"], "similar_problems": [{"slug": "number-of-great-partitions", "title": "Number of Great Partitions", "difficulty": "Hard"}]},
    {"number": 3589, "slug": "count-prime-gap-balanced-subarrays", "title": "Count Prime-Gap Balanced Subarrays", "difficulty": "Medium", "tags": ["Array", "Math", "Queue", "Sliding Window", "Number Theory", "Monotonic Queue"], "similar_problems": []}
]