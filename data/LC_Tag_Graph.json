[
    {"number": 133, "slug": "clone-graph", "title": "Clone Graph", "difficulty": "Medium", "tags": ["Hash Table", "Depth-First Search", "Breadth-First Search", "Graph"], "similar_problems": [{"slug": "copy-list-with-random-pointer", "title": "Copy List with Random Pointer", "difficulty": "Medium"}, {"slug": "clone-binary-tree-with-random-pointer", "title": "Clone Binary Tree With Random Pointer", "difficulty": "Medium"}, {"slug": "clone-n-ary-tree", "title": "Clone N-ary Tree", "difficulty": "Medium"}]},
    {"number": 207, "slug": "course-schedule", "title": "Course Schedule", "difficulty": "Medium", "tags": ["Depth-First Search", "Breadth-First Search", "Graph", "Topological Sort"], "similar_problems": [{"slug": "course-schedule-ii", "title": "Course Schedule II", "difficulty": "Medium"}, {"slug": "graph-valid-tree", "title": "Graph Valid Tree", "difficulty": "Medium"}, {"slug": "minimum-height-trees", "title": "Minimum Height Trees", "difficulty": "Medium"}, {"slug": "course-schedule-iii", "title": "Course Schedule III", "difficulty": "Hard"}, {"slug": "build-a-matrix-with-conditions", "title": "Build a Matrix With Conditions", "difficulty": "Hard"}]},
    {"number": 210, "slug": "course-schedule-ii", "title": "Course Schedule II", "difficulty": "Medium", "tags": ["Depth-First Search", "Breadth-First Search", "Graph", "Topological Sort"], "similar_problems": [{"slug": "course-schedule", "title": "Course Schedule", "difficulty": "Medium"}, {"slug": "alien-dictionary", "title": "Alien Dictionary", "difficulty": "Hard"}, {"slug": "minimum-height-trees", "title": "Minimum Height Trees", "difficulty": "Medium"}, {"slug": "sequence-reconstruction", "title": "Sequence Reconstruction", "difficulty": "Medium"}, {"slug": "course-schedule-iii", "title": "Course Schedule III", "difficulty": "Hard"}, {"slug": "parallel-courses", "title": "Parallel Courses", "difficulty": "Medium"}, {"slug": "find-all-possible-recipes-from-given-supplies", "title": "Find All Possible Recipes from Given Supplies", "difficulty": "Medium"}, {"slug": "build-a-matrix-with-conditions", "title": "Build a Matrix With Conditions", "difficulty": "Hard"}, {"slug": "sort-array-by-moving-items-to-empty-space", "title": "Sort Array by Moving Items to Empty Space", "difficulty": "Hard"}]},
    {"number": 261, "slug": "graph-valid-tree", "title": "Graph Valid Tree", "difficulty": "Medium", "tags": ["Depth-First Search", "Breadth-First Search", "Union Find", "Graph"], "similar_problems": [{"slug": "course-schedule", "title": "Course Schedule", "difficulty": "Medium"}, {"slug": "number-of-connected-components-in-an-undirected-graph", "title": "Number of Connected Components in an Undirected Graph", "difficulty": "Medium"}, {"slug": "keys-and-rooms", "title": "Keys and Rooms", "difficulty": "Medium"}]},
    {"number": 269, "slug": "alien-dictionary", "title": "Alien Dictionary", "difficulty": "Hard", "tags": ["Array", "String", "Depth-First Search", "Breadth-First Search", "Graph", "Topological Sort"], "similar_problems": [{"slug": "course-schedule-ii", "title": "Course Schedule II", "difficulty": "Medium"}]},
    {"number": 277, "slug": "find-the-celebrity", "title": "Find the Celebrity", "difficulty": "Medium", "tags": ["Two Pointers", "Graph", "Interactive"], "similar_problems": [{"slug": "find-the-town-judge", "title": "Find the Town Judge", "difficulty": "Easy"}]},
    {"number": 310, "slug": "minimum-height-trees", "title": "Minimum Height Trees", "difficulty": "Medium", "tags": ["Depth-First Search", "Breadth-First Search", "Graph", "Topological Sort"], "similar_problems": [{"slug": "course-schedule", "title": "Course Schedule", "difficulty": "Medium"}, {"slug": "course-schedule-ii", "title": "Course Schedule II", "difficulty": "Medium"}, {"slug": "collect-coins-in-a-tree", "title": "Collect Coins in a Tree", "difficulty": "Hard"}, {"slug": "count-pairs-of-connectable-servers-in-a-weighted-tree-network", "title": "Count Pairs of Connectable Servers in a Weighted Tree Network", "difficulty": "Medium"}, {"slug": "find-minimum-diameter-after-merging-two-trees", "title": "Find Minimum Diameter After Merging Two Trees", "difficulty": "Hard"}]},
    {"number": 323, "slug": "number-of-connected-components-in-an-undirected-graph", "title": "Number of Connected Components in an Undirected Graph", "difficulty": "Medium", "tags": ["Depth-First Search", "Breadth-First Search", "Union Find", "Graph"], "similar_problems": [{"slug": "number-of-islands", "title": "Number of Islands", "difficulty": "Medium"}, {"slug": "graph-valid-tree", "title": "Graph Valid Tree", "difficulty": "Medium"}, {"slug": "number-of-provinces", "title": "Number of Provinces", "difficulty": "Medium"}, {"slug": "paths-in-maze-that-lead-to-same-room", "title": "Paths in Maze That Lead to Same Room", "difficulty": "Medium"}, {"slug": "count-the-number-of-complete-components", "title": "Count the Number of Complete Components", "difficulty": "Medium"}]},
    {"number": 329, "slug": "longest-increasing-path-in-a-matrix", "title": "Longest Increasing Path in a Matrix", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Depth-First Search", "Breadth-First Search", "Graph", "Topological Sort", "Memoization", "Matrix"], "similar_problems": [{"slug": "number-of-increasing-paths-in-a-grid", "title": "Number of Increasing Paths in a Grid", "difficulty": "Hard"}]},
    {"number": 332, "slug": "reconstruct-itinerary", "title": "Reconstruct Itinerary", "difficulty": "Hard", "tags": ["Depth-First Search", "Graph", "Eulerian Circuit"], "similar_problems": [{"slug": "longest-common-subpath", "title": "Longest Common Subpath", "difficulty": "Hard"}, {"slug": "valid-arrangement-of-pairs", "title": "Valid Arrangement of Pairs", "difficulty": "Hard"}]},
    {"number": 399, "slug": "evaluate-division", "title": "Evaluate Division", "difficulty": "Medium", "tags": ["Array", "String", "Depth-First Search", "Breadth-First Search", "Union Find", "Graph", "Shortest Path"], "similar_problems": [{"slug": "check-for-contradictions-in-equations", "title": "Check for Contradictions in Equations", "difficulty": "Hard"}, {"slug": "maximize-amount-after-two-days-of-conversions", "title": "Maximize Amount After Two Days of Conversions", "difficulty": "Medium"}]},
    {"number": 444, "slug": "sequence-reconstruction", "title": "Sequence Reconstruction", "difficulty": "Medium", "tags": ["Array", "Graph", "Topological Sort"], "similar_problems": [{"slug": "course-schedule-ii", "title": "Course Schedule II", "difficulty": "Medium"}]},
    {"number": 499, "slug": "the-maze-iii", "title": "The Maze III", "difficulty": "Hard", "tags": ["Array", "String", "Depth-First Search", "Breadth-First Search", "Graph", "Heap (Priority Queue)", "Matrix", "Shortest Path"], "similar_problems": [{"slug": "the-maze", "title": "The Maze", "difficulty": "Medium"}, {"slug": "the-maze-ii", "title": "The Maze II", "difficulty": "Medium"}]},
    {"number": 505, "slug": "the-maze-ii", "title": "The Maze II", "difficulty": "Medium", "tags": ["Array", "Depth-First Search", "Breadth-First Search", "Graph", "Heap (Priority Queue)", "Matrix", "Shortest Path"], "similar_problems": [{"slug": "the-maze", "title": "The Maze", "difficulty": "Medium"}, {"slug": "the-maze-iii", "title": "The Maze III", "difficulty": "Hard"}]},
    {"number": 547, "slug": "number-of-provinces", "title": "Number of Provinces", "difficulty": "Medium", "tags": ["Depth-First Search", "Breadth-First Search", "Union Find", "Graph"], "similar_problems": [{"slug": "number-of-connected-components-in-an-undirected-graph", "title": "Number of Connected Components in an Undirected Graph", "difficulty": "Medium"}, {"slug": "robot-return-to-origin", "title": "Robot Return to Origin", "difficulty": "Easy"}, {"slug": "sentence-similarity", "title": "Sentence Similarity", "difficulty": "Easy"}, {"slug": "sentence-similarity-ii", "title": "Sentence Similarity II", "difficulty": "Medium"}, {"slug": "the-earliest-moment-when-everyone-become-friends", "title": "The Earliest Moment When Everyone Become Friends", "difficulty": "Medium"}, {"slug": "detonate-the-maximum-bombs", "title": "Detonate the Maximum Bombs", "difficulty": "Medium"}]},
    {"number": 631, "slug": "design-excel-sum-formula", "title": "Design Excel Sum Formula", "difficulty": "Hard", "tags": ["Array", "Hash Table", "String", "Graph", "Design", "Topological Sort", "Matrix"], "similar_problems": []},
    {"number": 684, "slug": "redundant-connection", "title": "Redundant Connection", "difficulty": "Medium", "tags": ["Depth-First Search", "Breadth-First Search", "Union Find", "Graph"], "similar_problems": [{"slug": "redundant-connection-ii", "title": "Redundant Connection II", "difficulty": "Hard"}, {"slug": "accounts-merge", "title": "Accounts Merge", "difficulty": "Medium"}, {"slug": "maximum-employees-to-be-invited-to-a-meeting", "title": "Maximum Employees to Be Invited to a Meeting", "difficulty": "Hard"}, {"slug": "shortest-cycle-in-a-graph", "title": "Shortest Cycle in a Graph", "difficulty": "Hard"}]},
    {"number": 685, "slug": "redundant-connection-ii", "title": "Redundant Connection II", "difficulty": "Hard", "tags": ["Depth-First Search", "Breadth-First Search", "Union Find", "Graph"], "similar_problems": [{"slug": "redundant-connection", "title": "Redundant Connection", "difficulty": "Medium"}]},
    {"number": 743, "slug": "network-delay-time", "title": "Network Delay Time", "difficulty": "Medium", "tags": ["Depth-First Search", "Breadth-First Search", "Graph", "Heap (Priority Queue)", "Shortest Path"], "similar_problems": [{"slug": "the-time-when-the-network-becomes-idle", "title": "The Time When the Network Becomes Idle", "difficulty": "Medium"}, {"slug": "second-minimum-time-to-reach-destination", "title": "Second Minimum Time to Reach Destination", "difficulty": "Hard"}]},
    {"number": 753, "slug": "cracking-the-safe", "title": "Cracking the Safe", "difficulty": "Hard", "tags": ["Depth-First Search", "Graph", "Eulerian Circuit"], "similar_problems": []},
    {"number": 765, "slug": "couples-holding-hands", "title": "Couples Holding Hands", "difficulty": "Hard", "tags": ["Greedy", "Depth-First Search", "Breadth-First Search", "Union Find", "Graph"], "similar_problems": [{"slug": "first-missing-positive", "title": "First Missing Positive", "difficulty": "Hard"}, {"slug": "missing-number", "title": "Missing Number", "difficulty": "Easy"}, {"slug": "k-similar-strings", "title": "K-Similar Strings", "difficulty": "Hard"}]},
    {"number": 785, "slug": "is-graph-bipartite", "title": "Is Graph Bipartite?", "difficulty": "Medium", "tags": ["Depth-First Search", "Breadth-First Search", "Union Find", "Graph"], "similar_problems": [{"slug": "divide-nodes-into-the-maximum-number-of-groups", "title": "Divide Nodes Into the Maximum Number of Groups", "difficulty": "Hard"}]},
    {"number": 787, "slug": "cheapest-flights-within-k-stops", "title": "Cheapest Flights Within K Stops", "difficulty": "Medium", "tags": ["Dynamic Programming", "Depth-First Search", "Breadth-First Search", "Graph", "Heap (Priority Queue)", "Shortest Path"], "similar_problems": [{"slug": "maximum-vacation-days", "title": "Maximum Vacation Days", "difficulty": "Hard"}, {"slug": "minimum-cost-to-reach-city-with-discounts", "title": "Minimum Cost to Reach City With Discounts", "difficulty": "Medium"}]},
    {"number": 797, "slug": "all-paths-from-source-to-target", "title": "All Paths From Source to Target", "difficulty": "Medium", "tags": ["Backtracking", "Depth-First Search", "Breadth-First Search", "Graph"], "similar_problems": [{"slug": "number-of-ways-to-arrive-at-destination", "title": "Number of Ways to Arrive at Destination", "difficulty": "Medium"}, {"slug": "number-of-increasing-paths-in-a-grid", "title": "Number of Increasing Paths in a Grid", "difficulty": "Hard"}]},
    {"number": 802, "slug": "find-eventual-safe-states", "title": "Find Eventual Safe States", "difficulty": "Medium", "tags": ["Depth-First Search", "Breadth-First Search", "Graph", "Topological Sort"], "similar_problems": [{"slug": "build-a-matrix-with-conditions", "title": "Build a Matrix With Conditions", "difficulty": "Hard"}]},
    {"number": 834, "slug": "sum-of-distances-in-tree", "title": "Sum of Distances in Tree", "difficulty": "Hard", "tags": ["Dynamic Programming", "Tree", "Depth-First Search", "Graph"], "similar_problems": [{"slug": "distribute-coins-in-binary-tree", "title": "Distribute Coins in Binary Tree", "difficulty": "Medium"}, {"slug": "count-nodes-with-the-highest-score", "title": "Count Nodes With the Highest Score", "difficulty": "Medium"}, {"slug": "collect-coins-in-a-tree", "title": "Collect Coins in a Tree", "difficulty": "Hard"}, {"slug": "maximum-score-after-applying-operations-on-a-tree", "title": "Maximum Score After Applying Operations on a Tree", "difficulty": "Medium"}, {"slug": "count-pairs-of-connectable-servers-in-a-weighted-tree-network", "title": "Count Pairs of Connectable Servers in a Weighted Tree Network", "difficulty": "Medium"}, {"slug": "time-taken-to-mark-all-nodes", "title": "Time Taken to Mark All Nodes", "difficulty": "Hard"}]},
    {"number": 841, "slug": "keys-and-rooms", "title": "Keys and Rooms", "difficulty": "Medium", "tags": ["Depth-First Search", "Breadth-First Search", "Graph"], "similar_problems": [{"slug": "graph-valid-tree", "title": "Graph Valid Tree", "difficulty": "Medium"}]},
    {"number": 847, "slug": "shortest-path-visiting-all-nodes", "title": "Shortest Path Visiting All Nodes", "difficulty": "Hard", "tags": ["Dynamic Programming", "Bit Manipulation", "Breadth-First Search", "Graph", "Bitmask"], "similar_problems": [{"slug": "find-the-minimum-cost-array-permutation", "title": "Find the Minimum Cost Array Permutation", "difficulty": "Hard"}]},
    {"number": 851, "slug": "loud-and-rich", "title": "Loud and Rich", "difficulty": "Medium", "tags": ["Array", "Depth-First Search", "Graph", "Topological Sort"], "similar_problems": [{"slug": "build-a-matrix-with-conditions", "title": "Build a Matrix With Conditions", "difficulty": "Hard"}]},
    {"number": 882, "slug": "reachable-nodes-in-subdivided-graph", "title": "Reachable Nodes In Subdivided Graph", "difficulty": "Hard", "tags": ["Graph", "Heap (Priority Queue)", "Shortest Path"], "similar_problems": [{"slug": "find-all-people-with-secret", "title": "Find All People With Secret", "difficulty": "Hard"}, {"slug": "paths-in-maze-that-lead-to-same-room", "title": "Paths in Maze That Lead to Same Room", "difficulty": "Medium"}]},
    {"number": 886, "slug": "possible-bipartition", "title": "Possible Bipartition", "difficulty": "Medium", "tags": ["Depth-First Search", "Breadth-First Search", "Union Find", "Graph"], "similar_problems": []},
    {"number": 913, "slug": "cat-and-mouse", "title": "Cat and Mouse", "difficulty": "Hard", "tags": ["Math", "Dynamic Programming", "Graph", "Topological Sort", "Memoization", "Game Theory"], "similar_problems": [{"slug": "cat-and-mouse-ii", "title": "Cat and Mouse II", "difficulty": "Hard"}]},
    {"number": 924, "slug": "minimize-malware-spread", "title": "Minimize Malware Spread", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Depth-First Search", "Breadth-First Search", "Union Find", "Graph"], "similar_problems": []},
    {"number": 928, "slug": "minimize-malware-spread-ii", "title": "Minimize Malware Spread II", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Depth-First Search", "Breadth-First Search", "Union Find", "Graph"], "similar_problems": []},
    {"number": 947, "slug": "most-stones-removed-with-same-row-or-column", "title": "Most Stones Removed with Same Row or Column", "difficulty": "Medium", "tags": ["Hash Table", "Depth-First Search", "Union Find", "Graph"], "similar_problems": [{"slug": "minimum-moves-to-get-a-peaceful-board", "title": "Minimum Moves to Get a Peaceful Board", "difficulty": "Medium"}]},
    {"number": 990, "slug": "satisfiability-of-equality-equations", "title": "Satisfiability of Equality Equations", "difficulty": "Medium", "tags": ["Array", "String", "Union Find", "Graph"], "similar_problems": []},
    {"number": 997, "slug": "find-the-town-judge", "title": "Find the Town Judge", "difficulty": "Easy", "tags": ["Array", "Hash Table", "Graph"], "similar_problems": [{"slug": "find-the-celebrity", "title": "Find the Celebrity", "difficulty": "Medium"}]},
    {"number": 1042, "slug": "flower-planting-with-no-adjacent", "title": "Flower Planting With No Adjacent", "difficulty": "Medium", "tags": ["Depth-First Search", "Breadth-First Search", "Graph"], "similar_problems": []},
    {"number": 1059, "slug": "all-paths-from-source-lead-to-destination", "title": "All Paths from Source Lead to Destination", "difficulty": "Medium", "tags": ["Graph", "Topological Sort"], "similar_problems": []},
    {"number": 1129, "slug": "shortest-path-with-alternating-colors", "title": "Shortest Path with Alternating Colors", "difficulty": "Medium", "tags": ["Breadth-First Search", "Graph"], "similar_problems": []},
    {"number": 1135, "slug": "connecting-cities-with-minimum-cost", "title": "Connecting Cities With Minimum Cost", "difficulty": "Medium", "tags": ["Union Find", "Graph", "Heap (Priority Queue)", "Minimum Spanning Tree"], "similar_problems": [{"slug": "minimum-cost-to-reach-city-with-discounts", "title": "Minimum Cost to Reach City With Discounts", "difficulty": "Medium"}]},
    {"number": 1136, "slug": "parallel-courses", "title": "Parallel Courses", "difficulty": "Medium", "tags": ["Graph", "Topological Sort"], "similar_problems": [{"slug": "course-schedule-ii", "title": "Course Schedule II", "difficulty": "Medium"}, {"slug": "parallel-courses-ii", "title": "Parallel Courses II", "difficulty": "Hard"}, {"slug": "parallel-courses-iii", "title": "Parallel Courses III", "difficulty": "Hard"}]},
    {"number": 1153, "slug": "string-transforms-into-another-string", "title": "String Transforms Into Another String", "difficulty": "Hard", "tags": ["Hash Table", "String", "Graph"], "similar_problems": []},
    {"number": 1168, "slug": "optimize-water-distribution-in-a-village", "title": "Optimize Water Distribution in a Village", "difficulty": "Hard", "tags": ["Union Find", "Graph", "Heap (Priority Queue)", "Minimum Spanning Tree"], "similar_problems": []},
    {"number": 1192, "slug": "critical-connections-in-a-network", "title": "Critical Connections in a Network", "difficulty": "Hard", "tags": ["Depth-First Search", "Graph", "Biconnected Component"], "similar_problems": []},
    {"number": 1203, "slug": "sort-items-by-groups-respecting-dependencies", "title": "Sort Items by Groups Respecting Dependencies", "difficulty": "Hard", "tags": ["Depth-First Search", "Breadth-First Search", "Graph", "Topological Sort"], "similar_problems": []},
    {"number": 1245, "slug": "tree-diameter", "title": "Tree Diameter", "difficulty": "Medium", "tags": ["Tree", "Depth-First Search", "Breadth-First Search", "Graph", "Topological Sort"], "similar_problems": [{"slug": "count-subtrees-with-max-distance-between-cities", "title": "Count Subtrees With Max Distance Between Cities", "difficulty": "Hard"}, {"slug": "find-minimum-diameter-after-merging-two-trees", "title": "Find Minimum Diameter After Merging Two Trees", "difficulty": "Hard"}]},
    {"number": 1298, "slug": "maximum-candies-you-can-get-from-boxes", "title": "Maximum Candies You Can Get from Boxes", "difficulty": "Hard", "tags": ["Array", "Breadth-First Search", "Graph"], "similar_problems": []},
    {"number": 1311, "slug": "get-watched-videos-by-your-friends", "title": "Get Watched Videos by Your Friends", "difficulty": "Medium", "tags": ["Array", "Hash Table", "Breadth-First Search", "Graph", "Sorting"], "similar_problems": []},
    {"number": 1319, "slug": "number-of-operations-to-make-network-connected", "title": "Number of Operations to Make Network Connected", "difficulty": "Medium", "tags": ["Depth-First Search", "Breadth-First Search", "Union Find", "Graph"], "similar_problems": []},
    {"number": 1334, "slug": "find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance", "title": "Find the City With the Smallest Number of Neighbors at a Threshold Distance", "difficulty": "Medium", "tags": ["Dynamic Programming", "Graph", "Shortest Path"], "similar_problems": [{"slug": "second-minimum-time-to-reach-destination", "title": "Second Minimum Time to Reach Destination", "difficulty": "Hard"}]},
    {"number": 1361, "slug": "validate-binary-tree-nodes", "title": "Validate Binary Tree Nodes", "difficulty": "Medium", "tags": ["Tree", "Depth-First Search", "Breadth-First Search", "Union Find", "Graph", "Binary Tree"], "similar_problems": []},
    {"number": 1368, "slug": "minimum-cost-to-make-at-least-one-valid-path-in-a-grid", "title": "Minimum Cost to Make at Least One Valid Path in a Grid", "difficulty": "Hard", "tags": ["Array", "Breadth-First Search", "Graph", "Heap (Priority Queue)", "Matrix", "Shortest Path"], "similar_problems": [{"slug": "minimum-weighted-subgraph-with-the-required-paths", "title": "Minimum Weighted Subgraph With the Required Paths", "difficulty": "Hard"}, {"slug": "disconnect-path-in-a-binary-matrix-by-at-most-one-flip", "title": "Disconnect Path in a Binary Matrix by at Most One Flip", "difficulty": "Medium"}]},
    {"number": 1377, "slug": "frog-position-after-t-seconds", "title": "Frog Position After T Seconds", "difficulty": "Hard", "tags": ["Tree", "Depth-First Search", "Breadth-First Search", "Graph"], "similar_problems": [{"slug": "longest-special-path", "title": "Longest Special Path", "difficulty": "Hard"}]},
    {"number": 1462, "slug": "course-schedule-iv", "title": "Course Schedule IV", "difficulty": "Medium", "tags": ["Depth-First Search", "Breadth-First Search", "Graph", "Topological Sort"], "similar_problems": []},
    {"number": 1466, "slug": "reorder-routes-to-make-all-paths-lead-to-the-city-zero", "title": "Reorder Routes to Make All Paths Lead to the City Zero", "difficulty": "Medium", "tags": ["Depth-First Search", "Breadth-First Search", "Graph"], "similar_problems": [{"slug": "minimum-edge-reversals-so-every-node-is-reachable", "title": "Minimum Edge Reversals So Every Node Is Reachable", "difficulty": "Hard"}]},
    {"number": 1489, "slug": "find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree", "title": "Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree", "difficulty": "Hard", "tags": ["Union Find", "Graph", "Sorting", "Minimum Spanning Tree", "Strongly Connected Component"], "similar_problems": []},
    {"number": 1494, "slug": "parallel-courses-ii", "title": "Parallel Courses II", "difficulty": "Hard", "tags": ["Dynamic Programming", "Bit Manipulation", "Graph", "Bitmask"], "similar_problems": [{"slug": "parallel-courses", "title": "Parallel Courses", "difficulty": "Medium"}]},
    {"number": 1514, "slug": "path-with-maximum-probability", "title": "Path with Maximum Probability", "difficulty": "Medium", "tags": ["Array", "Graph", "Heap (Priority Queue)", "Shortest Path"], "similar_problems": [{"slug": "number-of-ways-to-arrive-at-destination", "title": "Number of Ways to Arrive at Destination", "difficulty": "Medium"}]},
    {"number": 1548, "slug": "the-most-similar-path-in-a-graph", "title": "The Most Similar Path in a Graph", "difficulty": "Hard", "tags": ["Dynamic Programming", "Graph"], "similar_problems": []},
    {"number": 1557, "slug": "minimum-number-of-vertices-to-reach-all-nodes", "title": "Minimum Number of Vertices to Reach All Nodes", "difficulty": "Medium", "tags": ["Graph"], "similar_problems": []},
    {"number": 1579, "slug": "remove-max-number-of-edges-to-keep-graph-fully-traversable", "title": "Remove Max Number of Edges to Keep Graph Fully Traversable", "difficulty": "Hard", "tags": ["Union Find", "Graph"], "similar_problems": []},
    {"number": 1584, "slug": "min-cost-to-connect-all-points", "title": "Min Cost to Connect All Points", "difficulty": "Medium", "tags": ["Array", "Union Find", "Graph", "Minimum Spanning Tree"], "similar_problems": [{"slug": "minimum-number-of-lines-to-cover-points", "title": "Minimum Number of Lines to Cover Points", "difficulty": "Medium"}]},
    {"number": 1591, "slug": "strange-printer-ii", "title": "Strange Printer II", "difficulty": "Hard", "tags": ["Array", "Graph", "Topological Sort", "Matrix"], "similar_problems": [{"slug": "strange-printer", "title": "Strange Printer", "difficulty": "Hard"}, {"slug": "longest-cycle-in-a-graph", "title": "Longest Cycle in a Graph", "difficulty": "Hard"}, {"slug": "sort-array-by-moving-items-to-empty-space", "title": "Sort Array by Moving Items to Empty Space", "difficulty": "Hard"}]},
    {"number": 1615, "slug": "maximal-network-rank", "title": "Maximal Network Rank", "difficulty": "Medium", "tags": ["Graph"], "similar_problems": []},
    {"number": 1632, "slug": "rank-transform-of-a-matrix", "title": "Rank Transform of a Matrix", "difficulty": "Hard", "tags": ["Array", "Union Find", "Graph", "Topological Sort", "Sorting", "Matrix"], "similar_problems": [{"slug": "rank-transform-of-an-array", "title": "Rank Transform of an Array", "difficulty": "Easy"}, {"slug": "gcd-sort-of-an-array", "title": "GCD Sort of an Array", "difficulty": "Hard"}]},
    {"number": 1697, "slug": "checking-existence-of-edge-length-limited-paths", "title": "Checking Existence of Edge Length Limited Paths", "difficulty": "Hard", "tags": ["Array", "Two Pointers", "Union Find", "Graph", "Sorting"], "similar_problems": [{"slug": "checking-existence-of-edge-length-limited-paths-ii", "title": "Checking Existence of Edge Length Limited Paths II", "difficulty": "Hard"}, {"slug": "number-of-good-paths", "title": "Number of Good Paths", "difficulty": "Hard"}, {"slug": "minimum-score-of-a-path-between-two-cities", "title": "Minimum Score of a Path Between Two Cities", "difficulty": "Medium"}]},
    {"number": 1719, "slug": "number-of-ways-to-reconstruct-a-tree", "title": "Number Of Ways To Reconstruct A Tree", "difficulty": "Hard", "tags": ["Tree", "Graph"], "similar_problems": [{"slug": "create-binary-tree-from-descriptions", "title": "Create Binary Tree From Descriptions", "difficulty": "Medium"}, {"slug": "maximum-star-sum-of-a-graph", "title": "Maximum Star Sum of a Graph", "difficulty": "Medium"}]},
    {"number": 1724, "slug": "checking-existence-of-edge-length-limited-paths-ii", "title": "Checking Existence of Edge Length Limited Paths II", "difficulty": "Hard", "tags": ["Union Find", "Graph", "Minimum Spanning Tree"], "similar_problems": [{"slug": "checking-existence-of-edge-length-limited-paths", "title": "Checking Existence of Edge Length Limited Paths", "difficulty": "Hard"}, {"slug": "number-of-good-paths", "title": "Number of Good Paths", "difficulty": "Hard"}, {"slug": "minimum-score-of-a-path-between-two-cities", "title": "Minimum Score of a Path Between Two Cities", "difficulty": "Medium"}]},
    {"number": 1728, "slug": "cat-and-mouse-ii", "title": "Cat and Mouse II", "difficulty": "Hard", "tags": ["Array", "Math", "Dynamic Programming", "Graph", "Topological Sort", "Memoization", "Matrix", "Game Theory"], "similar_problems": [{"slug": "escape-the-ghosts", "title": "Escape The Ghosts", "difficulty": "Medium"}, {"slug": "cat-and-mouse", "title": "Cat and Mouse", "difficulty": "Hard"}]},
    {"number": 1761, "slug": "minimum-degree-of-a-connected-trio-in-a-graph", "title": "Minimum Degree of a Connected Trio in a Graph", "difficulty": "Hard", "tags": ["Graph", "Enumeration"], "similar_problems": [{"slug": "add-edges-to-make-degrees-of-all-nodes-even", "title": "Add Edges to Make Degrees of All Nodes Even", "difficulty": "Hard"}]},
    {"number": 1782, "slug": "count-pairs-of-nodes", "title": "Count Pairs Of Nodes", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Two Pointers", "Binary Search", "Graph", "Sorting", "Counting"], "similar_problems": []},
    {"number": 1786, "slug": "number-of-restricted-paths-from-first-to-last-node", "title": "Number of Restricted Paths From First to Last Node", "difficulty": "Medium", "tags": ["Dynamic Programming", "Graph", "Topological Sort", "Heap (Priority Queue)", "Shortest Path"], "similar_problems": [{"slug": "all-ancestors-of-a-node-in-a-directed-acyclic-graph", "title": "All Ancestors of a Node in a Directed Acyclic Graph", "difficulty": "Medium"}, {"slug": "design-graph-with-shortest-path-calculator", "title": "Design Graph With Shortest Path Calculator", "difficulty": "Hard"}, {"slug": "minimum-cost-of-a-path-with-special-roads", "title": "Minimum Cost of a Path With Special Roads", "difficulty": "Medium"}]},
    {"number": 1791, "slug": "find-center-of-star-graph", "title": "Find Center of Star Graph", "difficulty": "Easy", "tags": ["Graph"], "similar_problems": [{"slug": "maximum-star-sum-of-a-graph", "title": "Maximum Star Sum of a Graph", "difficulty": "Medium"}]},
    {"number": 1810, "slug": "minimum-path-cost-in-a-hidden-grid", "title": "Minimum Path Cost in a Hidden Grid", "difficulty": "Medium", "tags": ["Array", "Depth-First Search", "Breadth-First Search", "Graph", "Heap (Priority Queue)", "Matrix", "Interactive", "Shortest Path"], "similar_problems": [{"slug": "robot-room-cleaner", "title": "Robot Room Cleaner", "difficulty": "Hard"}, {"slug": "shortest-path-in-a-hidden-grid", "title": "Shortest Path in a Hidden Grid", "difficulty": "Medium"}]},
    {"number": 1820, "slug": "maximum-number-of-accepted-invitations", "title": "Maximum Number of Accepted Invitations", "difficulty": "Medium", "tags": ["Array", "Depth-First Search", "Graph", "Matrix"], "similar_problems": []},
    {"number": 1857, "slug": "largest-color-value-in-a-directed-graph", "title": "Largest Color Value in a Directed Graph", "difficulty": "Hard", "tags": ["Hash Table", "Dynamic Programming", "Graph", "Topological Sort", "Memoization", "Counting"], "similar_problems": []},
    {"number": 1916, "slug": "count-ways-to-build-rooms-in-an-ant-colony", "title": "Count Ways to Build Rooms in an Ant Colony", "difficulty": "Hard", "tags": ["Math", "Dynamic Programming", "Tree", "Graph", "Topological Sort", "Combinatorics"], "similar_problems": [{"slug": "count-anagrams", "title": "Count Anagrams", "difficulty": "Hard"}, {"slug": "count-the-number-of-good-subsequences", "title": "Count the Number of Good Subsequences", "difficulty": "Medium"}]},
    {"number": 1928, "slug": "minimum-cost-to-reach-destination-in-time", "title": "Minimum Cost to Reach Destination in Time", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Graph"], "similar_problems": [{"slug": "maximum-cost-of-trip-with-k-highways", "title": "Maximum Cost of Trip With K Highways", "difficulty": "Hard"}, {"slug": "maximum-path-quality-of-a-graph", "title": "Maximum Path Quality of a Graph", "difficulty": "Hard"}, {"slug": "minimum-cost-to-reach-city-with-discounts", "title": "Minimum Cost to Reach City With Discounts", "difficulty": "Medium"}, {"slug": "find-minimum-time-to-reach-last-room-i", "title": "Find Minimum Time to Reach Last Room I", "difficulty": "Medium"}, {"slug": "find-minimum-time-to-reach-last-room-ii", "title": "Find Minimum Time to Reach Last Room II", "difficulty": "Medium"}, {"slug": "minimum-cost-path-with-edge-reversals", "title": "Minimum Cost Path with Edge Reversals", "difficulty": "Medium"}]},
    {"number": 1971, "slug": "find-if-path-exists-in-graph", "title": "Find if Path Exists in Graph", "difficulty": "Easy", "tags": ["Depth-First Search", "Breadth-First Search", "Union Find", "Graph"], "similar_problems": [{"slug": "valid-arrangement-of-pairs", "title": "Valid Arrangement of Pairs", "difficulty": "Hard"}, {"slug": "paths-in-maze-that-lead-to-same-room", "title": "Paths in Maze That Lead to Same Room", "difficulty": "Medium"}]},
    {"number": 1976, "slug": "number-of-ways-to-arrive-at-destination", "title": "Number of Ways to Arrive at Destination", "difficulty": "Medium", "tags": ["Dynamic Programming", "Graph", "Topological Sort", "Shortest Path"], "similar_problems": [{"slug": "all-paths-from-source-to-target", "title": "All Paths From Source to Target", "difficulty": "Medium"}, {"slug": "path-with-maximum-probability", "title": "Path with Maximum Probability", "difficulty": "Medium"}, {"slug": "second-minimum-time-to-reach-destination", "title": "Second Minimum Time to Reach Destination", "difficulty": "Hard"}]},
    {"number": 2039, "slug": "the-time-when-the-network-becomes-idle", "title": "The Time When the Network Becomes Idle", "difficulty": "Medium", "tags": ["Array", "Breadth-First Search", "Graph"], "similar_problems": [{"slug": "network-delay-time", "title": "Network Delay Time", "difficulty": "Medium"}, {"slug": "n-ary-tree-level-order-traversal", "title": "N-ary Tree Level Order Traversal", "difficulty": "Medium"}, {"slug": "maximum-depth-of-n-ary-tree", "title": "Maximum Depth of N-ary Tree", "difficulty": "Easy"}]},
    {"number": 2045, "slug": "second-minimum-time-to-reach-destination", "title": "Second Minimum Time to Reach Destination", "difficulty": "Hard", "tags": ["Breadth-First Search", "Graph", "Shortest Path"], "similar_problems": [{"slug": "network-delay-time", "title": "Network Delay Time", "difficulty": "Medium"}, {"slug": "find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance", "title": "Find the City With the Smallest Number of Neighbors at a Threshold Distance", "difficulty": "Medium"}, {"slug": "number-of-ways-to-arrive-at-destination", "title": "Number of Ways to Arrive at Destination", "difficulty": "Medium"}]},
    {"number": 2050, "slug": "parallel-courses-iii", "title": "Parallel Courses III", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Graph", "Topological Sort"], "similar_problems": [{"slug": "course-schedule-iii", "title": "Course Schedule III", "difficulty": "Hard"}, {"slug": "parallel-courses", "title": "Parallel Courses", "difficulty": "Medium"}, {"slug": "single-threaded-cpu", "title": "Single-Threaded CPU", "difficulty": "Medium"}, {"slug": "process-tasks-using-servers", "title": "Process Tasks Using Servers", "difficulty": "Medium"}, {"slug": "maximum-employees-to-be-invited-to-a-meeting", "title": "Maximum Employees to Be Invited to a Meeting", "difficulty": "Hard"}]},
    {"number": 2065, "slug": "maximum-path-quality-of-a-graph", "title": "Maximum Path Quality of a Graph", "difficulty": "Hard", "tags": ["Array", "Backtracking", "Graph"], "similar_problems": [{"slug": "cherry-pickup", "title": "Cherry Pickup", "difficulty": "Hard"}, {"slug": "minimum-cost-to-reach-destination-in-time", "title": "Minimum Cost to Reach Destination in Time", "difficulty": "Hard"}]},
    {"number": 2076, "slug": "process-restricted-friend-requests", "title": "Process Restricted Friend Requests", "difficulty": "Hard", "tags": ["Union Find", "Graph"], "similar_problems": [{"slug": "number-of-islands-ii", "title": "Number of Islands II", "difficulty": "Hard"}, {"slug": "smallest-string-with-swaps", "title": "Smallest String With Swaps", "difficulty": "Medium"}, {"slug": "maximum-employees-to-be-invited-to-a-meeting", "title": "Maximum Employees to Be Invited to a Meeting", "difficulty": "Hard"}]},
    {"number": 2077, "slug": "paths-in-maze-that-lead-to-same-room", "title": "Paths in Maze That Lead to Same Room", "difficulty": "Medium", "tags": ["Graph"], "similar_problems": [{"slug": "number-of-connected-components-in-an-undirected-graph", "title": "Number of Connected Components in an Undirected Graph", "difficulty": "Medium"}, {"slug": "reachable-nodes-in-subdivided-graph", "title": "Reachable Nodes In Subdivided Graph", "difficulty": "Hard"}, {"slug": "distance-to-a-cycle-in-undirected-graph", "title": "Distance to a Cycle in Undirected Graph", "difficulty": "Hard"}, {"slug": "find-if-path-exists-in-graph", "title": "Find if Path Exists in Graph", "difficulty": "Easy"}]},
    {"number": 2092, "slug": "find-all-people-with-secret", "title": "Find All People With Secret", "difficulty": "Hard", "tags": ["Depth-First Search", "Breadth-First Search", "Union Find", "Graph", "Sorting"], "similar_problems": [{"slug": "reachable-nodes-in-subdivided-graph", "title": "Reachable Nodes In Subdivided Graph", "difficulty": "Hard"}]},
    {"number": 2093, "slug": "minimum-cost-to-reach-city-with-discounts", "title": "Minimum Cost to Reach City With Discounts", "difficulty": "Medium", "tags": ["Graph", "Heap (Priority Queue)", "Shortest Path"], "similar_problems": [{"slug": "cheapest-flights-within-k-stops", "title": "Cheapest Flights Within K Stops", "difficulty": "Medium"}, {"slug": "connecting-cities-with-minimum-cost", "title": "Connecting Cities With Minimum Cost", "difficulty": "Medium"}, {"slug": "maximum-cost-of-trip-with-k-highways", "title": "Maximum Cost of Trip With K Highways", "difficulty": "Hard"}, {"slug": "minimum-cost-to-reach-destination-in-time", "title": "Minimum Cost to Reach Destination in Time", "difficulty": "Hard"}]},
    {"number": 2097, "slug": "valid-arrangement-of-pairs", "title": "Valid Arrangement of Pairs", "difficulty": "Hard", "tags": ["Depth-First Search", "Graph", "Eulerian Circuit"], "similar_problems": [{"slug": "reconstruct-itinerary", "title": "Reconstruct Itinerary", "difficulty": "Hard"}, {"slug": "find-if-path-exists-in-graph", "title": "Find if Path Exists in Graph", "difficulty": "Easy"}]},
    {"number": 2101, "slug": "detonate-the-maximum-bombs", "title": "Detonate the Maximum Bombs", "difficulty": "Medium", "tags": ["Array", "Math", "Depth-First Search", "Breadth-First Search", "Graph", "Geometry"], "similar_problems": [{"slug": "minesweeper", "title": "Minesweeper", "difficulty": "Medium"}, {"slug": "number-of-provinces", "title": "Number of Provinces", "difficulty": "Medium"}, {"slug": "max-area-of-island", "title": "Max Area of Island", "difficulty": "Medium"}, {"slug": "rotting-oranges", "title": "Rotting Oranges", "difficulty": "Medium"}]},
    {"number": 2115, "slug": "find-all-possible-recipes-from-given-supplies", "title": "Find All Possible Recipes from Given Supplies", "difficulty": "Medium", "tags": ["Array", "Hash Table", "String", "Graph", "Topological Sort"], "similar_problems": [{"slug": "course-schedule-ii", "title": "Course Schedule II", "difficulty": "Medium"}, {"slug": "count-good-meals", "title": "Count Good Meals", "difficulty": "Medium"}]},
    {"number": 2123, "slug": "minimum-operations-to-remove-adjacent-ones-in-matrix", "title": "Minimum Operations to Remove Adjacent Ones in Matrix", "difficulty": "Hard", "tags": ["Array", "Graph", "Matrix"], "similar_problems": [{"slug": "set-matrix-zeroes", "title": "Set Matrix Zeroes", "difficulty": "Medium"}, {"slug": "01-matrix", "title": "01 Matrix", "difficulty": "Medium"}, {"slug": "minimum-number-of-flips-to-convert-binary-matrix-to-zero-matrix", "title": "Minimum Number of Flips to Convert Binary Matrix to Zero Matrix", "difficulty": "Hard"}, {"slug": "remove-all-ones-with-row-and-column-flips", "title": "Remove All Ones With Row and Column Flips", "difficulty": "Medium"}]},
    {"number": 2127, "slug": "maximum-employees-to-be-invited-to-a-meeting", "title": "Maximum Employees to Be Invited to a Meeting", "difficulty": "Hard", "tags": ["Depth-First Search", "Graph", "Topological Sort"], "similar_problems": [{"slug": "redundant-connection", "title": "Redundant Connection", "difficulty": "Medium"}, {"slug": "parallel-courses-iii", "title": "Parallel Courses III", "difficulty": "Hard"}, {"slug": "process-restricted-friend-requests", "title": "Process Restricted Friend Requests", "difficulty": "Hard"}]},
    {"number": 2192, "slug": "all-ancestors-of-a-node-in-a-directed-acyclic-graph", "title": "All Ancestors of a Node in a Directed Acyclic Graph", "difficulty": "Medium", "tags": ["Depth-First Search", "Breadth-First Search", "Graph", "Topological Sort"], "similar_problems": [{"slug": "number-of-restricted-paths-from-first-to-last-node", "title": "Number of Restricted Paths From First to Last Node", "difficulty": "Medium"}]},
    {"number": 2203, "slug": "minimum-weighted-subgraph-with-the-required-paths", "title": "Minimum Weighted Subgraph With the Required Paths", "difficulty": "Hard", "tags": ["Graph", "Shortest Path"], "similar_problems": [{"slug": "minimum-cost-to-make-at-least-one-valid-path-in-a-grid", "title": "Minimum Cost to Make at Least One Valid Path in a Grid", "difficulty": "Hard"}, {"slug": "escape-the-spreading-fire", "title": "Escape the Spreading Fire", "difficulty": "Hard"}, {"slug": "disconnect-path-in-a-binary-matrix-by-at-most-one-flip", "title": "Disconnect Path in a Binary Matrix by at Most One Flip", "difficulty": "Medium"}]},
    {"number": 2204, "slug": "distance-to-a-cycle-in-undirected-graph", "title": "Distance to a Cycle in Undirected Graph", "difficulty": "Hard", "tags": ["Depth-First Search", "Breadth-First Search", "Union Find", "Graph"], "similar_problems": [{"slug": "paths-in-maze-that-lead-to-same-room", "title": "Paths in Maze That Lead to Same Room", "difficulty": "Medium"}]},
    {"number": 2242, "slug": "maximum-score-of-a-node-sequence", "title": "Maximum Score of a Node Sequence", "difficulty": "Hard", "tags": ["Array", "Graph", "Sorting", "Enumeration"], "similar_problems": [{"slug": "get-the-maximum-score", "title": "Get the Maximum Score", "difficulty": "Hard"}]},
    {"number": 2246, "slug": "longest-path-with-different-adjacent-characters", "title": "Longest Path With Different Adjacent Characters", "difficulty": "Hard", "tags": ["Array", "String", "Tree", "Depth-First Search", "Graph", "Topological Sort"], "similar_problems": [{"slug": "diameter-of-binary-tree", "title": "Diameter of Binary Tree", "difficulty": "Easy"}, {"slug": "longest-univalue-path", "title": "Longest Univalue Path", "difficulty": "Medium"}, {"slug": "choose-edges-to-maximize-score-in-a-tree", "title": "Choose Edges to Maximize Score in a Tree", "difficulty": "Medium"}]},
    {"number": 2247, "slug": "maximum-cost-of-trip-with-k-highways", "title": "Maximum Cost of Trip With K Highways", "difficulty": "Hard", "tags": ["Dynamic Programming", "Bit Manipulation", "Graph", "Bitmask"], "similar_problems": [{"slug": "minimum-cost-to-reach-destination-in-time", "title": "Minimum Cost to Reach Destination in Time", "difficulty": "Hard"}, {"slug": "minimum-cost-to-reach-city-with-discounts", "title": "Minimum Cost to Reach City With Discounts", "difficulty": "Medium"}]},
    {"number": 2285, "slug": "maximum-total-importance-of-roads", "title": "Maximum Total Importance of Roads", "difficulty": "Medium", "tags": ["Greedy", "Graph", "Sorting", "Heap (Priority Queue)"], "similar_problems": []},
    {"number": 2290, "slug": "minimum-obstacle-removal-to-reach-corner", "title": "Minimum Obstacle Removal to Reach Corner", "difficulty": "Hard", "tags": ["Array", "Breadth-First Search", "Graph", "Heap (Priority Queue)", "Matrix", "Shortest Path"], "similar_problems": [{"slug": "shortest-path-in-a-grid-with-obstacles-elimination", "title": "Shortest Path in a Grid with Obstacles Elimination", "difficulty": "Hard"}]},
    {"number": 2297, "slug": "jump-game-viii", "title": "Jump Game VIII", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Stack", "Graph", "Monotonic Stack", "Shortest Path"], "similar_problems": [{"slug": "jump-game-ii", "title": "Jump Game II", "difficulty": "Medium"}, {"slug": "jump-game", "title": "Jump Game", "difficulty": "Medium"}, {"slug": "jump-game-iii", "title": "Jump Game III", "difficulty": "Medium"}, {"slug": "jump-game-iv", "title": "Jump Game IV", "difficulty": "Hard"}, {"slug": "jump-game-v", "title": "Jump Game V", "difficulty": "Hard"}, {"slug": "jump-game-vi", "title": "Jump Game VI", "difficulty": "Medium"}, {"slug": "jump-game-vii", "title": "Jump Game VII", "difficulty": "Medium"}, {"slug": "jump-game-viii", "title": "Jump Game VIII", "difficulty": "Medium"}]},
    {"number": 2307, "slug": "check-for-contradictions-in-equations", "title": "Check for Contradictions in Equations", "difficulty": "Hard", "tags": ["Array", "Depth-First Search", "Union Find", "Graph"], "similar_problems": [{"slug": "evaluate-division", "title": "Evaluate Division", "difficulty": "Medium"}]},
    {"number": 2316, "slug": "count-unreachable-pairs-of-nodes-in-an-undirected-graph", "title": "Count Unreachable Pairs of Nodes in an Undirected Graph", "difficulty": "Medium", "tags": ["Depth-First Search", "Breadth-First Search", "Union Find", "Graph"], "similar_problems": [{"slug": "number-of-islands", "title": "Number of Islands", "difficulty": "Medium"}]},
    {"number": 2328, "slug": "number-of-increasing-paths-in-a-grid", "title": "Number of Increasing Paths in a Grid", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Depth-First Search", "Breadth-First Search", "Graph", "Topological Sort", "Memoization", "Matrix"], "similar_problems": [{"slug": "longest-increasing-path-in-a-matrix", "title": "Longest Increasing Path in a Matrix", "difficulty": "Hard"}, {"slug": "all-paths-from-source-to-target", "title": "All Paths From Source to Target", "difficulty": "Medium"}, {"slug": "maximum-strictly-increasing-cells-in-a-matrix", "title": "Maximum Strictly Increasing Cells in a Matrix", "difficulty": "Hard"}]},
    {"number": 2359, "slug": "find-closest-node-to-given-two-nodes", "title": "Find Closest Node to Given Two Nodes", "difficulty": "Medium", "tags": ["Depth-First Search", "Graph"], "similar_problems": []},
    {"number": 2360, "slug": "longest-cycle-in-a-graph", "title": "Longest Cycle in a Graph", "difficulty": "Hard", "tags": ["Depth-First Search", "Breadth-First Search", "Graph", "Topological Sort"], "similar_problems": [{"slug": "strange-printer-ii", "title": "Strange Printer II", "difficulty": "Hard"}, {"slug": "minimum-number-of-operations-to-sort-a-binary-tree-by-level", "title": "Minimum Number of Operations to Sort a Binary Tree by Level", "difficulty": "Medium"}, {"slug": "shortest-cycle-in-a-graph", "title": "Shortest Cycle in a Graph", "difficulty": "Hard"}]},
    {"number": 2368, "slug": "reachable-nodes-with-restrictions", "title": "Reachable Nodes With Restrictions", "difficulty": "Medium", "tags": ["Array", "Hash Table", "Tree", "Depth-First Search", "Breadth-First Search", "Union Find", "Graph"], "similar_problems": [{"slug": "open-the-lock", "title": "Open the Lock", "difficulty": "Medium"}, {"slug": "minimum-jumps-to-reach-home", "title": "Minimum Jumps to Reach Home", "difficulty": "Medium"}]},
    {"number": 2371, "slug": "minimize-maximum-value-in-a-grid", "title": "Minimize Maximum Value in a Grid", "difficulty": "Hard", "tags": ["Array", "Union Find", "Graph", "Topological Sort", "Sorting", "Matrix"], "similar_problems": [{"slug": "candy", "title": "Candy", "difficulty": "Hard"}]},
    {"number": 2374, "slug": "node-with-highest-edge-score", "title": "Node With Highest Edge Score", "difficulty": "Medium", "tags": ["Hash Table", "Graph"], "similar_problems": [{"slug": "two-sum", "title": "Two Sum", "difficulty": "Easy"}, {"slug": "sort-characters-by-frequency", "title": "Sort Characters By Frequency", "difficulty": "Medium"}, {"slug": "sort-array-by-increasing-frequency", "title": "Sort Array by Increasing Frequency", "difficulty": "Easy"}]},
    {"number": 2392, "slug": "build-a-matrix-with-conditions", "title": "Build a Matrix With Conditions", "difficulty": "Hard", "tags": ["Array", "Graph", "Topological Sort", "Matrix"], "similar_problems": [{"slug": "course-schedule", "title": "Course Schedule", "difficulty": "Medium"}, {"slug": "course-schedule-ii", "title": "Course Schedule II", "difficulty": "Medium"}, {"slug": "find-eventual-safe-states", "title": "Find Eventual Safe States", "difficulty": "Medium"}, {"slug": "loud-and-rich", "title": "Loud and Rich", "difficulty": "Medium"}]},
    {"number": 2421, "slug": "number-of-good-paths", "title": "Number of Good Paths", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Tree", "Union Find", "Graph", "Sorting"], "similar_problems": [{"slug": "checking-existence-of-edge-length-limited-paths", "title": "Checking Existence of Edge Length Limited Paths", "difficulty": "Hard"}, {"slug": "checking-existence-of-edge-length-limited-paths-ii", "title": "Checking Existence of Edge Length Limited Paths II", "difficulty": "Hard"}, {"slug": "longest-nice-substring", "title": "Longest Nice Substring", "difficulty": "Easy"}, {"slug": "count-good-triplets-in-an-array", "title": "Count Good Triplets in an Array", "difficulty": "Hard"}, {"slug": "count-pairs-of-similar-strings", "title": "Count Pairs Of Similar Strings", "difficulty": "Easy"}]},
    {"number": 2467, "slug": "most-profitable-path-in-a-tree", "title": "Most Profitable Path in a Tree", "difficulty": "Medium", "tags": ["Array", "Tree", "Depth-First Search", "Breadth-First Search", "Graph"], "similar_problems": [{"slug": "snakes-and-ladders", "title": "Snakes and Ladders", "difficulty": "Medium"}, {"slug": "time-taken-to-mark-all-nodes", "title": "Time Taken to Mark All Nodes", "difficulty": "Hard"}]},
    {"number": 2473, "slug": "minimum-cost-to-buy-apples", "title": "Minimum Cost to Buy Apples", "difficulty": "Medium", "tags": ["Array", "Graph", "Heap (Priority Queue)", "Shortest Path"], "similar_problems": []},
    {"number": 2477, "slug": "minimum-fuel-cost-to-report-to-the-capital", "title": "Minimum Fuel Cost to Report to the Capital", "difficulty": "Medium", "tags": ["Tree", "Depth-First Search", "Breadth-First Search", "Graph"], "similar_problems": [{"slug": "binary-tree-postorder-traversal", "title": "Binary Tree Postorder Traversal", "difficulty": "Easy"}]},
    {"number": 2479, "slug": "maximum-xor-of-two-non-overlapping-subtrees", "title": "Maximum XOR of Two Non-Overlapping Subtrees", "difficulty": "Hard", "tags": ["Tree", "Depth-First Search", "Graph", "Trie"], "similar_problems": []},
    {"number": 2492, "slug": "minimum-score-of-a-path-between-two-cities", "title": "Minimum Score of a Path Between Two Cities", "difficulty": "Medium", "tags": ["Depth-First Search", "Breadth-First Search", "Union Find", "Graph"], "similar_problems": [{"slug": "checking-existence-of-edge-length-limited-paths", "title": "Checking Existence of Edge Length Limited Paths", "difficulty": "Hard"}, {"slug": "checking-existence-of-edge-length-limited-paths-ii", "title": "Checking Existence of Edge Length Limited Paths II", "difficulty": "Hard"}]},
    {"number": 2493, "slug": "divide-nodes-into-the-maximum-number-of-groups", "title": "Divide Nodes Into the Maximum Number of Groups", "difficulty": "Hard", "tags": ["Depth-First Search", "Breadth-First Search", "Union Find", "Graph"], "similar_problems": [{"slug": "binary-tree-level-order-traversal", "title": "Binary Tree Level Order Traversal", "difficulty": "Medium"}, {"slug": "is-graph-bipartite", "title": "Is Graph Bipartite?", "difficulty": "Medium"}, {"slug": "shortest-cycle-in-a-graph", "title": "Shortest Cycle in a Graph", "difficulty": "Hard"}]},
    {"number": 2497, "slug": "maximum-star-sum-of-a-graph", "title": "Maximum Star Sum of a Graph", "difficulty": "Medium", "tags": ["Array", "Greedy", "Graph", "Sorting", "Heap (Priority Queue)"], "similar_problems": [{"slug": "number-of-ways-to-reconstruct-a-tree", "title": "Number Of Ways To Reconstruct A Tree", "difficulty": "Hard"}, {"slug": "find-center-of-star-graph", "title": "Find Center of Star Graph", "difficulty": "Easy"}]},
    {"number": 2508, "slug": "add-edges-to-make-degrees-of-all-nodes-even", "title": "Add Edges to Make Degrees of All Nodes Even", "difficulty": "Hard", "tags": ["Hash Table", "Graph"], "similar_problems": [{"slug": "minimum-degree-of-a-connected-trio-in-a-graph", "title": "Minimum Degree of a Connected Trio in a Graph", "difficulty": "Hard"}]},
    {"number": 2577, "slug": "minimum-time-to-visit-a-cell-in-a-grid", "title": "Minimum Time to Visit a Cell In a Grid", "difficulty": "Hard", "tags": ["Array", "Breadth-First Search", "Graph", "Heap (Priority Queue)", "Matrix", "Shortest Path"], "similar_problems": [{"slug": "find-minimum-time-to-reach-last-room-i", "title": "Find Minimum Time to Reach Last Room I", "difficulty": "Medium"}, {"slug": "find-minimum-time-to-reach-last-room-ii", "title": "Find Minimum Time to Reach Last Room II", "difficulty": "Medium"}]},
    {"number": 2603, "slug": "collect-coins-in-a-tree", "title": "Collect Coins in a Tree", "difficulty": "Hard", "tags": ["Array", "Tree", "Graph", "Topological Sort"], "similar_problems": [{"slug": "minimum-height-trees", "title": "Minimum Height Trees", "difficulty": "Medium"}, {"slug": "sum-of-distances-in-tree", "title": "Sum of Distances in Tree", "difficulty": "Hard"}, {"slug": "maximum-score-after-applying-operations-on-a-tree", "title": "Maximum Score After Applying Operations on a Tree", "difficulty": "Medium"}, {"slug": "find-number-of-coins-to-place-in-tree-nodes", "title": "Find Number of Coins to Place in Tree Nodes", "difficulty": "Hard"}]},
    {"number": 2608, "slug": "shortest-cycle-in-a-graph", "title": "Shortest Cycle in a Graph", "difficulty": "Hard", "tags": ["Breadth-First Search", "Graph"], "similar_problems": [{"slug": "redundant-connection", "title": "Redundant Connection", "difficulty": "Medium"}, {"slug": "longest-cycle-in-a-graph", "title": "Longest Cycle in a Graph", "difficulty": "Hard"}, {"slug": "divide-nodes-into-the-maximum-number-of-groups", "title": "Divide Nodes Into the Maximum Number of Groups", "difficulty": "Hard"}]},
    {"number": 2642, "slug": "design-graph-with-shortest-path-calculator", "title": "Design Graph With Shortest Path Calculator", "difficulty": "Hard", "tags": ["Graph", "Design", "Heap (Priority Queue)", "Shortest Path"], "similar_problems": [{"slug": "number-of-restricted-paths-from-first-to-last-node", "title": "Number of Restricted Paths From First to Last Node", "difficulty": "Medium"}, {"slug": "closest-node-to-path-in-tree", "title": "Closest Node to Path in Tree", "difficulty": "Hard"}]},
    {"number": 2646, "slug": "minimize-the-total-price-of-the-trips", "title": "Minimize the Total Price of the Trips", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Tree", "Depth-First Search", "Graph"], "similar_problems": []},
    {"number": 2662, "slug": "minimum-cost-of-a-path-with-special-roads", "title": "Minimum Cost of a Path With Special Roads", "difficulty": "Medium", "tags": ["Array", "Graph", "Heap (Priority Queue)", "Shortest Path"], "similar_problems": [{"slug": "minimum-path-sum", "title": "Minimum Path Sum", "difficulty": "Medium"}, {"slug": "number-of-restricted-paths-from-first-to-last-node", "title": "Number of Restricted Paths From First to Last Node", "difficulty": "Medium"}]},
    {"number": 2685, "slug": "count-the-number-of-complete-components", "title": "Count the Number of Complete Components", "difficulty": "Medium", "tags": ["Depth-First Search", "Breadth-First Search", "Union Find", "Graph"], "similar_problems": [{"slug": "number-of-connected-components-in-an-undirected-graph", "title": "Number of Connected Components in an Undirected Graph", "difficulty": "Medium"}]},
    {"number": 2699, "slug": "modify-graph-edge-weights", "title": "Modify Graph Edge Weights", "difficulty": "Hard", "tags": ["Graph", "Heap (Priority Queue)", "Shortest Path"], "similar_problems": []},
    {"number": 2714, "slug": "find-shortest-path-with-k-hops", "title": "Find Shortest Path with K Hops", "difficulty": "Hard", "tags": ["Graph", "Heap (Priority Queue)", "Shortest Path"], "similar_problems": []},
    {"number": 2737, "slug": "find-the-closest-marked-node", "title": "Find the Closest Marked Node", "difficulty": "Medium", "tags": ["Array", "Graph", "Heap (Priority Queue)", "Shortest Path"], "similar_problems": []},
    {"number": 2846, "slug": "minimum-edge-weight-equilibrium-queries-in-a-tree", "title": "Minimum Edge Weight Equilibrium Queries in a Tree", "difficulty": "Hard", "tags": ["Array", "Tree", "Graph", "Strongly Connected Component"], "similar_problems": [{"slug": "kth-ancestor-of-a-tree-node", "title": "Kth Ancestor of a Tree Node", "difficulty": "Hard"}, {"slug": "minimum-runes-to-add-to-cast-spell", "title": "Minimum Runes to Add to Cast Spell", "difficulty": "Hard"}]},
    {"number": 2858, "slug": "minimum-edge-reversals-so-every-node-is-reachable", "title": "Minimum Edge Reversals So Every Node Is Reachable", "difficulty": "Hard", "tags": ["Dynamic Programming", "Depth-First Search", "Breadth-First Search", "Graph"], "similar_problems": [{"slug": "reorder-routes-to-make-all-paths-lead-to-the-city-zero", "title": "Reorder Routes to Make All Paths Lead to the City Zero", "difficulty": "Medium"}]},
    {"number": 2876, "slug": "count-visited-nodes-in-a-directed-graph", "title": "Count Visited Nodes in a Directed Graph", "difficulty": "Hard", "tags": ["Dynamic Programming", "Graph", "Memoization"], "similar_problems": []},
    {"number": 2924, "slug": "find-champion-ii", "title": "Find Champion II", "difficulty": "Medium", "tags": ["Graph"], "similar_problems": []},
    {"number": 2959, "slug": "number-of-possible-sets-of-closing-branches", "title": "Number of Possible Sets of Closing Branches", "difficulty": "Hard", "tags": ["Bit Manipulation", "Graph", "Heap (Priority Queue)", "Enumeration", "Shortest Path"], "similar_problems": []},
    {"number": 2976, "slug": "minimum-cost-to-convert-string-i", "title": "Minimum Cost to Convert String I", "difficulty": "Medium", "tags": ["Array", "String", "Graph", "Shortest Path"], "similar_problems": [{"slug": "can-convert-string-in-k-moves", "title": "Can Convert String in K Moves", "difficulty": "Medium"}, {"slug": "minimum-moves-to-convert-string", "title": "Minimum Moves to Convert String", "difficulty": "Easy"}]},
    {"number": 2977, "slug": "minimum-cost-to-convert-string-ii", "title": "Minimum Cost to Convert String II", "difficulty": "Hard", "tags": ["Array", "String", "Dynamic Programming", "Graph", "Trie", "Shortest Path"], "similar_problems": [{"slug": "can-convert-string-in-k-moves", "title": "Can Convert String in K Moves", "difficulty": "Medium"}, {"slug": "minimum-moves-to-convert-string", "title": "Minimum Moves to Convert String", "difficulty": "Easy"}, {"slug": "minimum-number-of-valid-strings-to-form-target-ii", "title": "Minimum Number of Valid Strings to Form Target II", "difficulty": "Hard"}, {"slug": "minimum-number-of-valid-strings-to-form-target-i", "title": "Minimum Number of Valid Strings to Form Target I", "difficulty": "Medium"}]},
    {"number": 3015, "slug": "count-the-number-of-houses-at-a-certain-distance-i", "title": "Count the Number of Houses at a Certain Distance I", "difficulty": "Medium", "tags": ["Breadth-First Search", "Graph", "Prefix Sum"], "similar_problems": [{"slug": "walls-and-gates", "title": "Walls and Gates", "difficulty": "Medium"}]},
    {"number": 3017, "slug": "count-the-number-of-houses-at-a-certain-distance-ii", "title": "Count the Number of Houses at a Certain Distance II", "difficulty": "Hard", "tags": ["Graph", "Prefix Sum"], "similar_problems": [{"slug": "walls-and-gates", "title": "Walls and Gates", "difficulty": "Medium"}]},
    {"number": 3108, "slug": "minimum-cost-walk-in-weighted-graph", "title": "Minimum Cost Walk in Weighted Graph", "difficulty": "Hard", "tags": ["Array", "Bit Manipulation", "Union Find", "Graph"], "similar_problems": []},
    {"number": 3112, "slug": "minimum-time-to-visit-disappearing-nodes", "title": "Minimum Time to Visit Disappearing Nodes", "difficulty": "Medium", "tags": ["Array", "Graph", "Heap (Priority Queue)", "Shortest Path"], "similar_problems": [{"slug": "find-the-last-marked-nodes-in-tree", "title": "Find the Last Marked Nodes in Tree", "difficulty": "Hard"}]},
    {"number": 3123, "slug": "find-edges-in-shortest-paths", "title": "Find Edges in Shortest Paths", "difficulty": "Hard", "tags": ["Depth-First Search", "Breadth-First Search", "Graph", "Heap (Priority Queue)", "Shortest Path"], "similar_problems": []},
    {"number": 3203, "slug": "find-minimum-diameter-after-merging-two-trees", "title": "Find Minimum Diameter After Merging Two Trees", "difficulty": "Hard", "tags": ["Tree", "Depth-First Search", "Breadth-First Search", "Graph"], "similar_problems": [{"slug": "minimum-height-trees", "title": "Minimum Height Trees", "difficulty": "Medium"}, {"slug": "tree-diameter", "title": "Tree Diameter", "difficulty": "Medium"}, {"slug": "maximize-the-number-of-target-nodes-after-connecting-trees-i", "title": "Maximize the Number of Target Nodes After Connecting Trees I", "difficulty": "Medium"}, {"slug": "maximize-the-number-of-target-nodes-after-connecting-trees-ii", "title": "Maximize the Number of Target Nodes After Connecting Trees II", "difficulty": "Hard"}, {"slug": "maximize-sum-of-weights-after-edge-removals", "title": "Maximize Sum of Weights after Edge Removals", "difficulty": "Hard"}]},
    {"number": 3241, "slug": "time-taken-to-mark-all-nodes", "title": "Time Taken to Mark All Nodes", "difficulty": "Hard", "tags": ["Dynamic Programming", "Tree", "Depth-First Search", "Graph"], "similar_problems": [{"slug": "sum-of-distances-in-tree", "title": "Sum of Distances in Tree", "difficulty": "Hard"}, {"slug": "most-profitable-path-in-a-tree", "title": "Most Profitable Path in a Tree", "difficulty": "Medium"}, {"slug": "find-the-last-marked-nodes-in-tree", "title": "Find the Last Marked Nodes in Tree", "difficulty": "Hard"}]},
    {"number": 3243, "slug": "shortest-distance-after-road-addition-queries-i", "title": "Shortest Distance After Road Addition Queries I", "difficulty": "Medium", "tags": ["Array", "Breadth-First Search", "Graph"], "similar_problems": []},
    {"number": 3244, "slug": "shortest-distance-after-road-addition-queries-ii", "title": "Shortest Distance After Road Addition Queries II", "difficulty": "Hard", "tags": ["Array", "Greedy", "Graph", "Ordered Set"], "similar_problems": []},
    {"number": 3286, "slug": "find-a-safe-walk-through-a-grid", "title": "Find a Safe Walk Through a Grid", "difficulty": "Medium", "tags": ["Array", "Breadth-First Search", "Graph", "Heap (Priority Queue)", "Matrix", "Shortest Path"], "similar_problems": [{"slug": "shortest-path-in-a-grid-with-obstacles-elimination", "title": "Shortest Path in a Grid with Obstacles Elimination", "difficulty": "Hard"}]},
    {"number": 3310, "slug": "remove-methods-from-project", "title": "Remove Methods From Project", "difficulty": "Medium", "tags": ["Depth-First Search", "Breadth-First Search", "Graph"], "similar_problems": []},
    {"number": 3311, "slug": "construct-2d-grid-matching-graph-layout", "title": "Construct 2D Grid Matching Graph Layout", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Graph", "Matrix"], "similar_problems": []},
    {"number": 3341, "slug": "find-minimum-time-to-reach-last-room-i", "title": "Find Minimum Time to Reach Last Room I", "difficulty": "Medium", "tags": ["Array", "Graph", "Heap (Priority Queue)", "Matrix", "Shortest Path"], "similar_problems": [{"slug": "minimum-cost-to-reach-destination-in-time", "title": "Minimum Cost to Reach Destination in Time", "difficulty": "Hard"}, {"slug": "minimum-time-to-visit-a-cell-in-a-grid", "title": "Minimum Time to Visit a Cell In a Grid", "difficulty": "Hard"}]},
    {"number": 3342, "slug": "find-minimum-time-to-reach-last-room-ii", "title": "Find Minimum Time to Reach Last Room II", "difficulty": "Medium", "tags": ["Array", "Graph", "Heap (Priority Queue)", "Matrix", "Shortest Path"], "similar_problems": [{"slug": "minimum-cost-to-reach-destination-in-time", "title": "Minimum Cost to Reach Destination in Time", "difficulty": "Hard"}, {"slug": "minimum-time-to-visit-a-cell-in-a-grid", "title": "Minimum Time to Visit a Cell In a Grid", "difficulty": "Hard"}]},
    {"number": 3377, "slug": "digit-operations-to-make-two-integers-equal", "title": "Digit Operations to Make Two Integers Equal", "difficulty": "Medium", "tags": ["Math", "Graph", "Heap (Priority Queue)", "Number Theory", "Shortest Path"], "similar_problems": []},
    {"number": 3383, "slug": "minimum-runes-to-add-to-cast-spell", "title": "Minimum Runes to Add to Cast Spell", "difficulty": "Hard", "tags": ["Array", "Depth-First Search", "Breadth-First Search", "Union Find", "Graph", "Topological Sort"], "similar_problems": [{"slug": "minimum-number-of-days-to-disconnect-island", "title": "Minimum Number of Days to Disconnect Island", "difficulty": "Hard"}, {"slug": "minimum-edge-weight-equilibrium-queries-in-a-tree", "title": "Minimum Edge Weight Equilibrium Queries in a Tree", "difficulty": "Hard"}]},
    {"number": 3385, "slug": "minimum-time-to-break-locks-ii", "title": "Minimum Time to Break Locks II", "difficulty": "Hard", "tags": ["Array", "Depth-First Search", "Graph"], "similar_problems": []},
    {"number": 3387, "slug": "maximize-amount-after-two-days-of-conversions", "title": "Maximize Amount After Two Days of Conversions", "difficulty": "Medium", "tags": ["Array", "String", "Depth-First Search", "Breadth-First Search", "Graph"], "similar_problems": [{"slug": "evaluate-division", "title": "Evaluate Division", "difficulty": "Medium"}]},
    {"number": 3419, "slug": "minimize-the-maximum-edge-weight-of-graph", "title": "Minimize the Maximum Edge Weight of Graph", "difficulty": "Medium", "tags": ["Binary Search", "Depth-First Search", "Breadth-First Search", "Graph", "Shortest Path"], "similar_problems": []},
    {"number": 3435, "slug": "frequencies-of-shortest-supersequences", "title": "Frequencies of Shortest Supersequences", "difficulty": "Hard", "tags": ["Array", "String", "Bit Manipulation", "Graph", "Topological Sort", "Enumeration"], "similar_problems": []},
    {"number": 3481, "slug": "apply-substitutions", "title": "Apply Substitutions", "difficulty": "Medium", "tags": ["Array", "Hash Table", "String", "Depth-First Search", "Breadth-First Search", "Graph", "Topological Sort"], "similar_problems": [{"slug": "evaluate-the-bracket-pairs-of-a-string", "title": "Evaluate the Bracket Pairs of a String", "difficulty": "Medium"}]},
    {"number": 3493, "slug": "properties-graph", "title": "Properties Graph", "difficulty": "Medium", "tags": ["Array", "Hash Table", "Depth-First Search", "Breadth-First Search", "Union Find", "Graph"], "similar_problems": []},
    {"number": 3528, "slug": "unit-conversion-i", "title": "Unit Conversion I", "difficulty": "Medium", "tags": ["Depth-First Search", "Breadth-First Search", "Graph"], "similar_problems": []},
    {"number": 3530, "slug": "maximum-profit-from-valid-topological-order-in-dag", "title": "Maximum Profit from Valid Topological Order in DAG", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Bit Manipulation", "Graph", "Topological Sort", "Bitmask"], "similar_problems": []},
    {"number": 3532, "slug": "path-existence-queries-in-a-graph-i", "title": "Path Existence Queries in a Graph I", "difficulty": "Medium", "tags": ["Array", "Hash Table", "Binary Search", "Union Find", "Graph"], "similar_problems": []},
    {"number": 3534, "slug": "path-existence-queries-in-a-graph-ii", "title": "Path Existence Queries in a Graph II", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Greedy", "Graph", "Sorting"], "similar_problems": []},
    {"number": 3535, "slug": "unit-conversion-ii", "title": "Unit Conversion II", "difficulty": "Medium", "tags": ["Array", "Math", "Depth-First Search", "Breadth-First Search", "Graph"], "similar_problems": []},
    {"number": 3543, "slug": "maximum-weighted-k-edge-path", "title": "Maximum Weighted K-Edge Path", "difficulty": "Medium", "tags": ["Hash Table", "Dynamic Programming", "Graph"], "similar_problems": []},
    {"number": 3547, "slug": "maximum-sum-of-edge-values-in-a-graph", "title": "Maximum Sum of Edge Values in a Graph", "difficulty": "Hard", "tags": ["Math", "Greedy", "Graph"], "similar_problems": []},
    {"number": 3594, "slug": "minimum-time-to-transport-all-individuals", "title": "Minimum Time to Transport All Individuals", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Bit Manipulation", "Graph", "Heap (Priority Queue)", "Shortest Path", "Bitmask"], "similar_problems": []},
    {"number": 3600, "slug": "maximize-spanning-tree-stability-with-upgrades", "title": "Maximize Spanning Tree Stability with Upgrades", "difficulty": "Hard", "tags": ["Binary Search", "Greedy", "Union Find", "Graph", "Minimum Spanning Tree"], "similar_problems": []},
    {"number": 3604, "slug": "minimum-time-to-reach-destination-in-directed-graph", "title": "Minimum Time to Reach Destination in Directed Graph", "difficulty": "Medium", "tags": ["Graph", "Heap (Priority Queue)", "Shortest Path"], "similar_problems": []},
    {"number": 3607, "slug": "power-grid-maintenance", "title": "Power Grid Maintenance", "difficulty": "Medium", "tags": ["Array", "Hash Table", "Depth-First Search", "Breadth-First Search", "Union Find", "Graph", "Heap (Priority Queue)", "Ordered Set"], "similar_problems": []},
    {"number": 3608, "slug": "minimum-time-for-k-connected-components", "title": "Minimum Time for K Connected Components", "difficulty": "Medium", "tags": ["Binary Search", "Union Find", "Graph", "Sorting"], "similar_problems": []},
    {"number": 3613, "slug": "minimize-maximum-component-cost", "title": "Minimize Maximum Component Cost", "difficulty": "Medium", "tags": ["Binary Search", "Union Find", "Graph", "Sorting"], "similar_problems": []},
    {"number": 3615, "slug": "longest-palindromic-path-in-graph", "title": "Longest Palindromic Path in Graph", "difficulty": "Hard", "tags": ["String", "Dynamic Programming", "Bit Manipulation", "Graph", "Bitmask"], "similar_problems": []},
    {"number": 3620, "slug": "network-recovery-pathways", "title": "Network Recovery Pathways", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Dynamic Programming", "Graph", "Topological Sort", "Heap (Priority Queue)", "Shortest Path"], "similar_problems": []}
]