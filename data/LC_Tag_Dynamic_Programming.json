[
    {"number": 5, "slug": "longest-palindromic-substring", "title": "Longest Palindromic Substring", "difficulty": "Medium", "tags": ["Two Pointers", "String", "Dynamic Programming"], "similar_problems": [{"slug": "shortest-palindrome", "title": "Shortest Palindrome", "difficulty": "Hard"}, {"slug": "palindrome-permutation", "title": "Palindrome Permutation", "difficulty": "Easy"}, {"slug": "palindrome-pairs", "title": "Palindrome Pairs", "difficulty": "Hard"}, {"slug": "longest-palindromic-subsequence", "title": "Longest Palindromic Subsequence", "difficulty": "Medium"}, {"slug": "palindromic-substrings", "title": "Palindromic Substrings", "difficulty": "Medium"}, {"slug": "maximum-number-of-non-overlapping-palindrome-substrings", "title": "Maximum Number of Non-overlapping Palindrome Substrings", "difficulty": "Hard"}]},
    {"number": 10, "slug": "regular-expression-matching", "title": "Regular Expression Matching", "difficulty": "Hard", "tags": ["String", "Dynamic Programming", "Recursion"], "similar_problems": [{"slug": "wildcard-matching", "title": "Wildcard Matching", "difficulty": "Hard"}]},
    {"number": 22, "slug": "generate-parentheses", "title": "Generate Parentheses", "difficulty": "Medium", "tags": ["String", "Dynamic Programming", "Backtracking"], "similar_problems": [{"slug": "letter-combinations-of-a-phone-number", "title": "Letter Combinations of a Phone Number", "difficulty": "Medium"}, {"slug": "valid-parentheses", "title": "Valid Parentheses", "difficulty": "Easy"}, {"slug": "check-if-a-parentheses-string-can-be-valid", "title": "Check if a Parentheses String Can Be Valid", "difficulty": "Medium"}]},
    {"number": 32, "slug": "longest-valid-parentheses", "title": "Longest Valid Parentheses", "difficulty": "Hard", "tags": ["String", "Dynamic Programming", "Stack"], "similar_problems": [{"slug": "valid-parentheses", "title": "Valid Parentheses", "difficulty": "Easy"}]},
    {"number": 42, "slug": "trapping-rain-water", "title": "Trapping Rain Water", "difficulty": "Hard", "tags": ["Array", "Two Pointers", "Dynamic Programming", "Stack", "Monotonic Stack"], "similar_problems": [{"slug": "container-with-most-water", "title": "Container With Most Water", "difficulty": "Medium"}, {"slug": "product-of-array-except-self", "title": "Product of Array Except Self", "difficulty": "Medium"}, {"slug": "trapping-rain-water-ii", "title": "Trapping Rain Water II", "difficulty": "Hard"}, {"slug": "pour-water", "title": "Pour Water", "difficulty": "Medium"}, {"slug": "maximum-value-of-an-ordered-triplet-ii", "title": "Maximum Value of an Ordered Triplet II", "difficulty": "Medium"}]},
    {"number": 44, "slug": "wildcard-matching", "title": "Wildcard Matching", "difficulty": "Hard", "tags": ["String", "Dynamic Programming", "Greedy", "Recursion"], "similar_problems": [{"slug": "regular-expression-matching", "title": "Regular Expression Matching", "difficulty": "Hard"}, {"slug": "substring-matching-pattern", "title": "Substring Matching Pattern", "difficulty": "Easy"}]},
    {"number": 45, "slug": "jump-game-ii", "title": "Jump Game II", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Greedy"], "similar_problems": [{"slug": "jump-game", "title": "Jump Game", "difficulty": "Medium"}, {"slug": "jump-game-iii", "title": "Jump Game III", "difficulty": "Medium"}, {"slug": "jump-game-vii", "title": "Jump Game VII", "difficulty": "Medium"}, {"slug": "jump-game-viii", "title": "Jump Game VIII", "difficulty": "Medium"}, {"slug": "minimum-number-of-visited-cells-in-a-grid", "title": "Minimum Number of Visited Cells in a Grid", "difficulty": "Hard"}, {"slug": "maximum-number-of-jumps-to-reach-the-last-index", "title": "Maximum Number of Jumps to Reach the Last Index", "difficulty": "Medium"}, {"slug": "visit-array-positions-to-maximize-score", "title": "Visit Array Positions to Maximize Score", "difficulty": "Medium"}]},
    {"number": 53, "slug": "maximum-subarray", "title": "Maximum Subarray", "difficulty": "Medium", "tags": ["Array", "Divide and Conquer", "Dynamic Programming"], "similar_problems": [{"slug": "best-time-to-buy-and-sell-stock", "title": "Best Time to Buy and Sell Stock", "difficulty": "Easy"}, {"slug": "maximum-product-subarray", "title": "Maximum Product Subarray", "difficulty": "Medium"}, {"slug": "degree-of-an-array", "title": "Degree of an Array", "difficulty": "Easy"}, {"slug": "longest-turbulent-subarray", "title": "Longest Turbulent Subarray", "difficulty": "Medium"}, {"slug": "maximum-score-of-spliced-array", "title": "Maximum Score Of Spliced Array", "difficulty": "Hard"}, {"slug": "maximum-absolute-sum-of-any-subarray", "title": "Maximum Absolute Sum of Any Subarray", "difficulty": "Medium"}, {"slug": "maximum-subarray-sum-after-one-operation", "title": "Maximum Subarray Sum After One Operation", "difficulty": "Medium"}, {"slug": "substring-with-largest-variance", "title": "Substring With Largest Variance", "difficulty": "Hard"}, {"slug": "count-subarrays-with-score-less-than-k", "title": "Count Subarrays With Score Less Than K", "difficulty": "Hard"}, {"slug": "maximum-value-of-a-string-in-an-array", "title": "Maximum Value of a String in an Array", "difficulty": "Easy"}, {"slug": "find-the-substring-with-maximum-cost", "title": "Find the Substring With Maximum Cost", "difficulty": "Medium"}, {"slug": "k-items-with-the-maximum-sum", "title": "K Items With the Maximum Sum", "difficulty": "Easy"}, {"slug": "maximum-good-subarray-sum", "title": "Maximum Good Subarray Sum", "difficulty": "Medium"}, {"slug": "maximize-subarray-sum-after-removing-all-occurrences-of-one-element", "title": "Maximize Subarray Sum After Removing All Occurrences of One Element", "difficulty": "Hard"}]},
    {"number": 55, "slug": "jump-game", "title": "Jump Game", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Greedy"], "similar_problems": [{"slug": "jump-game-ii", "title": "Jump Game II", "difficulty": "Medium"}, {"slug": "jump-game-iii", "title": "Jump Game III", "difficulty": "Medium"}, {"slug": "jump-game-vii", "title": "Jump Game VII", "difficulty": "Medium"}, {"slug": "jump-game-viii", "title": "Jump Game VIII", "difficulty": "Medium"}, {"slug": "minimum-number-of-visited-cells-in-a-grid", "title": "Minimum Number of Visited Cells in a Grid", "difficulty": "Hard"}, {"slug": "largest-element-in-an-array-after-merge-operations", "title": "Largest Element in an Array after Merge Operations", "difficulty": "Medium"}]},
    {"number": 62, "slug": "unique-paths", "title": "Unique Paths", "difficulty": "Medium", "tags": ["Math", "Dynamic Programming", "Combinatorics"], "similar_problems": [{"slug": "unique-paths-ii", "title": "Unique Paths II", "difficulty": "Medium"}, {"slug": "minimum-path-sum", "title": "Minimum Path Sum", "difficulty": "Medium"}, {"slug": "dungeon-game", "title": "Dungeon Game", "difficulty": "Hard"}, {"slug": "minimum-path-cost-in-a-grid", "title": "Minimum Path Cost in a Grid", "difficulty": "Medium"}, {"slug": "minimum-cost-homecoming-of-a-robot-in-a-grid", "title": "Minimum Cost Homecoming of a Robot in a Grid", "difficulty": "Medium"}, {"slug": "number-of-ways-to-reach-a-position-after-exactly-k-steps", "title": "Number of Ways to Reach a Position After Exactly k Steps", "difficulty": "Medium"}, {"slug": "paths-in-matrix-whose-sum-is-divisible-by-k", "title": "Paths in Matrix Whose Sum Is Divisible by K", "difficulty": "Hard"}]},
    {"number": 63, "slug": "unique-paths-ii", "title": "Unique Paths II", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Matrix"], "similar_problems": [{"slug": "unique-paths", "title": "Unique Paths", "difficulty": "Medium"}, {"slug": "unique-paths-iii", "title": "Unique Paths III", "difficulty": "Hard"}, {"slug": "minimum-path-cost-in-a-grid", "title": "Minimum Path Cost in a Grid", "difficulty": "Medium"}, {"slug": "paths-in-matrix-whose-sum-is-divisible-by-k", "title": "Paths in Matrix Whose Sum Is Divisible by K", "difficulty": "Hard"}]},
    {"number": 64, "slug": "minimum-path-sum", "title": "Minimum Path Sum", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Matrix"], "similar_problems": [{"slug": "unique-paths", "title": "Unique Paths", "difficulty": "Medium"}, {"slug": "dungeon-game", "title": "Dungeon Game", "difficulty": "Hard"}, {"slug": "cherry-pickup", "title": "Cherry Pickup", "difficulty": "Hard"}, {"slug": "minimum-path-cost-in-a-grid", "title": "Minimum Path Cost in a Grid", "difficulty": "Medium"}, {"slug": "maximum-number-of-points-with-cost", "title": "Maximum Number of Points with Cost", "difficulty": "Medium"}, {"slug": "minimum-cost-homecoming-of-a-robot-in-a-grid", "title": "Minimum Cost Homecoming of a Robot in a Grid", "difficulty": "Medium"}, {"slug": "paths-in-matrix-whose-sum-is-divisible-by-k", "title": "Paths in Matrix Whose Sum Is Divisible by K", "difficulty": "Hard"}, {"slug": "check-if-there-is-a-path-with-equal-number-of-0s-and-1s", "title": "Check if There is a Path With Equal Number of 0's And 1's", "difficulty": "Medium"}, {"slug": "minimum-cost-of-a-path-with-special-roads", "title": "Minimum Cost of a Path With Special Roads", "difficulty": "Medium"}]},
    {"number": 70, "slug": "climbing-stairs", "title": "Climbing Stairs", "difficulty": "Easy", "tags": ["Math", "Dynamic Programming", "Memoization"], "similar_problems": [{"slug": "min-cost-climbing-stairs", "title": "Min Cost Climbing Stairs", "difficulty": "Easy"}, {"slug": "fibonacci-number", "title": "Fibonacci Number", "difficulty": "Easy"}, {"slug": "n-th-tribonacci-number", "title": "N-th Tribonacci Number", "difficulty": "Easy"}, {"slug": "minimum-rounds-to-complete-all-tasks", "title": "Minimum Rounds to Complete All Tasks", "difficulty": "Medium"}, {"slug": "count-number-of-ways-to-place-houses", "title": "Count Number of Ways to Place Houses", "difficulty": "Medium"}, {"slug": "number-of-ways-to-reach-a-position-after-exactly-k-steps", "title": "Number of Ways to Reach a Position After Exactly k Steps", "difficulty": "Medium"}, {"slug": "count-ways-to-build-good-strings", "title": "Count Ways To Build Good Strings", "difficulty": "Medium"}, {"slug": "frog-jump-ii", "title": "Frog Jump II", "difficulty": "Medium"}, {"slug": "find-number-of-ways-to-reach-the-k-th-stair", "title": "Find Number of Ways to Reach the K-th Stair", "difficulty": "Hard"}, {"slug": "the-number-of-ways-to-make-the-sum", "title": "The Number of Ways to Make the Sum", "difficulty": "Medium"}]},
    {"number": 72, "slug": "edit-distance", "title": "Edit Distance", "difficulty": "Medium", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "one-edit-distance", "title": "One Edit Distance", "difficulty": "Medium"}, {"slug": "delete-operation-for-two-strings", "title": "Delete Operation for Two Strings", "difficulty": "Medium"}, {"slug": "minimum-ascii-delete-sum-for-two-strings", "title": "Minimum ASCII Delete Sum for Two Strings", "difficulty": "Medium"}, {"slug": "uncrossed-lines", "title": "Uncrossed Lines", "difficulty": "Medium"}, {"slug": "minimum-white-tiles-after-covering-with-carpets", "title": "Minimum White Tiles After Covering With Carpets", "difficulty": "Hard"}, {"slug": "longest-palindrome-after-substring-concatenation-ii", "title": "Longest Palindrome After Substring Concatenation II", "difficulty": "Hard"}, {"slug": "minimum-steps-to-convert-string-with-operations", "title": "Minimum Steps to Convert String with Operations", "difficulty": "Hard"}]},
    {"number": 85, "slug": "maximal-rectangle", "title": "Maximal Rectangle", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Stack", "Matrix", "Monotonic Stack"], "similar_problems": [{"slug": "largest-rectangle-in-histogram", "title": "Largest Rectangle in Histogram", "difficulty": "Hard"}, {"slug": "maximal-square", "title": "Maximal Square", "difficulty": "Medium"}, {"slug": "find-sorted-submatrices-with-maximum-element-at-most-k", "title": "Find Sorted Submatrices With Maximum Element at Most K", "difficulty": "Hard"}]},
    {"number": 87, "slug": "scramble-string", "title": "Scramble String", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": []},
    {"number": 91, "slug": "decode-ways", "title": "Decode Ways", "difficulty": "Medium", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "decode-ways-ii", "title": "Decode Ways II", "difficulty": "Hard"}, {"slug": "number-of-ways-to-separate-numbers", "title": "Number of Ways to Separate Numbers", "difficulty": "Hard"}, {"slug": "count-number-of-texts", "title": "Count Number of Texts", "difficulty": "Medium"}]},
    {"number": 95, "slug": "unique-binary-search-trees-ii", "title": "Unique Binary Search Trees II", "difficulty": "Medium", "tags": ["Dynamic Programming", "Backtracking", "Tree", "Binary Search Tree", "Binary Tree"], "similar_problems": [{"slug": "unique-binary-search-trees", "title": "Unique Binary Search Trees", "difficulty": "Medium"}, {"slug": "different-ways-to-add-parentheses", "title": "Different Ways to Add Parentheses", "difficulty": "Medium"}]},
    {"number": 96, "slug": "unique-binary-search-trees", "title": "Unique Binary Search Trees", "difficulty": "Medium", "tags": ["Math", "Dynamic Programming", "Tree", "Binary Search Tree", "Binary Tree"], "similar_problems": [{"slug": "unique-binary-search-trees-ii", "title": "Unique Binary Search Trees II", "difficulty": "Medium"}]},
    {"number": 97, "slug": "interleaving-string", "title": "Interleaving String", "difficulty": "Medium", "tags": ["String", "Dynamic Programming"], "similar_problems": []},
    {"number": 115, "slug": "distinct-subsequences", "title": "Distinct Subsequences", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "number-of-unique-good-subsequences", "title": "Number of Unique Good Subsequences", "difficulty": "Hard"}]},
    {"number": 118, "slug": "pascals-triangle", "title": "Pascal's Triangle", "difficulty": "Easy", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "pascals-triangle-ii", "title": "Pascal's Triangle II", "difficulty": "Easy"}, {"slug": "check-if-digits-are-equal-in-string-after-operations-ii", "title": "Check If Digits Are Equal in String After Operations II", "difficulty": "Hard"}]},
    {"number": 119, "slug": "pascals-triangle-ii", "title": "Pascal's Triangle II", "difficulty": "Easy", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "pascals-triangle", "title": "Pascal's Triangle", "difficulty": "Easy"}, {"slug": "find-triangular-sum-of-an-array", "title": "Find Triangular Sum of an Array", "difficulty": "Medium"}]},
    {"number": 120, "slug": "triangle", "title": "Triangle", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": []},
    {"number": 121, "slug": "best-time-to-buy-and-sell-stock", "title": "Best Time to Buy and Sell Stock", "difficulty": "Easy", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "maximum-subarray", "title": "Maximum Subarray", "difficulty": "Medium"}, {"slug": "best-time-to-buy-and-sell-stock-ii", "title": "Best Time to Buy and Sell Stock II", "difficulty": "Medium"}, {"slug": "best-time-to-buy-and-sell-stock-iii", "title": "Best Time to Buy and Sell Stock III", "difficulty": "Hard"}, {"slug": "best-time-to-buy-and-sell-stock-iv", "title": "Best Time to Buy and Sell Stock IV", "difficulty": "Hard"}, {"slug": "best-time-to-buy-and-sell-stock-with-cooldown", "title": "Best Time to Buy and Sell Stock with Cooldown", "difficulty": "Medium"}, {"slug": "sum-of-beauty-in-the-array", "title": "Sum of Beauty in the Array", "difficulty": "Medium"}, {"slug": "maximum-difference-between-increasing-elements", "title": "Maximum Difference Between Increasing Elements", "difficulty": "Easy"}, {"slug": "maximum-profit-from-trading-stocks", "title": "Maximum Profit From Trading Stocks", "difficulty": "Medium"}, {"slug": "best-time-to-buy-and-sell-stock-v", "title": "Best Time to Buy and Sell Stock V", "difficulty": "Medium"}]},
    {"number": 122, "slug": "best-time-to-buy-and-sell-stock-ii", "title": "Best Time to Buy and Sell Stock II", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Greedy"], "similar_problems": [{"slug": "best-time-to-buy-and-sell-stock", "title": "Best Time to Buy and Sell Stock", "difficulty": "Easy"}, {"slug": "best-time-to-buy-and-sell-stock-iii", "title": "Best Time to Buy and Sell Stock III", "difficulty": "Hard"}, {"slug": "best-time-to-buy-and-sell-stock-iv", "title": "Best Time to Buy and Sell Stock IV", "difficulty": "Hard"}, {"slug": "best-time-to-buy-and-sell-stock-with-cooldown", "title": "Best Time to Buy and Sell Stock with Cooldown", "difficulty": "Medium"}, {"slug": "best-time-to-buy-and-sell-stock-with-transaction-fee", "title": "Best Time to Buy and Sell Stock with Transaction Fee", "difficulty": "Medium"}, {"slug": "maximum-profit-from-trading-stocks", "title": "Maximum Profit From Trading Stocks", "difficulty": "Medium"}]},
    {"number": 123, "slug": "best-time-to-buy-and-sell-stock-iii", "title": "Best Time to Buy and Sell Stock III", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "best-time-to-buy-and-sell-stock", "title": "Best Time to Buy and Sell Stock", "difficulty": "Easy"}, {"slug": "best-time-to-buy-and-sell-stock-ii", "title": "Best Time to Buy and Sell Stock II", "difficulty": "Medium"}, {"slug": "best-time-to-buy-and-sell-stock-iv", "title": "Best Time to Buy and Sell Stock IV", "difficulty": "Hard"}, {"slug": "maximum-sum-of-3-non-overlapping-subarrays", "title": "Maximum Sum of 3 Non-Overlapping Subarrays", "difficulty": "Hard"}, {"slug": "maximum-profit-from-trading-stocks", "title": "Maximum Profit From Trading Stocks", "difficulty": "Medium"}, {"slug": "maximize-win-from-two-segments", "title": "Maximize Win From Two Segments", "difficulty": "Medium"}]},
    {"number": 124, "slug": "binary-tree-maximum-path-sum", "title": "Binary Tree Maximum Path Sum", "difficulty": "Hard", "tags": ["Dynamic Programming", "Tree", "Depth-First Search", "Binary Tree"], "similar_problems": [{"slug": "path-sum", "title": "Path Sum", "difficulty": "Easy"}, {"slug": "sum-root-to-leaf-numbers", "title": "Sum Root to Leaf Numbers", "difficulty": "Medium"}, {"slug": "path-sum-iv", "title": "Path Sum IV", "difficulty": "Medium"}, {"slug": "longest-univalue-path", "title": "Longest Univalue Path", "difficulty": "Medium"}, {"slug": "time-needed-to-inform-all-employees", "title": "Time Needed to Inform All Employees", "difficulty": "Medium"}, {"slug": "difference-between-maximum-and-minimum-price-sum", "title": "Difference Between Maximum and Minimum Price Sum", "difficulty": "Hard"}]},
    {"number": 131, "slug": "palindrome-partitioning", "title": "Palindrome Partitioning", "difficulty": "Medium", "tags": ["String", "Dynamic Programming", "Backtracking"], "similar_problems": [{"slug": "palindrome-partitioning-ii", "title": "Palindrome Partitioning II", "difficulty": "Hard"}, {"slug": "palindrome-partitioning-iv", "title": "Palindrome Partitioning IV", "difficulty": "Hard"}, {"slug": "maximum-number-of-non-overlapping-palindrome-substrings", "title": "Maximum Number of Non-overlapping Palindrome Substrings", "difficulty": "Hard"}]},
    {"number": 132, "slug": "palindrome-partitioning-ii", "title": "Palindrome Partitioning II", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "palindrome-partitioning", "title": "Palindrome Partitioning", "difficulty": "Medium"}, {"slug": "palindrome-partitioning-iv", "title": "Palindrome Partitioning IV", "difficulty": "Hard"}, {"slug": "maximum-number-of-non-overlapping-palindrome-substrings", "title": "Maximum Number of Non-overlapping Palindrome Substrings", "difficulty": "Hard"}, {"slug": "number-of-great-partitions", "title": "Number of Great Partitions", "difficulty": "Hard"}]},
    {"number": 139, "slug": "word-break", "title": "Word Break", "difficulty": "Medium", "tags": ["Array", "Hash Table", "String", "Dynamic Programming", "Trie", "Memoization"], "similar_problems": [{"slug": "word-break-ii", "title": "Word Break II", "difficulty": "Hard"}, {"slug": "extra-characters-in-a-string", "title": "Extra Characters in a String", "difficulty": "Medium"}]},
    {"number": 140, "slug": "word-break-ii", "title": "Word Break II", "difficulty": "Hard", "tags": ["Array", "Hash Table", "String", "Dynamic Programming", "Backtracking", "Trie", "Memoization"], "similar_problems": [{"slug": "word-break", "title": "Word Break", "difficulty": "Medium"}, {"slug": "concatenated-words", "title": "Concatenated Words", "difficulty": "Hard"}]},
    {"number": 152, "slug": "maximum-product-subarray", "title": "Maximum Product Subarray", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "maximum-subarray", "title": "Maximum Subarray", "difficulty": "Medium"}, {"slug": "house-robber", "title": "House Robber", "difficulty": "Medium"}, {"slug": "product-of-array-except-self", "title": "Product of Array Except Self", "difficulty": "Medium"}, {"slug": "maximum-product-of-three-numbers", "title": "Maximum Product of Three Numbers", "difficulty": "Easy"}, {"slug": "subarray-product-less-than-k", "title": "Subarray Product Less Than K", "difficulty": "Medium"}]},
    {"number": 174, "slug": "dungeon-game", "title": "Dungeon Game", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Matrix"], "similar_problems": [{"slug": "unique-paths", "title": "Unique Paths", "difficulty": "Medium"}, {"slug": "minimum-path-sum", "title": "Minimum Path Sum", "difficulty": "Medium"}, {"slug": "cherry-pickup", "title": "Cherry Pickup", "difficulty": "Hard"}, {"slug": "minimum-path-cost-in-a-grid", "title": "Minimum Path Cost in a Grid", "difficulty": "Medium"}, {"slug": "minimum-health-to-beat-game", "title": "Minimum Health to Beat Game", "difficulty": "Medium"}, {"slug": "paths-in-matrix-whose-sum-is-divisible-by-k", "title": "Paths in Matrix Whose Sum Is Divisible by K", "difficulty": "Hard"}, {"slug": "check-if-there-is-a-path-with-equal-number-of-0s-and-1s", "title": "Check if There is a Path With Equal Number of 0's And 1's", "difficulty": "Medium"}]},
    {"number": 188, "slug": "best-time-to-buy-and-sell-stock-iv", "title": "Best Time to Buy and Sell Stock IV", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "best-time-to-buy-and-sell-stock", "title": "Best Time to Buy and Sell Stock", "difficulty": "Easy"}, {"slug": "best-time-to-buy-and-sell-stock-ii", "title": "Best Time to Buy and Sell Stock II", "difficulty": "Medium"}, {"slug": "best-time-to-buy-and-sell-stock-iii", "title": "Best Time to Buy and Sell Stock III", "difficulty": "Hard"}, {"slug": "maximum-profit-from-trading-stocks", "title": "Maximum Profit From Trading Stocks", "difficulty": "Medium"}]},
    {"number": 198, "slug": "house-robber", "title": "House Robber", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "maximum-product-subarray", "title": "Maximum Product Subarray", "difficulty": "Medium"}, {"slug": "house-robber-ii", "title": "House Robber II", "difficulty": "Medium"}, {"slug": "paint-house", "title": "Paint House", "difficulty": "Medium"}, {"slug": "paint-fence", "title": "Paint Fence", "difficulty": "Medium"}, {"slug": "house-robber-iii", "title": "House Robber III", "difficulty": "Medium"}, {"slug": "non-negative-integers-without-consecutive-ones", "title": "Non-negative Integers without Consecutive Ones", "difficulty": "Hard"}, {"slug": "coin-path", "title": "Coin Path", "difficulty": "Hard"}, {"slug": "delete-and-earn", "title": "Delete and Earn", "difficulty": "Medium"}, {"slug": "solving-questions-with-brainpower", "title": "Solving Questions With Brainpower", "difficulty": "Medium"}, {"slug": "count-number-of-ways-to-place-houses", "title": "Count Number of Ways to Place Houses", "difficulty": "Medium"}, {"slug": "house-robber-iv", "title": "House Robber IV", "difficulty": "Medium"}, {"slug": "mice-and-cheese", "title": "Mice and Cheese", "difficulty": "Medium"}, {"slug": "largest-element-in-an-array-after-merge-operations", "title": "Largest Element in an Array after Merge Operations", "difficulty": "Medium"}]},
    {"number": 213, "slug": "house-robber-ii", "title": "House Robber II", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "house-robber", "title": "House Robber", "difficulty": "Medium"}, {"slug": "paint-house", "title": "Paint House", "difficulty": "Medium"}, {"slug": "paint-fence", "title": "Paint Fence", "difficulty": "Medium"}, {"slug": "house-robber-iii", "title": "House Robber III", "difficulty": "Medium"}, {"slug": "non-negative-integers-without-consecutive-ones", "title": "Non-negative Integers without Consecutive Ones", "difficulty": "Hard"}, {"slug": "coin-path", "title": "Coin Path", "difficulty": "Hard"}]},
    {"number": 221, "slug": "maximal-square", "title": "Maximal Square", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Matrix"], "similar_problems": [{"slug": "maximal-rectangle", "title": "Maximal Rectangle", "difficulty": "Hard"}, {"slug": "largest-plus-sign", "title": "Largest Plus Sign", "difficulty": "Medium"}, {"slug": "count-artifacts-that-can-be-extracted", "title": "Count Artifacts That Can Be Extracted", "difficulty": "Medium"}, {"slug": "stamping-the-grid", "title": "Stamping the Grid", "difficulty": "Hard"}, {"slug": "maximize-area-of-square-hole-in-grid", "title": "Maximize Area of Square Hole in Grid", "difficulty": "Medium"}]},
    {"number": 233, "slug": "number-of-digit-one", "title": "Number of Digit One", "difficulty": "Hard", "tags": ["Math", "Dynamic Programming", "Recursion"], "similar_problems": [{"slug": "factorial-trailing-zeroes", "title": "Factorial Trailing Zeroes", "difficulty": "Medium"}, {"slug": "digit-count-in-range", "title": "Digit Count in Range", "difficulty": "Hard"}]},
    {"number": 241, "slug": "different-ways-to-add-parentheses", "title": "Different Ways to Add Parentheses", "difficulty": "Medium", "tags": ["Math", "String", "Dynamic Programming", "Recursion", "Memoization"], "similar_problems": [{"slug": "unique-binary-search-trees-ii", "title": "Unique Binary Search Trees II", "difficulty": "Medium"}, {"slug": "basic-calculator", "title": "Basic Calculator", "difficulty": "Hard"}, {"slug": "expression-add-operators", "title": "Expression Add Operators", "difficulty": "Hard"}, {"slug": "the-score-of-students-solving-math-expression", "title": "The Score of Students Solving Math Expression", "difficulty": "Hard"}, {"slug": "minimize-result-by-adding-parentheses-to-expression", "title": "Minimize Result by Adding Parentheses to Expression", "difficulty": "Medium"}]},
    {"number": 256, "slug": "paint-house", "title": "Paint House", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "house-robber", "title": "House Robber", "difficulty": "Medium"}, {"slug": "house-robber-ii", "title": "House Robber II", "difficulty": "Medium"}, {"slug": "paint-house-ii", "title": "Paint House II", "difficulty": "Hard"}, {"slug": "paint-fence", "title": "Paint Fence", "difficulty": "Medium"}, {"slug": "minimum-path-cost-in-a-grid", "title": "Minimum Path Cost in a Grid", "difficulty": "Medium"}]},
    {"number": 264, "slug": "ugly-number-ii", "title": "Ugly Number II", "difficulty": "Medium", "tags": ["Hash Table", "Math", "Dynamic Programming", "Heap (Priority Queue)"], "similar_problems": [{"slug": "merge-k-sorted-lists", "title": "Merge k Sorted Lists", "difficulty": "Hard"}, {"slug": "count-primes", "title": "Count Primes", "difficulty": "Medium"}, {"slug": "ugly-number", "title": "Ugly Number", "difficulty": "Easy"}, {"slug": "perfect-squares", "title": "Perfect Squares", "difficulty": "Medium"}, {"slug": "super-ugly-number", "title": "Super Ugly Number", "difficulty": "Medium"}, {"slug": "ugly-number-iii", "title": "Ugly Number III", "difficulty": "Medium"}]},
    {"number": 265, "slug": "paint-house-ii", "title": "Paint House II", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "product-of-array-except-self", "title": "Product of Array Except Self", "difficulty": "Medium"}, {"slug": "sliding-window-maximum", "title": "Sliding Window Maximum", "difficulty": "Hard"}, {"slug": "paint-house", "title": "Paint House", "difficulty": "Medium"}, {"slug": "paint-fence", "title": "Paint Fence", "difficulty": "Medium"}]},
    {"number": 276, "slug": "paint-fence", "title": "Paint Fence", "difficulty": "Medium", "tags": ["Dynamic Programming"], "similar_problems": [{"slug": "house-robber", "title": "House Robber", "difficulty": "Medium"}, {"slug": "house-robber-ii", "title": "House Robber II", "difficulty": "Medium"}, {"slug": "paint-house", "title": "Paint House", "difficulty": "Medium"}, {"slug": "paint-house-ii", "title": "Paint House II", "difficulty": "Hard"}]},
    {"number": 279, "slug": "perfect-squares", "title": "Perfect Squares", "difficulty": "Medium", "tags": ["Math", "Dynamic Programming", "Breadth-First Search"], "similar_problems": [{"slug": "count-primes", "title": "Count Primes", "difficulty": "Medium"}, {"slug": "ugly-number-ii", "title": "Ugly Number II", "difficulty": "Medium"}, {"slug": "ways-to-express-an-integer-as-sum-of-powers", "title": "Ways to Express an Integer as Sum of Powers", "difficulty": "Medium"}]},
    {"number": 294, "slug": "flip-game-ii", "title": "Flip Game II", "difficulty": "Medium", "tags": ["Math", "Dynamic Programming", "Backtracking", "Memoization", "Game Theory"], "similar_problems": [{"slug": "nim-game", "title": "Nim Game", "difficulty": "Easy"}, {"slug": "flip-game", "title": "Flip Game", "difficulty": "Easy"}, {"slug": "guess-number-higher-or-lower-ii", "title": "Guess Number Higher or Lower II", "difficulty": "Medium"}, {"slug": "can-i-win", "title": "Can I Win", "difficulty": "Medium"}]},
    {"number": 300, "slug": "longest-increasing-subsequence", "title": "Longest Increasing Subsequence", "difficulty": "Medium", "tags": ["Array", "Binary Search", "Dynamic Programming"], "similar_problems": [{"slug": "increasing-triplet-subsequence", "title": "Increasing Triplet Subsequence", "difficulty": "Medium"}, {"slug": "russian-doll-envelopes", "title": "Russian Doll Envelopes", "difficulty": "Hard"}, {"slug": "maximum-length-of-pair-chain", "title": "Maximum Length of Pair Chain", "difficulty": "Medium"}, {"slug": "number-of-longest-increasing-subsequence", "title": "Number of Longest Increasing Subsequence", "difficulty": "Medium"}, {"slug": "minimum-ascii-delete-sum-for-two-strings", "title": "Minimum ASCII Delete Sum for Two Strings", "difficulty": "Medium"}, {"slug": "minimum-number-of-removals-to-make-mountain-array", "title": "Minimum Number of Removals to Make Mountain Array", "difficulty": "Hard"}, {"slug": "find-the-longest-valid-obstacle-course-at-each-position", "title": "Find the Longest Valid Obstacle Course at Each Position", "difficulty": "Hard"}, {"slug": "minimum-operations-to-make-the-array-k-increasing", "title": "Minimum Operations to Make the Array K-Increasing", "difficulty": "Hard"}, {"slug": "longest-ideal-subsequence", "title": "Longest Ideal Subsequence", "difficulty": "Medium"}, {"slug": "maximum-number-of-books-you-can-take", "title": "Maximum Number of Books You Can Take", "difficulty": "Hard"}, {"slug": "longest-increasing-subsequence-ii", "title": "Longest Increasing Subsequence II", "difficulty": "Hard"}, {"slug": "find-the-maximum-length-of-a-good-subsequence-ii", "title": "Find the Maximum Length of a Good Subsequence II", "difficulty": "Hard"}, {"slug": "find-the-maximum-length-of-a-good-subsequence-i", "title": "Find the Maximum Length of a Good Subsequence I", "difficulty": "Medium"}, {"slug": "find-the-maximum-length-of-valid-subsequence-i", "title": "Find the Maximum Length of Valid Subsequence I", "difficulty": "Medium"}, {"slug": "find-the-maximum-length-of-valid-subsequence-ii", "title": "Find the Maximum Length of Valid Subsequence II", "difficulty": "Medium"}, {"slug": "longest-subsequence-with-decreasing-adjacent-difference", "title": "Longest Subsequence With Decreasing Adjacent Difference", "difficulty": "Medium"}]},
    {"number": 309, "slug": "best-time-to-buy-and-sell-stock-with-cooldown", "title": "Best Time to Buy and Sell Stock with Cooldown", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "best-time-to-buy-and-sell-stock", "title": "Best Time to Buy and Sell Stock", "difficulty": "Easy"}, {"slug": "best-time-to-buy-and-sell-stock-ii", "title": "Best Time to Buy and Sell Stock II", "difficulty": "Medium"}]},
    {"number": 312, "slug": "burst-balloons", "title": "Burst Balloons", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "minimum-cost-to-merge-stones", "title": "Minimum Cost to Merge Stones", "difficulty": "Hard"}]},
    {"number": 313, "slug": "super-ugly-number", "title": "Super Ugly Number", "difficulty": "Medium", "tags": ["Array", "Math", "Dynamic Programming"], "similar_problems": [{"slug": "ugly-number-ii", "title": "Ugly Number II", "difficulty": "Medium"}]},
    {"number": 322, "slug": "coin-change", "title": "Coin Change", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Breadth-First Search"], "similar_problems": [{"slug": "minimum-cost-for-tickets", "title": "Minimum Cost For Tickets", "difficulty": "Medium"}, {"slug": "maximum-value-of-k-coins-from-piles", "title": "Maximum Value of K Coins From Piles", "difficulty": "Hard"}, {"slug": "minimum-number-of-operations-to-convert-time", "title": "Minimum Number of Operations to Convert Time", "difficulty": "Easy"}, {"slug": "minimum-cost-to-split-an-array", "title": "Minimum Cost to Split an Array", "difficulty": "Hard"}, {"slug": "count-of-sub-multisets-with-bounded-sum", "title": "Count of Sub-Multisets With Bounded Sum", "difficulty": "Hard"}, {"slug": "length-of-the-longest-subsequence-that-sums-to-target", "title": "Length of the Longest Subsequence That Sums to Target", "difficulty": "Medium"}, {"slug": "minimum-number-of-coins-to-be-added", "title": "Minimum Number of Coins to be Added", "difficulty": "Medium"}, {"slug": "most-expensive-item-that-can-not-be-bought", "title": "Most Expensive Item That Can Not Be Bought", "difficulty": "Medium"}, {"slug": "inverse-coin-change", "title": "Inverse Coin Change", "difficulty": "Medium"}]},
    {"number": 329, "slug": "longest-increasing-path-in-a-matrix", "title": "Longest Increasing Path in a Matrix", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Depth-First Search", "Breadth-First Search", "Graph", "Topological Sort", "Memoization", "Matrix"], "similar_problems": [{"slug": "number-of-increasing-paths-in-a-grid", "title": "Number of Increasing Paths in a Grid", "difficulty": "Hard"}]},
    {"number": 333, "slug": "largest-bst-subtree", "title": "Largest BST Subtree", "difficulty": "Medium", "tags": ["Dynamic Programming", "Tree", "Depth-First Search", "Binary Search Tree", "Binary Tree"], "similar_problems": []},
    {"number": 337, "slug": "house-robber-iii", "title": "House Robber III", "difficulty": "Medium", "tags": ["Dynamic Programming", "Tree", "Depth-First Search", "Binary Tree"], "similar_problems": [{"slug": "house-robber", "title": "House Robber", "difficulty": "Medium"}, {"slug": "house-robber-ii", "title": "House Robber II", "difficulty": "Medium"}]},
    {"number": 338, "slug": "counting-bits", "title": "Counting Bits", "difficulty": "Easy", "tags": ["Dynamic Programming", "Bit Manipulation"], "similar_problems": [{"slug": "number-of-1-bits", "title": "Number of 1 Bits", "difficulty": "Easy"}, {"slug": "sum-of-values-at-indices-with-k-set-bits", "title": "Sum of Values at Indices With K Set Bits", "difficulty": "Easy"}, {"slug": "find-the-k-or-of-an-array", "title": "Find the K-or of an Array", "difficulty": "Easy"}]},
    {"number": 343, "slug": "integer-break", "title": "Integer Break", "difficulty": "Medium", "tags": ["Math", "Dynamic Programming"], "similar_problems": [{"slug": "maximize-number-of-nice-divisors", "title": "Maximize Number of Nice Divisors", "difficulty": "Hard"}]},
    {"number": 351, "slug": "android-unlock-patterns", "title": "Android Unlock Patterns", "difficulty": "Medium", "tags": ["Dynamic Programming", "Backtracking", "Bit Manipulation", "Bitmask"], "similar_problems": []},
    {"number": 354, "slug": "russian-doll-envelopes", "title": "Russian Doll Envelopes", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Dynamic Programming", "Sorting"], "similar_problems": [{"slug": "longest-increasing-subsequence", "title": "Longest Increasing Subsequence", "difficulty": "Medium"}, {"slug": "the-number-of-weak-characters-in-the-game", "title": "The Number of Weak Characters in the Game", "difficulty": "Medium"}, {"slug": "longest-non-decreasing-subarray-from-two-arrays", "title": "Longest Non-decreasing Subarray From Two Arrays", "difficulty": "Medium"}]},
    {"number": 357, "slug": "count-numbers-with-unique-digits", "title": "Count Numbers with Unique Digits", "difficulty": "Medium", "tags": ["Math", "Dynamic Programming", "Backtracking"], "similar_problems": [{"slug": "count-special-integers", "title": "Count Special Integers", "difficulty": "Hard"}, {"slug": "count-numbers-with-unique-digits-ii", "title": "Count Numbers With Unique Digits II", "difficulty": "Easy"}]},
    {"number": 361, "slug": "bomb-enemy", "title": "Bomb Enemy", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Matrix"], "similar_problems": [{"slug": "minimum-cost-homecoming-of-a-robot-in-a-grid", "title": "Minimum Cost Homecoming of a Robot in a Grid", "difficulty": "Medium"}, {"slug": "stamping-the-grid", "title": "Stamping the Grid", "difficulty": "Hard"}, {"slug": "count-unguarded-cells-in-the-grid", "title": "Count Unguarded Cells in the Grid", "difficulty": "Medium"}, {"slug": "maximum-trailing-zeros-in-a-cornered-path", "title": "Maximum Trailing Zeros in a Cornered Path", "difficulty": "Medium"}]},
    {"number": 368, "slug": "largest-divisible-subset", "title": "Largest Divisible Subset", "difficulty": "Medium", "tags": ["Array", "Math", "Dynamic Programming", "Sorting"], "similar_problems": []},
    {"number": 375, "slug": "guess-number-higher-or-lower-ii", "title": "Guess Number Higher or Lower II", "difficulty": "Medium", "tags": ["Math", "Dynamic Programming", "Game Theory"], "similar_problems": [{"slug": "flip-game-ii", "title": "Flip Game II", "difficulty": "Medium"}, {"slug": "guess-number-higher-or-lower", "title": "Guess Number Higher or Lower", "difficulty": "Easy"}, {"slug": "can-i-win", "title": "Can I Win", "difficulty": "Medium"}, {"slug": "find-k-closest-elements", "title": "Find K Closest Elements", "difficulty": "Medium"}]},
    {"number": 376, "slug": "wiggle-subsequence", "title": "Wiggle Subsequence", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Greedy"], "similar_problems": [{"slug": "rearrange-array-elements-by-sign", "title": "Rearrange Array Elements by Sign", "difficulty": "Medium"}]},
    {"number": 377, "slug": "combination-sum-iv", "title": "Combination Sum IV", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "combination-sum", "title": "Combination Sum", "difficulty": "Medium"}, {"slug": "ways-to-express-an-integer-as-sum-of-powers", "title": "Ways to Express an Integer as Sum of Powers", "difficulty": "Medium"}]},
    {"number": 392, "slug": "is-subsequence", "title": "Is Subsequence", "difficulty": "Easy", "tags": ["Two Pointers", "String", "Dynamic Programming"], "similar_problems": [{"slug": "number-of-matching-subsequences", "title": "Number of Matching Subsequences", "difficulty": "Medium"}, {"slug": "shortest-way-to-form-string", "title": "Shortest Way to Form String", "difficulty": "Medium"}, {"slug": "append-characters-to-string-to-make-subsequence", "title": "Append Characters to String to Make Subsequence", "difficulty": "Medium"}, {"slug": "make-string-a-subsequence-using-cyclic-increments", "title": "Make String a Subsequence Using Cyclic Increments", "difficulty": "Medium"}]},
    {"number": 396, "slug": "rotate-function", "title": "Rotate Function", "difficulty": "Medium", "tags": ["Array", "Math", "Dynamic Programming"], "similar_problems": []},
    {"number": 397, "slug": "integer-replacement", "title": "Integer Replacement", "difficulty": "Medium", "tags": ["Dynamic Programming", "Greedy", "Bit Manipulation", "Memoization"], "similar_problems": []},
    {"number": 403, "slug": "frog-jump", "title": "Frog Jump", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "minimum-sideway-jumps", "title": "Minimum Sideway Jumps", "difficulty": "Medium"}, {"slug": "solving-questions-with-brainpower", "title": "Solving Questions With Brainpower", "difficulty": "Medium"}, {"slug": "maximum-number-of-jumps-to-reach-the-last-index", "title": "Maximum Number of Jumps to Reach the Last Index", "difficulty": "Medium"}]},
    {"number": 410, "slug": "split-array-largest-sum", "title": "Split Array Largest Sum", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Dynamic Programming", "Greedy", "Prefix Sum"], "similar_problems": [{"slug": "capacity-to-ship-packages-within-d-days", "title": "Capacity To Ship Packages Within D Days", "difficulty": "Medium"}, {"slug": "divide-chocolate", "title": "Divide Chocolate", "difficulty": "Hard"}, {"slug": "fair-distribution-of-cookies", "title": "Fair Distribution of Cookies", "difficulty": "Medium"}, {"slug": "subsequence-of-size-k-with-the-largest-even-sum", "title": "Subsequence of Size K With the Largest Even Sum", "difficulty": "Medium"}, {"slug": "maximum-total-beauty-of-the-gardens", "title": "Maximum Total Beauty of the Gardens", "difficulty": "Hard"}, {"slug": "number-of-ways-to-split-array", "title": "Number of Ways to Split Array", "difficulty": "Medium"}, {"slug": "minimum-cost-to-split-an-array", "title": "Minimum Cost to Split an Array", "difficulty": "Hard"}, {"slug": "distribute-elements-into-two-arrays-i", "title": "Distribute Elements Into Two Arrays I", "difficulty": "Easy"}, {"slug": "distribute-elements-into-two-arrays-ii", "title": "Distribute Elements Into Two Arrays II", "difficulty": "Hard"}]},
    {"number": 413, "slug": "arithmetic-slices", "title": "Arithmetic Slices", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Sliding Window"], "similar_problems": [{"slug": "arithmetic-slices-ii-subsequence", "title": "Arithmetic Slices II - Subsequence", "difficulty": "Hard"}, {"slug": "arithmetic-subarrays", "title": "Arithmetic Subarrays", "difficulty": "Medium"}, {"slug": "number-of-zero-filled-subarrays", "title": "Number of Zero-Filled Subarrays", "difficulty": "Medium"}, {"slug": "length-of-the-longest-alphabetical-continuous-substring", "title": "Length of the Longest Alphabetical Continuous Substring", "difficulty": "Medium"}]},
    {"number": 416, "slug": "partition-equal-subset-sum", "title": "Partition Equal Subset Sum", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "partition-to-k-equal-sum-subsets", "title": "Partition to K Equal Sum Subsets", "difficulty": "Medium"}, {"slug": "minimize-the-difference-between-target-and-chosen-elements", "title": "Minimize the Difference Between Target and Chosen Elements", "difficulty": "Medium"}, {"slug": "maximum-number-of-ways-to-partition-an-array", "title": "Maximum Number of Ways to Partition an Array", "difficulty": "Hard"}, {"slug": "partition-array-into-two-arrays-to-minimize-sum-difference", "title": "Partition Array Into Two Arrays to Minimize Sum Difference", "difficulty": "Hard"}, {"slug": "find-subarrays-with-equal-sum", "title": "Find Subarrays With Equal Sum", "difficulty": "Easy"}, {"slug": "number-of-great-partitions", "title": "Number of Great Partitions", "difficulty": "Hard"}, {"slug": "split-with-minimum-sum", "title": "Split With Minimum Sum", "difficulty": "Easy"}]},
    {"number": 418, "slug": "sentence-screen-fitting", "title": "Sentence Screen Fitting", "difficulty": "Medium", "tags": ["Array", "String", "Dynamic Programming"], "similar_problems": [{"slug": "minimum-cost-to-separate-sentence-into-rows", "title": "Minimum Cost to Separate Sentence Into Rows", "difficulty": "Medium"}, {"slug": "split-message-based-on-limit", "title": "Split Message Based on Limit", "difficulty": "Hard"}]},
    {"number": 435, "slug": "non-overlapping-intervals", "title": "Non-overlapping Intervals", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Greedy", "Sorting"], "similar_problems": [{"slug": "minimum-number-of-arrows-to-burst-balloons", "title": "Minimum Number of Arrows to Burst Balloons", "difficulty": "Medium"}, {"slug": "determine-if-two-events-have-conflict", "title": "Determine if Two Events Have Conflict", "difficulty": "Easy"}]},
    {"number": 446, "slug": "arithmetic-slices-ii-subsequence", "title": "Arithmetic Slices II - Subsequence", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "arithmetic-slices", "title": "Arithmetic Slices", "difficulty": "Medium"}, {"slug": "destroy-sequential-targets", "title": "Destroy Sequential Targets", "difficulty": "Medium"}, {"slug": "count-palindromic-subsequences", "title": "Count Palindromic Subsequences", "difficulty": "Hard"}]},
    {"number": 458, "slug": "poor-pigs", "title": "Poor Pigs", "difficulty": "Hard", "tags": ["Math", "Dynamic Programming", "Combinatorics"], "similar_problems": []},
    {"number": 464, "slug": "can-i-win", "title": "Can I Win", "difficulty": "Medium", "tags": ["Math", "Dynamic Programming", "Bit Manipulation", "Memoization", "Game Theory", "Bitmask"], "similar_problems": [{"slug": "flip-game-ii", "title": "Flip Game II", "difficulty": "Medium"}, {"slug": "guess-number-higher-or-lower-ii", "title": "Guess Number Higher or Lower II", "difficulty": "Medium"}, {"slug": "predict-the-winner", "title": "Predict the Winner", "difficulty": "Medium"}, {"slug": "find-the-winning-player-in-coin-game", "title": "Find the Winning Player in Coin Game", "difficulty": "Easy"}, {"slug": "find-the-number-of-winning-players", "title": "Find the Number of Winning Players", "difficulty": "Easy"}]},
    {"number": 465, "slug": "optimal-account-balancing", "title": "Optimal Account Balancing", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Backtracking", "Bit Manipulation", "Bitmask"], "similar_problems": []},
    {"number": 466, "slug": "count-the-repetitions", "title": "Count The Repetitions", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": []},
    {"number": 467, "slug": "unique-substrings-in-wraparound-string", "title": "Unique Substrings in Wraparound String", "difficulty": "Medium", "tags": ["String", "Dynamic Programming"], "similar_problems": []},
    {"number": 471, "slug": "encode-string-with-shortest-length", "title": "Encode String with Shortest Length", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "decode-string", "title": "Decode String", "difficulty": "Medium"}, {"slug": "number-of-atoms", "title": "Number of Atoms", "difficulty": "Hard"}]},
    {"number": 472, "slug": "concatenated-words", "title": "Concatenated Words", "difficulty": "Hard", "tags": ["Array", "String", "Dynamic Programming", "Depth-First Search", "Trie", "Sorting"], "similar_problems": [{"slug": "word-break-ii", "title": "Word Break II", "difficulty": "Hard"}]},
    {"number": 473, "slug": "matchsticks-to-square", "title": "Matchsticks to Square", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Backtracking", "Bit Manipulation", "Bitmask"], "similar_problems": [{"slug": "maximum-rows-covered-by-columns", "title": "Maximum Rows Covered by Columns", "difficulty": "Medium"}]},
    {"number": 474, "slug": "ones-and-zeroes", "title": "Ones and Zeroes", "difficulty": "Medium", "tags": ["Array", "String", "Dynamic Programming"], "similar_problems": [{"slug": "count-subarrays-with-more-ones-than-zeros", "title": "Count Subarrays With More Ones Than Zeros", "difficulty": "Medium"}, {"slug": "non-negative-integers-without-consecutive-ones", "title": "Non-negative Integers without Consecutive Ones", "difficulty": "Hard"}, {"slug": "all-divisions-with-the-highest-score-of-a-binary-array", "title": "All Divisions With the Highest Score of a Binary Array", "difficulty": "Medium"}]},
    {"number": 486, "slug": "predict-the-winner", "title": "Predict the Winner", "difficulty": "Medium", "tags": ["Array", "Math", "Dynamic Programming", "Recursion", "Game Theory"], "similar_problems": [{"slug": "can-i-win", "title": "Can I Win", "difficulty": "Medium"}, {"slug": "find-the-winning-player-in-coin-game", "title": "Find the Winning Player in Coin Game", "difficulty": "Easy"}, {"slug": "find-the-number-of-winning-players", "title": "Find the Number of Winning Players", "difficulty": "Easy"}, {"slug": "count-the-number-of-winning-sequences", "title": "Count The Number of Winning Sequences", "difficulty": "Hard"}]},
    {"number": 487, "slug": "max-consecutive-ones-ii", "title": "Max Consecutive Ones II", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Sliding Window"], "similar_problems": [{"slug": "max-consecutive-ones", "title": "Max Consecutive Ones", "difficulty": "Easy"}, {"slug": "max-consecutive-ones-iii", "title": "Max Consecutive Ones III", "difficulty": "Medium"}, {"slug": "all-divisions-with-the-highest-score-of-a-binary-array", "title": "All Divisions With the Highest Score of a Binary Array", "difficulty": "Medium"}]},
    {"number": 488, "slug": "zuma-game", "title": "Zuma Game", "difficulty": "Hard", "tags": ["String", "Dynamic Programming", "Stack", "Breadth-First Search", "Memoization"], "similar_problems": []},
    {"number": 494, "slug": "target-sum", "title": "Target Sum", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Backtracking"], "similar_problems": [{"slug": "expression-add-operators", "title": "Expression Add Operators", "difficulty": "Hard"}, {"slug": "ways-to-express-an-integer-as-sum-of-powers", "title": "Ways to Express an Integer as Sum of Powers", "difficulty": "Medium"}]},
    {"number": 509, "slug": "fibonacci-number", "title": "Fibonacci Number", "difficulty": "Easy", "tags": ["Math", "Dynamic Programming", "Recursion", "Memoization"], "similar_problems": [{"slug": "climbing-stairs", "title": "Climbing Stairs", "difficulty": "Easy"}, {"slug": "split-array-into-fibonacci-sequence", "title": "Split Array into Fibonacci Sequence", "difficulty": "Medium"}, {"slug": "length-of-longest-fibonacci-subsequence", "title": "Length of Longest Fibonacci Subsequence", "difficulty": "Medium"}, {"slug": "n-th-tribonacci-number", "title": "N-th Tribonacci Number", "difficulty": "Easy"}]},
    {"number": 514, "slug": "freedom-trail", "title": "Freedom Trail", "difficulty": "Hard", "tags": ["String", "Dynamic Programming", "Depth-First Search", "Breadth-First Search"], "similar_problems": []},
    {"number": 516, "slug": "longest-palindromic-subsequence", "title": "Longest Palindromic Subsequence", "difficulty": "Medium", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "longest-palindromic-substring", "title": "Longest Palindromic Substring", "difficulty": "Medium"}, {"slug": "palindromic-substrings", "title": "Palindromic Substrings", "difficulty": "Medium"}, {"slug": "count-different-palindromic-subsequences", "title": "Count Different Palindromic Subsequences", "difficulty": "Hard"}, {"slug": "longest-common-subsequence", "title": "Longest Common Subsequence", "difficulty": "Medium"}, {"slug": "longest-palindromic-subsequence-ii", "title": "Longest Palindromic Subsequence II", "difficulty": "Medium"}, {"slug": "maximize-palindrome-length-from-subsequences", "title": "Maximize Palindrome Length From Subsequences", "difficulty": "Hard"}, {"slug": "maximum-product-of-the-length-of-two-palindromic-subsequences", "title": "Maximum Product of the Length of Two Palindromic Subsequences", "difficulty": "Medium"}]},
    {"number": 518, "slug": "coin-change-ii", "title": "Coin Change II", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "maximum-value-of-k-coins-from-piles", "title": "Maximum Value of K Coins From Piles", "difficulty": "Hard"}, {"slug": "number-of-ways-to-earn-points", "title": "Number of Ways to Earn Points", "difficulty": "Hard"}, {"slug": "count-of-sub-multisets-with-bounded-sum", "title": "Count of Sub-Multisets With Bounded Sum", "difficulty": "Hard"}, {"slug": "length-of-the-longest-subsequence-that-sums-to-target", "title": "Length of the Longest Subsequence That Sums to Target", "difficulty": "Medium"}, {"slug": "the-number-of-ways-to-make-the-sum", "title": "The Number of Ways to Make the Sum", "difficulty": "Medium"}, {"slug": "inverse-coin-change", "title": "Inverse Coin Change", "difficulty": "Medium"}]},
    {"number": 526, "slug": "beautiful-arrangement", "title": "Beautiful Arrangement", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Backtracking", "Bit Manipulation", "Bitmask"], "similar_problems": [{"slug": "beautiful-arrangement-ii", "title": "Beautiful Arrangement II", "difficulty": "Medium"}]},
    {"number": 542, "slug": "01-matrix", "title": "01 Matrix", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Breadth-First Search", "Matrix"], "similar_problems": [{"slug": "shortest-path-to-get-food", "title": "Shortest Path to Get Food", "difficulty": "Medium"}, {"slug": "minimum-operations-to-remove-adjacent-ones-in-matrix", "title": "Minimum Operations to Remove Adjacent Ones in Matrix", "difficulty": "Hard"}, {"slug": "difference-between-ones-and-zeros-in-row-and-column", "title": "Difference Between Ones and Zeros in Row and Column", "difficulty": "Medium"}]},
    {"number": 546, "slug": "remove-boxes", "title": "Remove Boxes", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Memoization"], "similar_problems": [{"slug": "strange-printer", "title": "Strange Printer", "difficulty": "Hard"}, {"slug": "number-of-unique-flavors-after-sharing-k-candies", "title": "Number of Unique Flavors After Sharing K Candies", "difficulty": "Medium"}]},
    {"number": 552, "slug": "student-attendance-record-ii", "title": "Student Attendance Record II", "difficulty": "Hard", "tags": ["Dynamic Programming"], "similar_problems": [{"slug": "student-attendance-record-i", "title": "Student Attendance Record I", "difficulty": "Easy"}]},
    {"number": 553, "slug": "optimal-division", "title": "Optimal Division", "difficulty": "Medium", "tags": ["Array", "Math", "Dynamic Programming"], "similar_problems": []},
    {"number": 562, "slug": "longest-line-of-consecutive-one-in-matrix", "title": "Longest Line of Consecutive One in Matrix", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Matrix"], "similar_problems": []},
    {"number": 568, "slug": "maximum-vacation-days", "title": "Maximum Vacation Days", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Matrix"], "similar_problems": [{"slug": "cheapest-flights-within-k-stops", "title": "Cheapest Flights Within K Stops", "difficulty": "Medium"}]},
    {"number": 576, "slug": "out-of-boundary-paths", "title": "Out of Boundary Paths", "difficulty": "Medium", "tags": ["Dynamic Programming"], "similar_problems": [{"slug": "knight-probability-in-chessboard", "title": "Knight Probability in Chessboard", "difficulty": "Medium"}, {"slug": "execution-of-all-suffix-instructions-staying-in-a-grid", "title": "Execution of All Suffix Instructions Staying in a Grid", "difficulty": "Medium"}]},
    {"number": 583, "slug": "delete-operation-for-two-strings", "title": "Delete Operation for Two Strings", "difficulty": "Medium", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "edit-distance", "title": "Edit Distance", "difficulty": "Medium"}, {"slug": "minimum-ascii-delete-sum-for-two-strings", "title": "Minimum ASCII Delete Sum for Two Strings", "difficulty": "Medium"}, {"slug": "longest-common-subsequence", "title": "Longest Common Subsequence", "difficulty": "Medium"}, {"slug": "make-three-strings-equal", "title": "Make Three Strings Equal", "difficulty": "Easy"}]},
    {"number": 600, "slug": "non-negative-integers-without-consecutive-ones", "title": "Non-negative Integers without Consecutive Ones", "difficulty": "Hard", "tags": ["Dynamic Programming"], "similar_problems": [{"slug": "house-robber", "title": "House Robber", "difficulty": "Medium"}, {"slug": "house-robber-ii", "title": "House Robber II", "difficulty": "Medium"}, {"slug": "ones-and-zeroes", "title": "Ones and Zeroes", "difficulty": "Medium"}, {"slug": "generate-binary-strings-without-adjacent-zeros", "title": "Generate Binary Strings Without Adjacent Zeros", "difficulty": "Medium"}]},
    {"number": 629, "slug": "k-inverse-pairs-array", "title": "K Inverse Pairs Array", "difficulty": "Hard", "tags": ["Dynamic Programming"], "similar_problems": [{"slug": "count-the-number-of-inversions", "title": "Count the Number of Inversions", "difficulty": "Hard"}]},
    {"number": 634, "slug": "find-the-derangement-of-an-array", "title": "Find the Derangement of An Array", "difficulty": "Medium", "tags": ["Math", "Dynamic Programming", "Combinatorics"], "similar_problems": []},
    {"number": 638, "slug": "shopping-offers", "title": "Shopping Offers", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Backtracking", "Bit Manipulation", "Memoization", "Bitmask"], "similar_problems": []},
    {"number": 639, "slug": "decode-ways-ii", "title": "Decode Ways II", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "decode-ways", "title": "Decode Ways", "difficulty": "Medium"}, {"slug": "number-of-ways-to-separate-numbers", "title": "Number of Ways to Separate Numbers", "difficulty": "Hard"}, {"slug": "number-of-ways-to-divide-a-long-corridor", "title": "Number of Ways to Divide a Long Corridor", "difficulty": "Hard"}]},
    {"number": 646, "slug": "maximum-length-of-pair-chain", "title": "Maximum Length of Pair Chain", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Greedy", "Sorting"], "similar_problems": [{"slug": "longest-increasing-subsequence", "title": "Longest Increasing Subsequence", "difficulty": "Medium"}, {"slug": "non-decreasing-subsequences", "title": "Non-decreasing Subsequences", "difficulty": "Medium"}, {"slug": "longest-non-decreasing-subarray-from-two-arrays", "title": "Longest Non-decreasing Subarray From Two Arrays", "difficulty": "Medium"}]},
    {"number": 647, "slug": "palindromic-substrings", "title": "Palindromic Substrings", "difficulty": "Medium", "tags": ["Two Pointers", "String", "Dynamic Programming"], "similar_problems": [{"slug": "longest-palindromic-substring", "title": "Longest Palindromic Substring", "difficulty": "Medium"}, {"slug": "longest-palindromic-subsequence", "title": "Longest Palindromic Subsequence", "difficulty": "Medium"}]},
    {"number": 650, "slug": "2-keys-keyboard", "title": "2 Keys Keyboard", "difficulty": "Medium", "tags": ["Math", "Dynamic Programming"], "similar_problems": [{"slug": "4-keys-keyboard", "title": "4 Keys Keyboard", "difficulty": "Medium"}, {"slug": "broken-calculator", "title": "Broken Calculator", "difficulty": "Medium"}, {"slug": "smallest-value-after-replacing-with-sum-of-prime-factors", "title": "Smallest Value After Replacing With Sum of Prime Factors", "difficulty": "Medium"}, {"slug": "distinct-prime-factors-of-product-of-array", "title": "Distinct Prime Factors of Product of Array", "difficulty": "Medium"}]},
    {"number": 651, "slug": "4-keys-keyboard", "title": "4 Keys Keyboard", "difficulty": "Medium", "tags": ["Math", "Dynamic Programming"], "similar_problems": [{"slug": "2-keys-keyboard", "title": "2 Keys Keyboard", "difficulty": "Medium"}]},
    {"number": 656, "slug": "coin-path", "title": "Coin Path", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "house-robber", "title": "House Robber", "difficulty": "Medium"}, {"slug": "house-robber-ii", "title": "House Robber II", "difficulty": "Medium"}]},
    {"number": 664, "slug": "strange-printer", "title": "Strange Printer", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "remove-boxes", "title": "Remove Boxes", "difficulty": "Hard"}, {"slug": "strange-printer-ii", "title": "Strange Printer II", "difficulty": "Hard"}]},
    {"number": 673, "slug": "number-of-longest-increasing-subsequence", "title": "Number of Longest Increasing Subsequence", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Binary Indexed Tree", "Segment Tree"], "similar_problems": [{"slug": "longest-increasing-subsequence", "title": "Longest Increasing Subsequence", "difficulty": "Medium"}, {"slug": "longest-continuous-increasing-subsequence", "title": "Longest Continuous Increasing Subsequence", "difficulty": "Easy"}, {"slug": "longest-increasing-subsequence-ii", "title": "Longest Increasing Subsequence II", "difficulty": "Hard"}]},
    {"number": 678, "slug": "valid-parenthesis-string", "title": "Valid Parenthesis String", "difficulty": "Medium", "tags": ["String", "Dynamic Programming", "Stack", "Greedy"], "similar_problems": [{"slug": "special-binary-string", "title": "Special Binary String", "difficulty": "Hard"}, {"slug": "check-if-a-parentheses-string-can-be-valid", "title": "Check if a Parentheses String Can Be Valid", "difficulty": "Medium"}]},
    {"number": 688, "slug": "knight-probability-in-chessboard", "title": "Knight Probability in Chessboard", "difficulty": "Medium", "tags": ["Dynamic Programming"], "similar_problems": [{"slug": "out-of-boundary-paths", "title": "Out of Boundary Paths", "difficulty": "Medium"}, {"slug": "maximum-number-of-moves-to-kill-all-pawns", "title": "Maximum Number of Moves to Kill All Pawns", "difficulty": "Hard"}]},
    {"number": 689, "slug": "maximum-sum-of-3-non-overlapping-subarrays", "title": "Maximum Sum of 3 Non-Overlapping Subarrays", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Sliding Window", "Prefix Sum"], "similar_problems": [{"slug": "best-time-to-buy-and-sell-stock-iii", "title": "Best Time to Buy and Sell Stock III", "difficulty": "Hard"}, {"slug": "sum-of-variable-length-subarrays", "title": "Sum of Variable Length Subarrays", "difficulty": "Easy"}, {"slug": "maximize-ysum-by-picking-a-triplet-of-distinct-xvalues", "title": "Maximize Y‑Sum by Picking a Triplet of Distinct X‑Values", "difficulty": "Medium"}]},
    {"number": 691, "slug": "stickers-to-spell-word", "title": "Stickers to Spell Word", "difficulty": "Hard", "tags": ["Array", "Hash Table", "String", "Dynamic Programming", "Backtracking", "Bit Manipulation", "Memoization", "Bitmask"], "similar_problems": [{"slug": "ransom-note", "title": "Ransom Note", "difficulty": "Easy"}]},
    {"number": 698, "slug": "partition-to-k-equal-sum-subsets", "title": "Partition to K Equal Sum Subsets", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Backtracking", "Bit Manipulation", "Memoization", "Bitmask"], "similar_problems": [{"slug": "partition-equal-subset-sum", "title": "Partition Equal Subset Sum", "difficulty": "Medium"}, {"slug": "fair-distribution-of-cookies", "title": "Fair Distribution of Cookies", "difficulty": "Medium"}, {"slug": "maximum-number-of-ways-to-partition-an-array", "title": "Maximum Number of Ways to Partition an Array", "difficulty": "Hard"}, {"slug": "maximum-rows-covered-by-columns", "title": "Maximum Rows Covered by Columns", "difficulty": "Medium"}, {"slug": "maximum-product-of-two-integers-with-no-common-bits", "title": "Maximum Product of Two Integers With No Common Bits", "difficulty": "Medium"}]},
    {"number": 712, "slug": "minimum-ascii-delete-sum-for-two-strings", "title": "Minimum ASCII Delete Sum for Two Strings", "difficulty": "Medium", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "edit-distance", "title": "Edit Distance", "difficulty": "Medium"}, {"slug": "longest-increasing-subsequence", "title": "Longest Increasing Subsequence", "difficulty": "Medium"}, {"slug": "delete-operation-for-two-strings", "title": "Delete Operation for Two Strings", "difficulty": "Medium"}]},
    {"number": 714, "slug": "best-time-to-buy-and-sell-stock-with-transaction-fee", "title": "Best Time to Buy and Sell Stock with Transaction Fee", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Greedy"], "similar_problems": [{"slug": "best-time-to-buy-and-sell-stock-ii", "title": "Best Time to Buy and Sell Stock II", "difficulty": "Medium"}]},
    {"number": 718, "slug": "maximum-length-of-repeated-subarray", "title": "Maximum Length of Repeated Subarray", "difficulty": "Medium", "tags": ["Array", "Binary Search", "Dynamic Programming", "Sliding Window", "Rolling Hash", "Hash Function"], "similar_problems": [{"slug": "minimum-size-subarray-sum", "title": "Minimum Size Subarray Sum", "difficulty": "Medium"}, {"slug": "longest-common-subpath", "title": "Longest Common Subpath", "difficulty": "Hard"}, {"slug": "find-the-maximum-length-of-a-good-subsequence-ii", "title": "Find the Maximum Length of a Good Subsequence II", "difficulty": "Hard"}, {"slug": "find-the-maximum-length-of-a-good-subsequence-i", "title": "Find the Maximum Length of a Good Subsequence I", "difficulty": "Medium"}]},
    {"number": 727, "slug": "minimum-window-subsequence", "title": "Minimum Window Subsequence", "difficulty": "Hard", "tags": ["String", "Dynamic Programming", "Sliding Window"], "similar_problems": [{"slug": "minimum-window-substring", "title": "Minimum Window Substring", "difficulty": "Hard"}, {"slug": "longest-continuous-increasing-subsequence", "title": "Longest Continuous Increasing Subsequence", "difficulty": "Easy"}]},
    {"number": 730, "slug": "count-different-palindromic-subsequences", "title": "Count Different Palindromic Subsequences", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "longest-palindromic-subsequence", "title": "Longest Palindromic Subsequence", "difficulty": "Medium"}, {"slug": "count-palindromic-subsequences", "title": "Count Palindromic Subsequences", "difficulty": "Hard"}]},
    {"number": 740, "slug": "delete-and-earn", "title": "Delete and Earn", "difficulty": "Medium", "tags": ["Array", "Hash Table", "Dynamic Programming"], "similar_problems": [{"slug": "house-robber", "title": "House Robber", "difficulty": "Medium"}]},
    {"number": 741, "slug": "cherry-pickup", "title": "Cherry Pickup", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Matrix"], "similar_problems": [{"slug": "minimum-path-sum", "title": "Minimum Path Sum", "difficulty": "Medium"}, {"slug": "dungeon-game", "title": "Dungeon Game", "difficulty": "Hard"}, {"slug": "maximum-path-quality-of-a-graph", "title": "Maximum Path Quality of a Graph", "difficulty": "Hard"}, {"slug": "paths-in-matrix-whose-sum-is-divisible-by-k", "title": "Paths in Matrix Whose Sum Is Divisible by K", "difficulty": "Hard"}]},
    {"number": 746, "slug": "min-cost-climbing-stairs", "title": "Min Cost Climbing Stairs", "difficulty": "Easy", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "climbing-stairs", "title": "Climbing Stairs", "difficulty": "Easy"}, {"slug": "find-number-of-ways-to-reach-the-k-th-stair", "title": "Find Number of Ways to Reach the K-th Stair", "difficulty": "Hard"}]},
    {"number": 750, "slug": "number-of-corner-rectangles", "title": "Number Of Corner Rectangles", "difficulty": "Medium", "tags": ["Array", "Math", "Dynamic Programming", "Matrix"], "similar_problems": []},
    {"number": 764, "slug": "largest-plus-sign", "title": "Largest Plus Sign", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "maximal-square", "title": "Maximal Square", "difficulty": "Medium"}]},
    {"number": 773, "slug": "sliding-puzzle", "title": "Sliding Puzzle", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Backtracking", "Breadth-First Search", "Memoization", "Matrix"], "similar_problems": []},
    {"number": 787, "slug": "cheapest-flights-within-k-stops", "title": "Cheapest Flights Within K Stops", "difficulty": "Medium", "tags": ["Dynamic Programming", "Depth-First Search", "Breadth-First Search", "Graph", "Heap (Priority Queue)", "Shortest Path"], "similar_problems": [{"slug": "maximum-vacation-days", "title": "Maximum Vacation Days", "difficulty": "Hard"}, {"slug": "minimum-cost-to-reach-city-with-discounts", "title": "Minimum Cost to Reach City With Discounts", "difficulty": "Medium"}]},
    {"number": 788, "slug": "rotated-digits", "title": "Rotated Digits", "difficulty": "Medium", "tags": ["Math", "Dynamic Programming"], "similar_problems": []},
    {"number": 790, "slug": "domino-and-tromino-tiling", "title": "Domino and Tromino Tiling", "difficulty": "Medium", "tags": ["Dynamic Programming"], "similar_problems": []},
    {"number": 792, "slug": "number-of-matching-subsequences", "title": "Number of Matching Subsequences", "difficulty": "Medium", "tags": ["Array", "Hash Table", "String", "Binary Search", "Dynamic Programming", "Trie", "Sorting"], "similar_problems": [{"slug": "is-subsequence", "title": "Is Subsequence", "difficulty": "Easy"}, {"slug": "shortest-way-to-form-string", "title": "Shortest Way to Form String", "difficulty": "Medium"}, {"slug": "count-vowel-substrings-of-a-string", "title": "Count Vowel Substrings of a String", "difficulty": "Easy"}]},
    {"number": 799, "slug": "champagne-tower", "title": "Champagne Tower", "difficulty": "Medium", "tags": ["Dynamic Programming"], "similar_problems": [{"slug": "number-of-ways-to-build-house-of-cards", "title": "Number of Ways to Build House of Cards", "difficulty": "Medium"}]},
    {"number": 801, "slug": "minimum-swaps-to-make-sequences-increasing", "title": "Minimum Swaps To Make Sequences Increasing", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "minimum-operations-to-make-the-array-k-increasing", "title": "Minimum Operations to Make the Array K-Increasing", "difficulty": "Hard"}, {"slug": "minimum-operations-to-maximize-last-elements-in-arrays", "title": "Minimum Operations to Maximize Last Elements in Arrays", "difficulty": "Medium"}]},
    {"number": 805, "slug": "split-array-with-same-average", "title": "Split Array With Same Average", "difficulty": "Hard", "tags": ["Array", "Math", "Dynamic Programming", "Bit Manipulation", "Bitmask"], "similar_problems": [{"slug": "partition-array-into-two-arrays-to-minimize-sum-difference", "title": "Partition Array Into Two Arrays to Minimize Sum Difference", "difficulty": "Hard"}, {"slug": "minimum-average-difference", "title": "Minimum Average Difference", "difficulty": "Medium"}]},
    {"number": 808, "slug": "soup-servings", "title": "Soup Servings", "difficulty": "Medium", "tags": ["Math", "Dynamic Programming", "Probability and Statistics"], "similar_problems": []},
    {"number": 813, "slug": "largest-sum-of-averages", "title": "Largest Sum of Averages", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Prefix Sum"], "similar_problems": []},
    {"number": 818, "slug": "race-car", "title": "Race Car", "difficulty": "Hard", "tags": ["Dynamic Programming"], "similar_problems": []},
    {"number": 823, "slug": "binary-trees-with-factors", "title": "Binary Trees With Factors", "difficulty": "Medium", "tags": ["Array", "Hash Table", "Dynamic Programming", "Sorting"], "similar_problems": []},
    {"number": 828, "slug": "count-unique-characters-of-all-substrings-of-a-given-string", "title": "Count Unique Characters of All Substrings of a Given String", "difficulty": "Hard", "tags": ["Hash Table", "String", "Dynamic Programming"], "similar_problems": [{"slug": "total-appeal-of-a-string", "title": "Total Appeal of A String", "difficulty": "Hard"}]},
    {"number": 834, "slug": "sum-of-distances-in-tree", "title": "Sum of Distances in Tree", "difficulty": "Hard", "tags": ["Dynamic Programming", "Tree", "Depth-First Search", "Graph"], "similar_problems": [{"slug": "distribute-coins-in-binary-tree", "title": "Distribute Coins in Binary Tree", "difficulty": "Medium"}, {"slug": "count-nodes-with-the-highest-score", "title": "Count Nodes With the Highest Score", "difficulty": "Medium"}, {"slug": "collect-coins-in-a-tree", "title": "Collect Coins in a Tree", "difficulty": "Hard"}, {"slug": "maximum-score-after-applying-operations-on-a-tree", "title": "Maximum Score After Applying Operations on a Tree", "difficulty": "Medium"}, {"slug": "count-pairs-of-connectable-servers-in-a-weighted-tree-network", "title": "Count Pairs of Connectable Servers in a Weighted Tree Network", "difficulty": "Medium"}, {"slug": "time-taken-to-mark-all-nodes", "title": "Time Taken to Mark All Nodes", "difficulty": "Hard"}]},
    {"number": 837, "slug": "new-21-game", "title": "New 21 Game", "difficulty": "Medium", "tags": ["Math", "Dynamic Programming", "Sliding Window", "Probability and Statistics"], "similar_problems": []},
    {"number": 838, "slug": "push-dominoes", "title": "Push Dominoes", "difficulty": "Medium", "tags": ["Two Pointers", "String", "Dynamic Programming"], "similar_problems": []},
    {"number": 845, "slug": "longest-mountain-in-array", "title": "Longest Mountain in Array", "difficulty": "Medium", "tags": ["Array", "Two Pointers", "Dynamic Programming", "Enumeration"], "similar_problems": [{"slug": "minimum-number-of-removals-to-make-mountain-array", "title": "Minimum Number of Removals to Make Mountain Array", "difficulty": "Hard"}, {"slug": "find-good-days-to-rob-the-bank", "title": "Find Good Days to Rob the Bank", "difficulty": "Medium"}]},
    {"number": 847, "slug": "shortest-path-visiting-all-nodes", "title": "Shortest Path Visiting All Nodes", "difficulty": "Hard", "tags": ["Dynamic Programming", "Bit Manipulation", "Breadth-First Search", "Graph", "Bitmask"], "similar_problems": [{"slug": "find-the-minimum-cost-array-permutation", "title": "Find the Minimum Cost Array Permutation", "difficulty": "Hard"}]},
    {"number": 871, "slug": "minimum-number-of-refueling-stops", "title": "Minimum Number of Refueling Stops", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Greedy", "Heap (Priority Queue)"], "similar_problems": []},
    {"number": 873, "slug": "length-of-longest-fibonacci-subsequence", "title": "Length of Longest Fibonacci Subsequence", "difficulty": "Medium", "tags": ["Array", "Hash Table", "Dynamic Programming"], "similar_problems": [{"slug": "fibonacci-number", "title": "Fibonacci Number", "difficulty": "Easy"}]},
    {"number": 877, "slug": "stone-game", "title": "Stone Game", "difficulty": "Medium", "tags": ["Array", "Math", "Dynamic Programming", "Game Theory"], "similar_problems": [{"slug": "stone-game-v", "title": "Stone Game V", "difficulty": "Hard"}, {"slug": "stone-game-vi", "title": "Stone Game VI", "difficulty": "Medium"}, {"slug": "stone-game-vii", "title": "Stone Game VII", "difficulty": "Medium"}, {"slug": "stone-game-viii", "title": "Stone Game VIII", "difficulty": "Hard"}, {"slug": "stone-game-ix", "title": "Stone Game IX", "difficulty": "Medium"}, {"slug": "strictly-palindromic-number", "title": "Strictly Palindromic Number", "difficulty": "Medium"}, {"slug": "visit-array-positions-to-maximize-score", "title": "Visit Array Positions to Maximize Score", "difficulty": "Medium"}]},
    {"number": 879, "slug": "profitable-schemes", "title": "Profitable Schemes", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": []},
    {"number": 887, "slug": "super-egg-drop", "title": "Super Egg Drop", "difficulty": "Hard", "tags": ["Math", "Binary Search", "Dynamic Programming"], "similar_problems": [{"slug": "egg-drop-with-2-eggs-and-n-floors", "title": "Egg Drop With 2 Eggs and N Floors", "difficulty": "Medium"}]},
    {"number": 894, "slug": "all-possible-full-binary-trees", "title": "All Possible Full Binary Trees", "difficulty": "Medium", "tags": ["Dynamic Programming", "Tree", "Recursion", "Memoization", "Binary Tree"], "similar_problems": []},
    {"number": 898, "slug": "bitwise-ors-of-subarrays", "title": "Bitwise ORs of Subarrays", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Bit Manipulation"], "similar_problems": [{"slug": "longest-nice-subarray", "title": "Longest Nice Subarray", "difficulty": "Medium"}, {"slug": "smallest-subarrays-with-maximum-bitwise-or", "title": "Smallest Subarrays With Maximum Bitwise OR", "difficulty": "Medium"}, {"slug": "bitwise-or-of-all-subsequence-sums", "title": "Bitwise OR of All Subsequence Sums", "difficulty": "Medium"}, {"slug": "find-the-maximum-sequence-value-of-array", "title": "Find the Maximum Sequence Value of Array", "difficulty": "Hard"}]},
    {"number": 902, "slug": "numbers-at-most-n-given-digit-set", "title": "Numbers At Most N Given Digit Set", "difficulty": "Hard", "tags": ["Array", "Math", "String", "Binary Search", "Dynamic Programming"], "similar_problems": []},
    {"number": 903, "slug": "valid-permutations-for-di-sequence", "title": "Valid Permutations for DI Sequence", "difficulty": "Hard", "tags": ["String", "Dynamic Programming", "Prefix Sum"], "similar_problems": []},
    {"number": 907, "slug": "sum-of-subarray-minimums", "title": "Sum of Subarray Minimums", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Stack", "Monotonic Stack"], "similar_problems": [{"slug": "sum-of-subarray-ranges", "title": "Sum of Subarray Ranges", "difficulty": "Medium"}, {"slug": "sum-of-total-strength-of-wizards", "title": "Sum of Total Strength of Wizards", "difficulty": "Hard"}]},
    {"number": 913, "slug": "cat-and-mouse", "title": "Cat and Mouse", "difficulty": "Hard", "tags": ["Math", "Dynamic Programming", "Graph", "Topological Sort", "Memoization", "Game Theory"], "similar_problems": [{"slug": "cat-and-mouse-ii", "title": "Cat and Mouse II", "difficulty": "Hard"}]},
    {"number": 918, "slug": "maximum-sum-circular-subarray", "title": "Maximum Sum Circular Subarray", "difficulty": "Medium", "tags": ["Array", "Divide and Conquer", "Dynamic Programming", "Queue", "Monotonic Queue"], "similar_problems": []},
    {"number": 920, "slug": "number-of-music-playlists", "title": "Number of Music Playlists", "difficulty": "Hard", "tags": ["Math", "Dynamic Programming", "Combinatorics"], "similar_problems": [{"slug": "count-the-number-of-good-subsequences", "title": "Count the Number of Good Subsequences", "difficulty": "Medium"}]},
    {"number": 926, "slug": "flip-string-to-monotone-increasing", "title": "Flip String to Monotone Increasing", "difficulty": "Medium", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "minimum-cost-to-make-all-characters-equal", "title": "Minimum Cost to Make All Characters Equal", "difficulty": "Medium"}]},
    {"number": 931, "slug": "minimum-falling-path-sum", "title": "Minimum Falling Path Sum", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Matrix"], "similar_problems": [{"slug": "minimum-falling-path-sum-ii", "title": "Minimum Falling Path Sum II", "difficulty": "Hard"}]},
    {"number": 935, "slug": "knight-dialer", "title": "Knight Dialer", "difficulty": "Medium", "tags": ["Dynamic Programming"], "similar_problems": []},
    {"number": 940, "slug": "distinct-subsequences-ii", "title": "Distinct Subsequences II", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "number-of-unique-good-subsequences", "title": "Number of Unique Good Subsequences", "difficulty": "Hard"}, {"slug": "count-k-subsequences-of-a-string-with-maximum-beauty", "title": "Count K-Subsequences of a String With Maximum Beauty", "difficulty": "Hard"}]},
    {"number": 943, "slug": "find-the-shortest-superstring", "title": "Find the Shortest Superstring", "difficulty": "Hard", "tags": ["Array", "String", "Dynamic Programming", "Bit Manipulation", "Bitmask"], "similar_problems": [{"slug": "maximum-rows-covered-by-columns", "title": "Maximum Rows Covered by Columns", "difficulty": "Medium"}, {"slug": "find-the-minimum-cost-array-permutation", "title": "Find the Minimum Cost Array Permutation", "difficulty": "Hard"}, {"slug": "find-the-shortest-superstring-ii", "title": "Find the Shortest Superstring II", "difficulty": "Easy"}]},
    {"number": 956, "slug": "tallest-billboard", "title": "Tallest Billboard", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "partition-array-into-two-arrays-to-minimize-sum-difference", "title": "Partition Array Into Two Arrays to Minimize Sum Difference", "difficulty": "Hard"}]},
    {"number": 960, "slug": "delete-columns-to-make-sorted-iii", "title": "Delete Columns to Make Sorted III", "difficulty": "Hard", "tags": ["Array", "String", "Dynamic Programming"], "similar_problems": []},
    {"number": 964, "slug": "least-operators-to-express-number", "title": "Least Operators to Express Number", "difficulty": "Hard", "tags": ["Math", "Dynamic Programming", "Memoization"], "similar_problems": []},
    {"number": 968, "slug": "binary-tree-cameras", "title": "Binary Tree Cameras", "difficulty": "Hard", "tags": ["Dynamic Programming", "Tree", "Depth-First Search", "Binary Tree"], "similar_problems": [{"slug": "distribute-coins-in-binary-tree", "title": "Distribute Coins in Binary Tree", "difficulty": "Medium"}, {"slug": "choose-edges-to-maximize-score-in-a-tree", "title": "Choose Edges to Maximize Score in a Tree", "difficulty": "Medium"}]},
    {"number": 975, "slug": "odd-even-jump", "title": "Odd Even Jump", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Stack", "Sorting", "Monotonic Stack", "Ordered Set"], "similar_problems": []},
    {"number": 978, "slug": "longest-turbulent-subarray", "title": "Longest Turbulent Subarray", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Sliding Window"], "similar_problems": [{"slug": "maximum-subarray", "title": "Maximum Subarray", "difficulty": "Medium"}, {"slug": "longest-alternating-subarray", "title": "Longest Alternating Subarray", "difficulty": "Easy"}]},
    {"number": 983, "slug": "minimum-cost-for-tickets", "title": "Minimum Cost For Tickets", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "coin-change", "title": "Coin Change", "difficulty": "Medium"}, {"slug": "most-expensive-item-that-can-not-be-bought", "title": "Most Expensive Item That Can Not Be Bought", "difficulty": "Medium"}]},
    {"number": 996, "slug": "number-of-squareful-arrays", "title": "Number of Squareful Arrays", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Math", "Dynamic Programming", "Backtracking", "Bit Manipulation", "Bitmask"], "similar_problems": [{"slug": "permutations-ii", "title": "Permutations II", "difficulty": "Medium"}]},
    {"number": 1000, "slug": "minimum-cost-to-merge-stones", "title": "Minimum Cost to Merge Stones", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Prefix Sum"], "similar_problems": [{"slug": "burst-balloons", "title": "Burst Balloons", "difficulty": "Hard"}, {"slug": "minimum-cost-to-connect-sticks", "title": "Minimum Cost to Connect Sticks", "difficulty": "Medium"}]},
    {"number": 1012, "slug": "numbers-with-repeated-digits", "title": "Numbers With Repeated Digits", "difficulty": "Hard", "tags": ["Math", "Dynamic Programming"], "similar_problems": [{"slug": "count-the-number-of-powerful-integers", "title": "Count the Number of Powerful Integers", "difficulty": "Hard"}]},
    {"number": 1014, "slug": "best-sightseeing-pair", "title": "Best Sightseeing Pair", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": []},
    {"number": 1024, "slug": "video-stitching", "title": "Video Stitching", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Greedy"], "similar_problems": []},
    {"number": 1025, "slug": "divisor-game", "title": "Divisor Game", "difficulty": "Easy", "tags": ["Math", "Dynamic Programming", "Brainteaser", "Game Theory"], "similar_problems": []},
    {"number": 1027, "slug": "longest-arithmetic-subsequence", "title": "Longest Arithmetic Subsequence", "difficulty": "Medium", "tags": ["Array", "Hash Table", "Binary Search", "Dynamic Programming"], "similar_problems": [{"slug": "destroy-sequential-targets", "title": "Destroy Sequential Targets", "difficulty": "Medium"}]},
    {"number": 1031, "slug": "maximum-sum-of-two-non-overlapping-subarrays", "title": "Maximum Sum of Two Non-Overlapping Subarrays", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Sliding Window"], "similar_problems": []},
    {"number": 1035, "slug": "uncrossed-lines", "title": "Uncrossed Lines", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "edit-distance", "title": "Edit Distance", "difficulty": "Medium"}]},
    {"number": 1039, "slug": "minimum-score-triangulation-of-polygon", "title": "Minimum Score Triangulation of Polygon", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": []},
    {"number": 1043, "slug": "partition-array-for-maximum-sum", "title": "Partition Array for Maximum Sum", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "subsequence-of-size-k-with-the-largest-even-sum", "title": "Subsequence of Size K With the Largest Even Sum", "difficulty": "Medium"}, {"slug": "partition-string-into-minimum-beautiful-substrings", "title": "Partition String Into Minimum Beautiful Substrings", "difficulty": "Medium"}, {"slug": "minimum-substring-partition-of-equal-character-frequency", "title": "Minimum Substring Partition of Equal Character Frequency", "difficulty": "Medium"}]},
    {"number": 1048, "slug": "longest-string-chain", "title": "Longest String Chain", "difficulty": "Medium", "tags": ["Array", "Hash Table", "Two Pointers", "String", "Dynamic Programming", "Sorting"], "similar_problems": []},
    {"number": 1049, "slug": "last-stone-weight-ii", "title": "Last Stone Weight II", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "partition-array-into-two-arrays-to-minimize-sum-difference", "title": "Partition Array Into Two Arrays to Minimize Sum Difference", "difficulty": "Hard"}]},
    {"number": 1062, "slug": "longest-repeating-substring", "title": "Longest Repeating Substring", "difficulty": "Medium", "tags": ["String", "Binary Search", "Dynamic Programming", "Rolling Hash", "Suffix Array", "Hash Function"], "similar_problems": []},
    {"number": 1066, "slug": "campus-bikes-ii", "title": "Campus Bikes II", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Backtracking", "Bit Manipulation", "Bitmask"], "similar_problems": [{"slug": "campus-bikes", "title": "Campus Bikes", "difficulty": "Medium"}]},
    {"number": 1067, "slug": "digit-count-in-range", "title": "Digit Count in Range", "difficulty": "Hard", "tags": ["Math", "Dynamic Programming"], "similar_problems": [{"slug": "number-of-digit-one", "title": "Number of Digit One", "difficulty": "Hard"}, {"slug": "sum-of-numbers-with-units-digit-k", "title": "Sum of Numbers With Units Digit K", "difficulty": "Medium"}]},
    {"number": 1092, "slug": "shortest-common-supersequence", "title": "Shortest Common Supersequence ", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "longest-common-subsequence", "title": "Longest Common Subsequence", "difficulty": "Medium"}, {"slug": "shortest-string-that-contains-three-strings", "title": "Shortest String That Contains Three Strings", "difficulty": "Medium"}]},
    {"number": 1105, "slug": "filling-bookcase-shelves", "title": "Filling Bookcase Shelves", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": []},
    {"number": 1125, "slug": "smallest-sufficient-team", "title": "Smallest Sufficient Team", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Bit Manipulation", "Bitmask"], "similar_problems": [{"slug": "the-number-of-good-subsets", "title": "The Number of Good Subsets", "difficulty": "Hard"}, {"slug": "minimum-number-of-work-sessions-to-finish-the-tasks", "title": "Minimum Number of Work Sessions to Finish the Tasks", "difficulty": "Medium"}, {"slug": "maximum-rows-covered-by-columns", "title": "Maximum Rows Covered by Columns", "difficulty": "Medium"}]},
    {"number": 1130, "slug": "minimum-cost-tree-from-leaf-values", "title": "Minimum Cost Tree From Leaf Values", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Stack", "Greedy", "Monotonic Stack"], "similar_problems": []},
    {"number": 1137, "slug": "n-th-tribonacci-number", "title": "N-th Tribonacci Number", "difficulty": "Easy", "tags": ["Math", "Dynamic Programming", "Memoization"], "similar_problems": [{"slug": "climbing-stairs", "title": "Climbing Stairs", "difficulty": "Easy"}, {"slug": "fibonacci-number", "title": "Fibonacci Number", "difficulty": "Easy"}]},
    {"number": 1139, "slug": "largest-1-bordered-square", "title": "Largest 1-Bordered Square", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Matrix"], "similar_problems": []},
    {"number": 1140, "slug": "stone-game-ii", "title": "Stone Game II", "difficulty": "Medium", "tags": ["Array", "Math", "Dynamic Programming", "Prefix Sum", "Game Theory"], "similar_problems": [{"slug": "stone-game-v", "title": "Stone Game V", "difficulty": "Hard"}, {"slug": "stone-game-vi", "title": "Stone Game VI", "difficulty": "Medium"}, {"slug": "stone-game-vii", "title": "Stone Game VII", "difficulty": "Medium"}, {"slug": "stone-game-viii", "title": "Stone Game VIII", "difficulty": "Hard"}, {"slug": "stone-game-ix", "title": "Stone Game IX", "difficulty": "Medium"}]},
    {"number": 1143, "slug": "longest-common-subsequence", "title": "Longest Common Subsequence", "difficulty": "Medium", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "longest-palindromic-subsequence", "title": "Longest Palindromic Subsequence", "difficulty": "Medium"}, {"slug": "delete-operation-for-two-strings", "title": "Delete Operation for Two Strings", "difficulty": "Medium"}, {"slug": "shortest-common-supersequence", "title": "Shortest Common Supersequence ", "difficulty": "Hard"}, {"slug": "maximize-number-of-subsequences-in-a-string", "title": "Maximize Number of Subsequences in a String", "difficulty": "Medium"}, {"slug": "subsequence-with-the-minimum-score", "title": "Subsequence With the Minimum Score", "difficulty": "Hard"}]},
    {"number": 1147, "slug": "longest-chunked-palindrome-decomposition", "title": "Longest Chunked Palindrome Decomposition", "difficulty": "Hard", "tags": ["Two Pointers", "String", "Dynamic Programming", "Greedy", "Rolling Hash", "Hash Function"], "similar_problems": [{"slug": "palindrome-rearrangement-queries", "title": "Palindrome Rearrangement Queries", "difficulty": "Hard"}]},
    {"number": 1155, "slug": "number-of-dice-rolls-with-target-sum", "title": "Number of Dice Rolls With Target Sum", "difficulty": "Medium", "tags": ["Dynamic Programming"], "similar_problems": [{"slug": "equal-sum-arrays-with-minimum-number-of-operations", "title": "Equal Sum Arrays With Minimum Number of Operations", "difficulty": "Medium"}, {"slug": "find-missing-observations", "title": "Find Missing Observations", "difficulty": "Medium"}]},
    {"number": 1162, "slug": "as-far-from-land-as-possible", "title": "As Far from Land as Possible", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Breadth-First Search", "Matrix"], "similar_problems": [{"slug": "shortest-distance-from-all-buildings", "title": "Shortest Distance from All Buildings", "difficulty": "Hard"}, {"slug": "k-highest-ranked-items-within-a-price-range", "title": "K Highest Ranked Items Within a Price Range", "difficulty": "Medium"}, {"slug": "maximum-manhattan-distance-after-k-changes", "title": "Maximum Manhattan Distance After K Changes", "difficulty": "Medium"}]},
    {"number": 1182, "slug": "shortest-distance-to-target-color", "title": "Shortest Distance to Target Color", "difficulty": "Medium", "tags": ["Array", "Binary Search", "Dynamic Programming"], "similar_problems": []},
    {"number": 1186, "slug": "maximum-subarray-sum-with-one-deletion", "title": "Maximum Subarray Sum with One Deletion", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "maximize-subarray-sum-after-removing-all-occurrences-of-one-element", "title": "Maximize Subarray Sum After Removing All Occurrences of One Element", "difficulty": "Hard"}, {"slug": "maximum-unique-subarray-sum-after-deletion", "title": "Maximum Unique Subarray Sum After Deletion", "difficulty": "Easy"}]},
    {"number": 1187, "slug": "make-array-strictly-increasing", "title": "Make Array Strictly Increasing", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Dynamic Programming", "Sorting"], "similar_problems": [{"slug": "make-array-non-decreasing-or-non-increasing", "title": "Make Array Non-decreasing or Non-increasing", "difficulty": "Hard"}]},
    {"number": 1191, "slug": "k-concatenation-maximum-sum", "title": "K-Concatenation Maximum Sum", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": []},
    {"number": 1216, "slug": "valid-palindrome-iii", "title": "Valid Palindrome III", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "valid-palindrome-ii", "title": "Valid Palindrome II", "difficulty": "Easy"}, {"slug": "valid-palindrome-iv", "title": "Valid Palindrome IV", "difficulty": "Medium"}]},
    {"number": 1218, "slug": "longest-arithmetic-subsequence-of-given-difference", "title": "Longest Arithmetic Subsequence of Given Difference", "difficulty": "Medium", "tags": ["Array", "Hash Table", "Dynamic Programming"], "similar_problems": [{"slug": "destroy-sequential-targets", "title": "Destroy Sequential Targets", "difficulty": "Medium"}]},
    {"number": 1220, "slug": "count-vowels-permutation", "title": "Count Vowels Permutation", "difficulty": "Hard", "tags": ["Dynamic Programming"], "similar_problems": [{"slug": "number-of-strings-which-can-be-rearranged-to-contain-substring", "title": "Number of Strings Which Can Be Rearranged to Contain Substring", "difficulty": "Medium"}]},
    {"number": 1223, "slug": "dice-roll-simulation", "title": "Dice Roll Simulation", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "find-missing-observations", "title": "Find Missing Observations", "difficulty": "Medium"}, {"slug": "number-of-distinct-roll-sequences", "title": "Number of Distinct Roll Sequences", "difficulty": "Hard"}]},
    {"number": 1227, "slug": "airplane-seat-assignment-probability", "title": "Airplane Seat Assignment Probability", "difficulty": "Medium", "tags": ["Math", "Dynamic Programming", "Brainteaser", "Probability and Statistics"], "similar_problems": []},
    {"number": 1230, "slug": "toss-strange-coins", "title": "Toss Strange Coins", "difficulty": "Medium", "tags": ["Array", "Math", "Dynamic Programming", "Probability and Statistics"], "similar_problems": []},
    {"number": 1235, "slug": "maximum-profit-in-job-scheduling", "title": "Maximum Profit in Job Scheduling", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Dynamic Programming", "Sorting"], "similar_problems": [{"slug": "maximum-earnings-from-taxi", "title": "Maximum Earnings From Taxi", "difficulty": "Medium"}, {"slug": "two-best-non-overlapping-events", "title": "Two Best Non-Overlapping Events", "difficulty": "Medium"}]},
    {"number": 1246, "slug": "palindrome-removal", "title": "Palindrome Removal", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": []},
    {"number": 1255, "slug": "maximum-score-words-formed-by-letters", "title": "Maximum Score Words Formed by Letters", "difficulty": "Hard", "tags": ["Array", "Hash Table", "String", "Dynamic Programming", "Backtracking", "Bit Manipulation", "Counting", "Bitmask"], "similar_problems": [{"slug": "maximum-good-people-based-on-statements", "title": "Maximum Good People Based on Statements", "difficulty": "Hard"}]},
    {"number": 1259, "slug": "handshakes-that-dont-cross", "title": "Handshakes That Don't Cross", "difficulty": "Hard", "tags": ["Math", "Dynamic Programming"], "similar_problems": []},
    {"number": 1262, "slug": "greatest-sum-divisible-by-three", "title": "Greatest Sum Divisible by Three", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Greedy", "Sorting"], "similar_problems": []},
    {"number": 1269, "slug": "number-of-ways-to-stay-in-the-same-place-after-some-steps", "title": "Number of Ways to Stay in the Same Place After Some Steps", "difficulty": "Hard", "tags": ["Dynamic Programming"], "similar_problems": [{"slug": "number-of-ways-to-reach-a-position-after-exactly-k-steps", "title": "Number of Ways to Reach a Position After Exactly k Steps", "difficulty": "Medium"}]},
    {"number": 1277, "slug": "count-square-submatrices-with-all-ones", "title": "Count Square Submatrices with All Ones", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Matrix"], "similar_problems": [{"slug": "minimum-cost-homecoming-of-a-robot-in-a-grid", "title": "Minimum Cost Homecoming of a Robot in a Grid", "difficulty": "Medium"}, {"slug": "count-fertile-pyramids-in-a-land", "title": "Count Fertile Pyramids in a Land", "difficulty": "Hard"}]},
    {"number": 1278, "slug": "palindrome-partitioning-iii", "title": "Palindrome Partitioning III", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "palindrome-partitioning-iv", "title": "Palindrome Partitioning IV", "difficulty": "Hard"}, {"slug": "maximum-number-of-non-overlapping-palindrome-substrings", "title": "Maximum Number of Non-overlapping Palindrome Substrings", "difficulty": "Hard"}, {"slug": "minimum-changes-to-make-k-semi-palindromes", "title": "Minimum Changes to Make K Semi-palindromes", "difficulty": "Hard"}]},
    {"number": 1289, "slug": "minimum-falling-path-sum-ii", "title": "Minimum Falling Path Sum II", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Matrix"], "similar_problems": [{"slug": "minimum-falling-path-sum", "title": "Minimum Falling Path Sum", "difficulty": "Medium"}]},
    {"number": 1301, "slug": "number-of-paths-with-max-score", "title": "Number of Paths with Max Score", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Matrix"], "similar_problems": []},
    {"number": 1312, "slug": "minimum-insertion-steps-to-make-a-string-palindrome", "title": "Minimum Insertion Steps to Make a String Palindrome", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "minimum-number-of-moves-to-make-palindrome", "title": "Minimum Number of Moves to Make Palindrome", "difficulty": "Hard"}]},
    {"number": 1320, "slug": "minimum-distance-to-type-a-word-using-two-fingers", "title": "Minimum Distance to Type a Word Using Two Fingers", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "minimum-time-to-type-word-using-special-typewriter", "title": "Minimum Time to Type Word Using Special Typewriter", "difficulty": "Easy"}]},
    {"number": 1326, "slug": "minimum-number-of-taps-to-open-to-water-a-garden", "title": "Minimum Number of Taps to Open to Water a Garden", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Greedy"], "similar_problems": []},
    {"number": 1334, "slug": "find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance", "title": "Find the City With the Smallest Number of Neighbors at a Threshold Distance", "difficulty": "Medium", "tags": ["Dynamic Programming", "Graph", "Shortest Path"], "similar_problems": [{"slug": "second-minimum-time-to-reach-destination", "title": "Second Minimum Time to Reach Destination", "difficulty": "Hard"}]},
    {"number": 1335, "slug": "minimum-difficulty-of-a-job-schedule", "title": "Minimum Difficulty of a Job Schedule", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": []},
    {"number": 1340, "slug": "jump-game-v", "title": "Jump Game V", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Sorting"], "similar_problems": [{"slug": "jump-game-vii", "title": "Jump Game VII", "difficulty": "Medium"}, {"slug": "jump-game-viii", "title": "Jump Game VIII", "difficulty": "Medium"}]},
    {"number": 1349, "slug": "maximum-students-taking-exam", "title": "Maximum Students Taking Exam", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Bit Manipulation", "Matrix", "Bitmask"], "similar_problems": []},
    {"number": 1359, "slug": "count-all-valid-pickup-and-delivery-options", "title": "Count All Valid Pickup and Delivery Options", "difficulty": "Hard", "tags": ["Math", "Dynamic Programming", "Combinatorics"], "similar_problems": []},
    {"number": 1363, "slug": "largest-multiple-of-three", "title": "Largest Multiple of Three", "difficulty": "Hard", "tags": ["Array", "Math", "Dynamic Programming", "Greedy", "Sorting"], "similar_problems": []},
    {"number": 1372, "slug": "longest-zigzag-path-in-a-binary-tree", "title": "Longest ZigZag Path in a Binary Tree", "difficulty": "Medium", "tags": ["Dynamic Programming", "Tree", "Depth-First Search", "Binary Tree"], "similar_problems": [{"slug": "zigzag-grid-traversal-with-skip", "title": "Zigzag Grid Traversal With Skip", "difficulty": "Easy"}]},
    {"number": 1373, "slug": "maximum-sum-bst-in-binary-tree", "title": "Maximum Sum BST in Binary Tree", "difficulty": "Hard", "tags": ["Dynamic Programming", "Tree", "Depth-First Search", "Binary Search Tree", "Binary Tree"], "similar_problems": []},
    {"number": 1387, "slug": "sort-integers-by-the-power-value", "title": "Sort Integers by The Power Value", "difficulty": "Medium", "tags": ["Dynamic Programming", "Memoization", "Sorting"], "similar_problems": [{"slug": "find-score-of-an-array-after-marking-all-elements", "title": "Find Score of an Array After Marking All Elements", "difficulty": "Medium"}]},
    {"number": 1388, "slug": "pizza-with-3n-slices", "title": "Pizza With 3n Slices", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Greedy", "Heap (Priority Queue)"], "similar_problems": []},
    {"number": 1395, "slug": "count-number-of-teams", "title": "Count Number of Teams", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Binary Indexed Tree", "Segment Tree"], "similar_problems": []},
    {"number": 1397, "slug": "find-all-good-strings", "title": "Find All Good Strings", "difficulty": "Hard", "tags": ["String", "Dynamic Programming", "String Matching"], "similar_problems": []},
    {"number": 1402, "slug": "reducing-dishes", "title": "Reducing Dishes", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Greedy", "Sorting"], "similar_problems": []},
    {"number": 1406, "slug": "stone-game-iii", "title": "Stone Game III", "difficulty": "Hard", "tags": ["Array", "Math", "Dynamic Programming", "Game Theory"], "similar_problems": [{"slug": "stone-game-v", "title": "Stone Game V", "difficulty": "Hard"}, {"slug": "stone-game-vi", "title": "Stone Game VI", "difficulty": "Medium"}, {"slug": "stone-game-vii", "title": "Stone Game VII", "difficulty": "Medium"}, {"slug": "stone-game-viii", "title": "Stone Game VIII", "difficulty": "Hard"}, {"slug": "stone-game-ix", "title": "Stone Game IX", "difficulty": "Medium"}]},
    {"number": 1411, "slug": "number-of-ways-to-paint-n-3-grid", "title": "Number of Ways to Paint N × 3 Grid", "difficulty": "Hard", "tags": ["Dynamic Programming"], "similar_problems": [{"slug": "painting-a-grid-with-three-different-colors", "title": "Painting a Grid With Three Different Colors", "difficulty": "Hard"}]},
    {"number": 1416, "slug": "restore-the-array", "title": "Restore The Array", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "number-of-ways-to-separate-numbers", "title": "Number of Ways to Separate Numbers", "difficulty": "Hard"}, {"slug": "number-of-beautiful-partitions", "title": "Number of Beautiful Partitions", "difficulty": "Hard"}]},
    {"number": 1420, "slug": "build-array-where-you-can-find-the-maximum-exactly-k-comparisons", "title": "Build Array Where You Can Find The Maximum Exactly K Comparisons", "difficulty": "Hard", "tags": ["Dynamic Programming", "Prefix Sum"], "similar_problems": []},
    {"number": 1425, "slug": "constrained-subsequence-sum", "title": "Constrained Subsequence Sum", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Queue", "Sliding Window", "Heap (Priority Queue)", "Monotonic Queue"], "similar_problems": [{"slug": "maximum-element-sum-of-a-complete-subset-of-indices", "title": "Maximum Element-Sum of a Complete Subset of Indices", "difficulty": "Hard"}]},
    {"number": 1434, "slug": "number-of-ways-to-wear-different-hats-to-each-other", "title": "Number of Ways to Wear Different Hats to Each Other", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Bit Manipulation", "Bitmask"], "similar_problems": [{"slug": "the-number-of-good-subsets", "title": "The Number of Good Subsets", "difficulty": "Hard"}]},
    {"number": 1444, "slug": "number-of-ways-of-cutting-a-pizza", "title": "Number of Ways of Cutting a Pizza", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Memoization", "Matrix", "Prefix Sum"], "similar_problems": [{"slug": "selling-pieces-of-wood", "title": "Selling Pieces of Wood", "difficulty": "Hard"}]},
    {"number": 1449, "slug": "form-largest-integer-with-digits-that-add-up-to-target", "title": "Form Largest Integer With Digits That Add up to Target", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": []},
    {"number": 1458, "slug": "max-dot-product-of-two-subsequences", "title": "Max Dot Product of Two Subsequences", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": []},
    {"number": 1463, "slug": "cherry-pickup-ii", "title": "Cherry Pickup II", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Matrix"], "similar_problems": []},
    {"number": 1467, "slug": "probability-of-a-two-boxes-having-the-same-number-of-distinct-balls", "title": "Probability of a Two Boxes Having The Same Number of Distinct Balls", "difficulty": "Hard", "tags": ["Array", "Math", "Dynamic Programming", "Backtracking", "Combinatorics", "Probability and Statistics"], "similar_problems": []},
    {"number": 1473, "slug": "paint-house-iii", "title": "Paint House III", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "number-of-distinct-roll-sequences", "title": "Number of Distinct Roll Sequences", "difficulty": "Hard"}, {"slug": "paint-house-iv", "title": "Paint House IV", "difficulty": "Medium"}]},
    {"number": 1477, "slug": "find-two-non-overlapping-sub-arrays-each-with-target-sum", "title": "Find Two Non-overlapping Sub-arrays Each With Target Sum", "difficulty": "Medium", "tags": ["Array", "Hash Table", "Binary Search", "Dynamic Programming", "Sliding Window"], "similar_problems": [{"slug": "find-subarrays-with-equal-sum", "title": "Find Subarrays With Equal Sum", "difficulty": "Easy"}]},
    {"number": 1478, "slug": "allocate-mailboxes", "title": "Allocate Mailboxes", "difficulty": "Hard", "tags": ["Array", "Math", "Dynamic Programming", "Sorting"], "similar_problems": []},
    {"number": 1483, "slug": "kth-ancestor-of-a-tree-node", "title": "Kth Ancestor of a Tree Node", "difficulty": "Hard", "tags": ["Binary Search", "Dynamic Programming", "Bit Manipulation", "Tree", "Depth-First Search", "Breadth-First Search", "Design"], "similar_problems": [{"slug": "minimum-edge-weight-equilibrium-queries-in-a-tree", "title": "Minimum Edge Weight Equilibrium Queries in a Tree", "difficulty": "Hard"}]},
    {"number": 1493, "slug": "longest-subarray-of-1s-after-deleting-one-element", "title": "Longest Subarray of 1's After Deleting One Element", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Sliding Window"], "similar_problems": [{"slug": "max-consecutive-ones-iii", "title": "Max Consecutive Ones III", "difficulty": "Medium"}]},
    {"number": 1494, "slug": "parallel-courses-ii", "title": "Parallel Courses II", "difficulty": "Hard", "tags": ["Dynamic Programming", "Bit Manipulation", "Graph", "Bitmask"], "similar_problems": [{"slug": "parallel-courses", "title": "Parallel Courses", "difficulty": "Medium"}]},
    {"number": 1504, "slug": "count-submatrices-with-all-ones", "title": "Count Submatrices With All Ones", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Stack", "Matrix", "Monotonic Stack"], "similar_problems": [{"slug": "count-submatrices-with-equal-frequency-of-x-and-y", "title": "Count Submatrices With Equal Frequency of X and Y", "difficulty": "Medium"}]},
    {"number": 1510, "slug": "stone-game-iv", "title": "Stone Game IV", "difficulty": "Hard", "tags": ["Math", "Dynamic Programming", "Game Theory"], "similar_problems": [{"slug": "stone-game-v", "title": "Stone Game V", "difficulty": "Hard"}, {"slug": "stone-game-vi", "title": "Stone Game VI", "difficulty": "Medium"}, {"slug": "stone-game-vii", "title": "Stone Game VII", "difficulty": "Medium"}, {"slug": "stone-game-viii", "title": "Stone Game VIII", "difficulty": "Hard"}, {"slug": "stone-game-ix", "title": "Stone Game IX", "difficulty": "Medium"}, {"slug": "stone-removal-game", "title": "Stone Removal Game", "difficulty": "Easy"}]},
    {"number": 1524, "slug": "number-of-sub-arrays-with-odd-sum", "title": "Number of Sub-arrays With Odd Sum", "difficulty": "Medium", "tags": ["Array", "Math", "Dynamic Programming", "Prefix Sum"], "similar_problems": [{"slug": "subsequence-of-size-k-with-the-largest-even-sum", "title": "Subsequence of Size K With the Largest Even Sum", "difficulty": "Medium"}]},
    {"number": 1525, "slug": "number-of-good-ways-to-split-a-string", "title": "Number of Good Ways to Split a String", "difficulty": "Medium", "tags": ["Hash Table", "String", "Dynamic Programming", "Bit Manipulation"], "similar_problems": []},
    {"number": 1526, "slug": "minimum-number-of-increments-on-subarrays-to-form-a-target-array", "title": "Minimum Number of Increments on Subarrays to Form a Target Array", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Stack", "Greedy", "Monotonic Stack"], "similar_problems": []},
    {"number": 1531, "slug": "string-compression-ii", "title": "String Compression II", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "string-compression-iii", "title": "String Compression III", "difficulty": "Medium"}]},
    {"number": 1537, "slug": "get-the-maximum-score", "title": "Get the Maximum Score", "difficulty": "Hard", "tags": ["Array", "Two Pointers", "Dynamic Programming", "Greedy"], "similar_problems": [{"slug": "maximum-score-of-a-node-sequence", "title": "Maximum Score of a Node Sequence", "difficulty": "Hard"}]},
    {"number": 1547, "slug": "minimum-cost-to-cut-a-stick", "title": "Minimum Cost to Cut a Stick", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Sorting"], "similar_problems": [{"slug": "number-of-ways-to-divide-a-long-corridor", "title": "Number of Ways to Divide a Long Corridor", "difficulty": "Hard"}, {"slug": "divide-an-array-into-subarrays-with-minimum-cost-ii", "title": "Divide an Array Into Subarrays With Minimum Cost II", "difficulty": "Hard"}]},
    {"number": 1548, "slug": "the-most-similar-path-in-a-graph", "title": "The Most Similar Path in a Graph", "difficulty": "Hard", "tags": ["Dynamic Programming", "Graph"], "similar_problems": []},
    {"number": 1553, "slug": "minimum-number-of-days-to-eat-n-oranges", "title": "Minimum Number of Days to Eat N Oranges", "difficulty": "Hard", "tags": ["Dynamic Programming", "Memoization"], "similar_problems": []},
    {"number": 1563, "slug": "stone-game-v", "title": "Stone Game V", "difficulty": "Hard", "tags": ["Array", "Math", "Dynamic Programming", "Game Theory"], "similar_problems": [{"slug": "stone-game", "title": "Stone Game", "difficulty": "Medium"}, {"slug": "stone-game-ii", "title": "Stone Game II", "difficulty": "Medium"}, {"slug": "stone-game-iii", "title": "Stone Game III", "difficulty": "Hard"}, {"slug": "stone-game-iv", "title": "Stone Game IV", "difficulty": "Hard"}, {"slug": "stone-game-vi", "title": "Stone Game VI", "difficulty": "Medium"}, {"slug": "stone-game-vii", "title": "Stone Game VII", "difficulty": "Medium"}, {"slug": "stone-game-viii", "title": "Stone Game VIII", "difficulty": "Hard"}, {"slug": "stone-game-ix", "title": "Stone Game IX", "difficulty": "Medium"}]},
    {"number": 1567, "slug": "maximum-length-of-subarray-with-positive-product", "title": "Maximum Length of Subarray With Positive Product", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Greedy"], "similar_problems": []},
    {"number": 1569, "slug": "number-of-ways-to-reorder-array-to-get-same-bst", "title": "Number of Ways to Reorder Array to Get Same BST", "difficulty": "Hard", "tags": ["Array", "Math", "Divide and Conquer", "Dynamic Programming", "Tree", "Union Find", "Binary Search Tree", "Memoization", "Combinatorics", "Binary Tree"], "similar_problems": []},
    {"number": 1575, "slug": "count-all-possible-routes", "title": "Count All Possible Routes", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Memoization"], "similar_problems": []},
    {"number": 1578, "slug": "minimum-time-to-make-rope-colorful", "title": "Minimum Time to Make Rope Colorful", "difficulty": "Medium", "tags": ["Array", "String", "Dynamic Programming", "Greedy"], "similar_problems": []},
    {"number": 1594, "slug": "maximum-non-negative-product-in-a-matrix", "title": "Maximum Non Negative Product in a Matrix", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Matrix"], "similar_problems": []},
    {"number": 1595, "slug": "minimum-cost-to-connect-two-groups-of-points", "title": "Minimum Cost to Connect Two Groups of Points", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Bit Manipulation", "Matrix", "Bitmask"], "similar_problems": []},
    {"number": 1611, "slug": "minimum-one-bit-operations-to-make-integers-zero", "title": "Minimum One Bit Operations to Make Integers Zero", "difficulty": "Hard", "tags": ["Dynamic Programming", "Bit Manipulation", "Memoization"], "similar_problems": [{"slug": "minimum-number-of-operations-to-make-array-continuous", "title": "Minimum Number of Operations to Make Array Continuous", "difficulty": "Hard"}, {"slug": "apply-bitwise-operations-to-make-strings-equal", "title": "Apply Bitwise Operations to Make Strings Equal", "difficulty": "Medium"}]},
    {"number": 1617, "slug": "count-subtrees-with-max-distance-between-cities", "title": "Count Subtrees With Max Distance Between Cities", "difficulty": "Hard", "tags": ["Dynamic Programming", "Bit Manipulation", "Tree", "Enumeration", "Bitmask"], "similar_problems": [{"slug": "tree-diameter", "title": "Tree Diameter", "difficulty": "Medium"}]},
    {"number": 1621, "slug": "number-of-sets-of-k-non-overlapping-line-segments", "title": "Number of Sets of K Non-Overlapping Line Segments", "difficulty": "Medium", "tags": ["Math", "Dynamic Programming", "Combinatorics"], "similar_problems": []},
    {"number": 1626, "slug": "best-team-with-no-conflicts", "title": "Best Team With No Conflicts", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Sorting"], "similar_problems": []},
    {"number": 1638, "slug": "count-substrings-that-differ-by-one-character", "title": "Count Substrings That Differ by One Character", "difficulty": "Medium", "tags": ["Hash Table", "String", "Dynamic Programming", "Enumeration"], "similar_problems": [{"slug": "count-words-obtained-after-adding-a-letter", "title": "Count Words Obtained After Adding a Letter", "difficulty": "Medium"}]},
    {"number": 1639, "slug": "number-of-ways-to-form-a-target-string-given-a-dictionary", "title": "Number of Ways to Form a Target String Given a Dictionary", "difficulty": "Hard", "tags": ["Array", "String", "Dynamic Programming"], "similar_problems": []},
    {"number": 1641, "slug": "count-sorted-vowel-strings", "title": "Count Sorted Vowel Strings", "difficulty": "Medium", "tags": ["Math", "Dynamic Programming", "Combinatorics"], "similar_problems": []},
    {"number": 1643, "slug": "kth-smallest-instructions", "title": "Kth Smallest Instructions", "difficulty": "Hard", "tags": ["Array", "Math", "Dynamic Programming", "Combinatorics"], "similar_problems": []},
    {"number": 1653, "slug": "minimum-deletions-to-make-string-balanced", "title": "Minimum Deletions to Make String Balanced", "difficulty": "Medium", "tags": ["String", "Dynamic Programming", "Stack"], "similar_problems": [{"slug": "check-if-all-as-appears-before-all-bs", "title": "Check if All A's Appears Before All B's", "difficulty": "Easy"}]},
    {"number": 1654, "slug": "minimum-jumps-to-reach-home", "title": "Minimum Jumps to Reach Home", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Breadth-First Search"], "similar_problems": [{"slug": "reachable-nodes-with-restrictions", "title": "Reachable Nodes With Restrictions", "difficulty": "Medium"}, {"slug": "maximum-number-of-jumps-to-reach-the-last-index", "title": "Maximum Number of Jumps to Reach the Last Index", "difficulty": "Medium"}]},
    {"number": 1655, "slug": "distribute-repeating-integers", "title": "Distribute Repeating Integers", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Backtracking", "Bit Manipulation", "Bitmask"], "similar_problems": []},
    {"number": 1659, "slug": "maximize-grid-happiness", "title": "Maximize Grid Happiness", "difficulty": "Hard", "tags": ["Dynamic Programming", "Bit Manipulation", "Memoization", "Bitmask"], "similar_problems": []},
    {"number": 1668, "slug": "maximum-repeating-substring", "title": "Maximum Repeating Substring", "difficulty": "Easy", "tags": ["String", "Dynamic Programming", "String Matching"], "similar_problems": [{"slug": "detect-pattern-of-length-m-repeated-k-or-more-times", "title": "Detect Pattern of Length M Repeated K or More Times", "difficulty": "Easy"}, {"slug": "minimum-number-of-operations-to-make-word-k-periodic", "title": "Minimum Number of Operations to Make Word K-Periodic", "difficulty": "Medium"}]},
    {"number": 1671, "slug": "minimum-number-of-removals-to-make-mountain-array", "title": "Minimum Number of Removals to Make Mountain Array", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Dynamic Programming", "Greedy"], "similar_problems": [{"slug": "longest-increasing-subsequence", "title": "Longest Increasing Subsequence", "difficulty": "Medium"}, {"slug": "longest-mountain-in-array", "title": "Longest Mountain in Array", "difficulty": "Medium"}, {"slug": "peak-index-in-a-mountain-array", "title": "Peak Index in a Mountain Array", "difficulty": "Medium"}, {"slug": "valid-mountain-array", "title": "Valid Mountain Array", "difficulty": "Easy"}, {"slug": "find-in-mountain-array", "title": "Find in Mountain Array", "difficulty": "Hard"}, {"slug": "beautiful-towers-ii", "title": "Beautiful Towers II", "difficulty": "Medium"}, {"slug": "beautiful-towers-i", "title": "Beautiful Towers I", "difficulty": "Medium"}]},
    {"number": 1681, "slug": "minimum-incompatibility", "title": "Minimum Incompatibility", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Bit Manipulation", "Bitmask"], "similar_problems": []},
    {"number": 1682, "slug": "longest-palindromic-subsequence-ii", "title": "Longest Palindromic Subsequence II", "difficulty": "Medium", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "longest-palindromic-subsequence", "title": "Longest Palindromic Subsequence", "difficulty": "Medium"}]},
    {"number": 1687, "slug": "delivering-boxes-from-storage-to-ports", "title": "Delivering Boxes from Storage to Ports", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Segment Tree", "Queue", "Heap (Priority Queue)", "Prefix Sum", "Monotonic Queue"], "similar_problems": []},
    {"number": 1690, "slug": "stone-game-vii", "title": "Stone Game VII", "difficulty": "Medium", "tags": ["Array", "Math", "Dynamic Programming", "Game Theory"], "similar_problems": [{"slug": "stone-game", "title": "Stone Game", "difficulty": "Medium"}, {"slug": "stone-game-ii", "title": "Stone Game II", "difficulty": "Medium"}, {"slug": "stone-game-iii", "title": "Stone Game III", "difficulty": "Hard"}, {"slug": "stone-game-iv", "title": "Stone Game IV", "difficulty": "Hard"}, {"slug": "stone-game-v", "title": "Stone Game V", "difficulty": "Hard"}, {"slug": "stone-game-vi", "title": "Stone Game VI", "difficulty": "Medium"}, {"slug": "maximum-score-from-performing-multiplication-operations", "title": "Maximum Score from Performing Multiplication Operations", "difficulty": "Hard"}, {"slug": "stone-game-viii", "title": "Stone Game VIII", "difficulty": "Hard"}, {"slug": "stone-game-ix", "title": "Stone Game IX", "difficulty": "Medium"}]},
    {"number": 1691, "slug": "maximum-height-by-stacking-cuboids", "title": "Maximum Height by Stacking Cuboids ", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Sorting"], "similar_problems": [{"slug": "the-number-of-weak-characters-in-the-game", "title": "The Number of Weak Characters in the Game", "difficulty": "Medium"}, {"slug": "maximum-number-of-groups-entering-a-competition", "title": "Maximum Number of Groups Entering a Competition", "difficulty": "Medium"}]},
    {"number": 1692, "slug": "count-ways-to-distribute-candies", "title": "Count Ways to Distribute Candies", "difficulty": "Hard", "tags": ["Dynamic Programming"], "similar_problems": [{"slug": "distribute-candies-among-children-i", "title": "Distribute Candies Among Children I", "difficulty": "Easy"}, {"slug": "distribute-candies-among-children-ii", "title": "Distribute Candies Among Children II", "difficulty": "Medium"}]},
    {"number": 1696, "slug": "jump-game-vi", "title": "Jump Game VI", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Queue", "Heap (Priority Queue)", "Monotonic Queue"], "similar_problems": [{"slug": "sliding-window-maximum", "title": "Sliding Window Maximum", "difficulty": "Hard"}, {"slug": "jump-game-vii", "title": "Jump Game VII", "difficulty": "Medium"}, {"slug": "jump-game-viii", "title": "Jump Game VIII", "difficulty": "Medium"}, {"slug": "maximize-value-of-function-in-a-ball-passing-game", "title": "Maximize Value of Function in a Ball Passing Game", "difficulty": "Hard"}]},
    {"number": 1714, "slug": "sum-of-special-evenly-spaced-elements-in-array", "title": "Sum Of Special Evenly-Spaced Elements In Array", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": []},
    {"number": 1723, "slug": "find-minimum-time-to-finish-all-jobs", "title": "Find Minimum Time to Finish All Jobs", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Backtracking", "Bit Manipulation", "Bitmask"], "similar_problems": [{"slug": "minimum-number-of-work-sessions-to-finish-the-tasks", "title": "Minimum Number of Work Sessions to Finish the Tasks", "difficulty": "Medium"}, {"slug": "find-minimum-time-to-finish-all-jobs-ii", "title": "Find Minimum Time to Finish All Jobs II", "difficulty": "Medium"}]},
    {"number": 1728, "slug": "cat-and-mouse-ii", "title": "Cat and Mouse II", "difficulty": "Hard", "tags": ["Array", "Math", "Dynamic Programming", "Graph", "Topological Sort", "Memoization", "Matrix", "Game Theory"], "similar_problems": [{"slug": "escape-the-ghosts", "title": "Escape The Ghosts", "difficulty": "Medium"}, {"slug": "cat-and-mouse", "title": "Cat and Mouse", "difficulty": "Hard"}]},
    {"number": 1735, "slug": "count-ways-to-make-array-with-product", "title": "Count Ways to Make Array With Product", "difficulty": "Hard", "tags": ["Array", "Math", "Dynamic Programming", "Combinatorics", "Number Theory"], "similar_problems": [{"slug": "count-the-number-of-ideal-arrays", "title": "Count the Number of Ideal Arrays", "difficulty": "Hard"}, {"slug": "smallest-value-after-replacing-with-sum-of-prime-factors", "title": "Smallest Value After Replacing With Sum of Prime Factors", "difficulty": "Medium"}, {"slug": "closest-prime-numbers-in-range", "title": "Closest Prime Numbers in Range", "difficulty": "Medium"}]},
    {"number": 1745, "slug": "palindrome-partitioning-iv", "title": "Palindrome Partitioning IV", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "palindrome-partitioning", "title": "Palindrome Partitioning", "difficulty": "Medium"}, {"slug": "palindrome-partitioning-ii", "title": "Palindrome Partitioning II", "difficulty": "Hard"}, {"slug": "palindrome-partitioning-iii", "title": "Palindrome Partitioning III", "difficulty": "Hard"}, {"slug": "maximum-number-of-non-overlapping-palindrome-substrings", "title": "Maximum Number of Non-overlapping Palindrome Substrings", "difficulty": "Hard"}]},
    {"number": 1746, "slug": "maximum-subarray-sum-after-one-operation", "title": "Maximum Subarray Sum After One Operation", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "maximum-subarray", "title": "Maximum Subarray", "difficulty": "Medium"}]},
    {"number": 1749, "slug": "maximum-absolute-sum-of-any-subarray", "title": "Maximum Absolute Sum of Any Subarray", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "maximum-subarray", "title": "Maximum Subarray", "difficulty": "Medium"}]},
    {"number": 1751, "slug": "maximum-number-of-events-that-can-be-attended-ii", "title": "Maximum Number of Events That Can Be Attended II", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Dynamic Programming", "Sorting"], "similar_problems": [{"slug": "maximum-number-of-events-that-can-be-attended", "title": "Maximum Number of Events That Can Be Attended", "difficulty": "Medium"}, {"slug": "maximum-earnings-from-taxi", "title": "Maximum Earnings From Taxi", "difficulty": "Medium"}, {"slug": "two-best-non-overlapping-events", "title": "Two Best Non-Overlapping Events", "difficulty": "Medium"}, {"slug": "meeting-rooms-iii", "title": "Meeting Rooms III", "difficulty": "Hard"}]},
    {"number": 1755, "slug": "closest-subsequence-sum", "title": "Closest Subsequence Sum", "difficulty": "Hard", "tags": ["Array", "Two Pointers", "Dynamic Programming", "Bit Manipulation", "Sorting", "Bitmask"], "similar_problems": [{"slug": "minimize-the-difference-between-target-and-chosen-elements", "title": "Minimize the Difference Between Target and Chosen Elements", "difficulty": "Medium"}, {"slug": "partition-array-into-two-arrays-to-minimize-sum-difference", "title": "Partition Array Into Two Arrays to Minimize Sum Difference", "difficulty": "Hard"}, {"slug": "minimum-operations-to-form-subsequence-with-target-sum", "title": "Minimum Operations to Form Subsequence With Target Sum", "difficulty": "Hard"}, {"slug": "find-the-sum-of-subsequence-powers", "title": "Find the Sum of Subsequence Powers", "difficulty": "Hard"}]},
    {"number": 1770, "slug": "maximum-score-from-performing-multiplication-operations", "title": "Maximum Score from Performing Multiplication Operations", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "maximum-points-you-can-obtain-from-cards", "title": "Maximum Points You Can Obtain from Cards", "difficulty": "Medium"}, {"slug": "stone-game-vii", "title": "Stone Game VII", "difficulty": "Medium"}, {"slug": "maximum-spending-after-buying-items", "title": "Maximum Spending After Buying Items", "difficulty": "Hard"}]},
    {"number": 1771, "slug": "maximize-palindrome-length-from-subsequences", "title": "Maximize Palindrome Length From Subsequences", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "longest-palindromic-subsequence", "title": "Longest Palindromic Subsequence", "difficulty": "Medium"}]},
    {"number": 1774, "slug": "closest-dessert-cost", "title": "Closest Dessert Cost", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Backtracking"], "similar_problems": []},
    {"number": 1786, "slug": "number-of-restricted-paths-from-first-to-last-node", "title": "Number of Restricted Paths From First to Last Node", "difficulty": "Medium", "tags": ["Dynamic Programming", "Graph", "Topological Sort", "Heap (Priority Queue)", "Shortest Path"], "similar_problems": [{"slug": "all-ancestors-of-a-node-in-a-directed-acyclic-graph", "title": "All Ancestors of a Node in a Directed Acyclic Graph", "difficulty": "Medium"}, {"slug": "design-graph-with-shortest-path-calculator", "title": "Design Graph With Shortest Path Calculator", "difficulty": "Hard"}, {"slug": "minimum-cost-of-a-path-with-special-roads", "title": "Minimum Cost of a Path With Special Roads", "difficulty": "Medium"}]},
    {"number": 1787, "slug": "make-the-xor-of-all-segments-equal-to-zero", "title": "Make the XOR of All Segments Equal to Zero", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Bit Manipulation"], "similar_problems": [{"slug": "maximum-xor-score-subarray-queries", "title": "Maximum XOR Score Subarray Queries", "difficulty": "Hard"}]},
    {"number": 1799, "slug": "maximize-score-after-n-operations", "title": "Maximize Score After N Operations", "difficulty": "Hard", "tags": ["Array", "Math", "Dynamic Programming", "Backtracking", "Bit Manipulation", "Number Theory", "Bitmask"], "similar_problems": []},
    {"number": 1815, "slug": "maximum-number-of-groups-getting-fresh-donuts", "title": "Maximum Number of Groups Getting Fresh Donuts", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Bit Manipulation", "Memoization", "Bitmask"], "similar_problems": []},
    {"number": 1824, "slug": "minimum-sideway-jumps", "title": "Minimum Sideway Jumps", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Greedy"], "similar_problems": [{"slug": "frog-jump", "title": "Frog Jump", "difficulty": "Hard"}]},
    {"number": 1857, "slug": "largest-color-value-in-a-directed-graph", "title": "Largest Color Value in a Directed Graph", "difficulty": "Hard", "tags": ["Hash Table", "Dynamic Programming", "Graph", "Topological Sort", "Memoization", "Counting"], "similar_problems": []},
    {"number": 1866, "slug": "number-of-ways-to-rearrange-sticks-with-k-sticks-visible", "title": "Number of Ways to Rearrange Sticks With K Sticks Visible", "difficulty": "Hard", "tags": ["Math", "Dynamic Programming", "Combinatorics"], "similar_problems": []},
    {"number": 1871, "slug": "jump-game-vii", "title": "Jump Game VII", "difficulty": "Medium", "tags": ["String", "Dynamic Programming", "Sliding Window", "Prefix Sum"], "similar_problems": [{"slug": "jump-game-ii", "title": "Jump Game II", "difficulty": "Medium"}, {"slug": "jump-game", "title": "Jump Game", "difficulty": "Medium"}, {"slug": "jump-game-iii", "title": "Jump Game III", "difficulty": "Medium"}, {"slug": "jump-game-iv", "title": "Jump Game IV", "difficulty": "Hard"}, {"slug": "jump-game-v", "title": "Jump Game V", "difficulty": "Hard"}, {"slug": "jump-game-vi", "title": "Jump Game VI", "difficulty": "Medium"}, {"slug": "jump-game-vii", "title": "Jump Game VII", "difficulty": "Medium"}, {"slug": "jump-game-viii", "title": "Jump Game VIII", "difficulty": "Medium"}, {"slug": "count-vowel-strings-in-ranges", "title": "Count Vowel Strings in Ranges", "difficulty": "Medium"}, {"slug": "maximum-number-of-jumps-to-reach-the-last-index", "title": "Maximum Number of Jumps to Reach the Last Index", "difficulty": "Medium"}]},
    {"number": 1872, "slug": "stone-game-viii", "title": "Stone Game VIII", "difficulty": "Hard", "tags": ["Array", "Math", "Dynamic Programming", "Prefix Sum", "Game Theory"], "similar_problems": [{"slug": "stone-game", "title": "Stone Game", "difficulty": "Medium"}, {"slug": "stone-game-ii", "title": "Stone Game II", "difficulty": "Medium"}, {"slug": "stone-game-iii", "title": "Stone Game III", "difficulty": "Hard"}, {"slug": "stone-game-iv", "title": "Stone Game IV", "difficulty": "Hard"}, {"slug": "stone-game-v", "title": "Stone Game V", "difficulty": "Hard"}, {"slug": "stone-game-vi", "title": "Stone Game VI", "difficulty": "Medium"}, {"slug": "stone-game-vii", "title": "Stone Game VII", "difficulty": "Medium"}, {"slug": "stone-game-viii", "title": "Stone Game VIII", "difficulty": "Hard"}, {"slug": "stone-game-ix", "title": "Stone Game IX", "difficulty": "Medium"}]},
    {"number": 1879, "slug": "minimum-xor-sum-of-two-arrays", "title": "Minimum XOR Sum of Two Arrays", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Bit Manipulation", "Bitmask"], "similar_problems": [{"slug": "fair-distribution-of-cookies", "title": "Fair Distribution of Cookies", "difficulty": "Medium"}, {"slug": "choose-numbers-from-two-arrays-in-range", "title": "Choose Numbers From Two Arrays in Range", "difficulty": "Hard"}, {"slug": "maximum-and-sum-of-array", "title": "Maximum AND Sum of Array", "difficulty": "Hard"}]},
    {"number": 1883, "slug": "minimum-skips-to-arrive-at-meeting-on-time", "title": "Minimum Skips to Arrive at Meeting On Time", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "minimum-speed-to-arrive-on-time", "title": "Minimum Speed to Arrive on Time", "difficulty": "Medium"}, {"slug": "minimum-time-to-finish-the-race", "title": "Minimum Time to Finish the Race", "difficulty": "Hard"}]},
    {"number": 1884, "slug": "egg-drop-with-2-eggs-and-n-floors", "title": "Egg Drop With 2 Eggs and N Floors", "difficulty": "Medium", "tags": ["Math", "Dynamic Programming"], "similar_problems": [{"slug": "super-egg-drop", "title": "Super Egg Drop", "difficulty": "Hard"}]},
    {"number": 1888, "slug": "minimum-number-of-flips-to-make-the-binary-string-alternating", "title": "Minimum Number of Flips to Make the Binary String Alternating", "difficulty": "Medium", "tags": ["String", "Dynamic Programming", "Sliding Window"], "similar_problems": [{"slug": "minimum-operations-to-make-the-array-alternating", "title": "Minimum Operations to Make the Array Alternating", "difficulty": "Medium"}]},
    {"number": 1896, "slug": "minimum-cost-to-change-the-final-value-of-expression", "title": "Minimum Cost to Change the Final Value of Expression", "difficulty": "Hard", "tags": ["Math", "String", "Dynamic Programming", "Stack"], "similar_problems": []},
    {"number": 1900, "slug": "the-earliest-and-latest-rounds-where-players-compete", "title": "The Earliest and Latest Rounds Where Players Compete", "difficulty": "Hard", "tags": ["Dynamic Programming", "Memoization"], "similar_problems": []},
    {"number": 1908, "slug": "game-of-nim", "title": "Game of Nim", "difficulty": "Medium", "tags": ["Array", "Math", "Dynamic Programming", "Bit Manipulation", "Brainteaser", "Game Theory"], "similar_problems": [{"slug": "subtree-removal-game-with-fibonacci-tree", "title": "Subtree Removal Game with Fibonacci Tree", "difficulty": "Hard"}]},
    {"number": 1911, "slug": "maximum-alternating-subsequence-sum", "title": "Maximum Alternating Subsequence Sum", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "maximum-alternating-subarray-sum", "title": "Maximum Alternating Subarray Sum", "difficulty": "Medium"}, {"slug": "maximum-element-sum-of-a-complete-subset-of-indices", "title": "Maximum Element-Sum of a Complete Subset of Indices", "difficulty": "Hard"}, {"slug": "maximum-product-of-subsequences-with-an-alternating-sum-equal-to-k", "title": "Maximum Product of Subsequences With an Alternating Sum Equal to K", "difficulty": "Hard"}]},
    {"number": 1916, "slug": "count-ways-to-build-rooms-in-an-ant-colony", "title": "Count Ways to Build Rooms in an Ant Colony", "difficulty": "Hard", "tags": ["Math", "Dynamic Programming", "Tree", "Graph", "Topological Sort", "Combinatorics"], "similar_problems": [{"slug": "count-anagrams", "title": "Count Anagrams", "difficulty": "Hard"}, {"slug": "count-the-number-of-good-subsequences", "title": "Count the Number of Good Subsequences", "difficulty": "Medium"}]},
    {"number": 1928, "slug": "minimum-cost-to-reach-destination-in-time", "title": "Minimum Cost to Reach Destination in Time", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Graph"], "similar_problems": [{"slug": "maximum-cost-of-trip-with-k-highways", "title": "Maximum Cost of Trip With K Highways", "difficulty": "Hard"}, {"slug": "maximum-path-quality-of-a-graph", "title": "Maximum Path Quality of a Graph", "difficulty": "Hard"}, {"slug": "minimum-cost-to-reach-city-with-discounts", "title": "Minimum Cost to Reach City With Discounts", "difficulty": "Medium"}, {"slug": "find-minimum-time-to-reach-last-room-i", "title": "Find Minimum Time to Reach Last Room I", "difficulty": "Medium"}, {"slug": "find-minimum-time-to-reach-last-room-ii", "title": "Find Minimum Time to Reach Last Room II", "difficulty": "Medium"}, {"slug": "minimum-cost-path-with-edge-reversals", "title": "Minimum Cost Path with Edge Reversals", "difficulty": "Medium"}]},
    {"number": 1931, "slug": "painting-a-grid-with-three-different-colors", "title": "Painting a Grid With Three Different Colors", "difficulty": "Hard", "tags": ["Dynamic Programming"], "similar_problems": [{"slug": "number-of-ways-to-paint-n-3-grid", "title": "Number of Ways to Paint N × 3 Grid", "difficulty": "Hard"}]},
    {"number": 1937, "slug": "maximum-number-of-points-with-cost", "title": "Maximum Number of Points with Cost", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Matrix"], "similar_problems": [{"slug": "minimum-path-sum", "title": "Minimum Path Sum", "difficulty": "Medium"}, {"slug": "minimize-the-difference-between-target-and-chosen-elements", "title": "Minimize the Difference Between Target and Chosen Elements", "difficulty": "Medium"}]},
    {"number": 1947, "slug": "maximum-compatibility-score-sum", "title": "Maximum Compatibility Score Sum", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Backtracking", "Bit Manipulation", "Bitmask"], "similar_problems": []},
    {"number": 1955, "slug": "count-number-of-special-subsequences", "title": "Count Number of Special Subsequences", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": []},
    {"number": 1959, "slug": "minimum-total-space-wasted-with-k-resizing-operations", "title": "Minimum Total Space Wasted With K Resizing Operations", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": []},
    {"number": 1976, "slug": "number-of-ways-to-arrive-at-destination", "title": "Number of Ways to Arrive at Destination", "difficulty": "Medium", "tags": ["Dynamic Programming", "Graph", "Topological Sort", "Shortest Path"], "similar_problems": [{"slug": "all-paths-from-source-to-target", "title": "All Paths From Source to Target", "difficulty": "Medium"}, {"slug": "path-with-maximum-probability", "title": "Path with Maximum Probability", "difficulty": "Medium"}, {"slug": "second-minimum-time-to-reach-destination", "title": "Second Minimum Time to Reach Destination", "difficulty": "Hard"}]},
    {"number": 1977, "slug": "number-of-ways-to-separate-numbers", "title": "Number of Ways to Separate Numbers", "difficulty": "Hard", "tags": ["String", "Dynamic Programming", "Suffix Array"], "similar_problems": [{"slug": "decode-ways", "title": "Decode Ways", "difficulty": "Medium"}, {"slug": "decode-ways-ii", "title": "Decode Ways II", "difficulty": "Hard"}, {"slug": "restore-the-array", "title": "Restore The Array", "difficulty": "Hard"}, {"slug": "number-of-beautiful-partitions", "title": "Number of Beautiful Partitions", "difficulty": "Hard"}]},
    {"number": 1981, "slug": "minimize-the-difference-between-target-and-chosen-elements", "title": "Minimize the Difference Between Target and Chosen Elements", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Matrix"], "similar_problems": [{"slug": "partition-equal-subset-sum", "title": "Partition Equal Subset Sum", "difficulty": "Medium"}, {"slug": "closest-subsequence-sum", "title": "Closest Subsequence Sum", "difficulty": "Hard"}, {"slug": "maximum-number-of-points-with-cost", "title": "Maximum Number of Points with Cost", "difficulty": "Medium"}]},
    {"number": 1986, "slug": "minimum-number-of-work-sessions-to-finish-the-tasks", "title": "Minimum Number of Work Sessions to Finish the Tasks", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Backtracking", "Bit Manipulation", "Bitmask"], "similar_problems": [{"slug": "smallest-sufficient-team", "title": "Smallest Sufficient Team", "difficulty": "Hard"}, {"slug": "fair-distribution-of-cookies", "title": "Fair Distribution of Cookies", "difficulty": "Medium"}, {"slug": "find-minimum-time-to-finish-all-jobs", "title": "Find Minimum Time to Finish All Jobs", "difficulty": "Hard"}, {"slug": "find-minimum-time-to-finish-all-jobs-ii", "title": "Find Minimum Time to Finish All Jobs II", "difficulty": "Medium"}]},
    {"number": 1987, "slug": "number-of-unique-good-subsequences", "title": "Number of Unique Good Subsequences", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "distinct-subsequences", "title": "Distinct Subsequences", "difficulty": "Hard"}, {"slug": "distinct-subsequences-ii", "title": "Distinct Subsequences II", "difficulty": "Hard"}]},
    {"number": 1994, "slug": "the-number-of-good-subsets", "title": "The Number of Good Subsets", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Math", "Dynamic Programming", "Bit Manipulation", "Counting", "Number Theory", "Bitmask"], "similar_problems": [{"slug": "smallest-sufficient-team", "title": "Smallest Sufficient Team", "difficulty": "Hard"}, {"slug": "fair-distribution-of-cookies", "title": "Fair Distribution of Cookies", "difficulty": "Medium"}, {"slug": "number-of-ways-to-wear-different-hats-to-each-other", "title": "Number of Ways to Wear Different Hats to Each Other", "difficulty": "Hard"}]},
    {"number": 1997, "slug": "first-day-where-you-have-been-in-all-the-rooms", "title": "First Day Where You Have Been in All the Rooms", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": []},
    {"number": 2002, "slug": "maximum-product-of-the-length-of-two-palindromic-subsequences", "title": "Maximum Product of the Length of Two Palindromic Subsequences", "difficulty": "Medium", "tags": ["String", "Dynamic Programming", "Backtracking", "Bit Manipulation", "Bitmask"], "similar_problems": [{"slug": "valid-palindrome", "title": "Valid Palindrome", "difficulty": "Easy"}, {"slug": "longest-palindromic-subsequence", "title": "Longest Palindromic Subsequence", "difficulty": "Medium"}, {"slug": "maximum-product-of-the-length-of-two-palindromic-substrings", "title": "Maximum Product of the Length of Two Palindromic Substrings", "difficulty": "Hard"}, {"slug": "maximum-points-in-an-archery-competition", "title": "Maximum Points in an Archery Competition", "difficulty": "Medium"}]},
    {"number": 2003, "slug": "smallest-missing-genetic-value-in-each-subtree", "title": "Smallest Missing Genetic Value in Each Subtree", "difficulty": "Hard", "tags": ["Dynamic Programming", "Tree", "Depth-First Search", "Union Find"], "similar_problems": []},
    {"number": 2005, "slug": "subtree-removal-game-with-fibonacci-tree", "title": "Subtree Removal Game with Fibonacci Tree", "difficulty": "Hard", "tags": ["Math", "Dynamic Programming", "Tree", "Binary Tree", "Game Theory"], "similar_problems": [{"slug": "game-of-nim", "title": "Game of Nim", "difficulty": "Medium"}]},
    {"number": 2008, "slug": "maximum-earnings-from-taxi", "title": "Maximum Earnings From Taxi", "difficulty": "Medium", "tags": ["Array", "Hash Table", "Binary Search", "Dynamic Programming", "Sorting"], "similar_problems": [{"slug": "maximum-profit-in-job-scheduling", "title": "Maximum Profit in Job Scheduling", "difficulty": "Hard"}, {"slug": "maximum-number-of-events-that-can-be-attended", "title": "Maximum Number of Events That Can Be Attended", "difficulty": "Medium"}, {"slug": "maximum-number-of-events-that-can-be-attended-ii", "title": "Maximum Number of Events That Can Be Attended II", "difficulty": "Hard"}]},
    {"number": 2019, "slug": "the-score-of-students-solving-math-expression", "title": "The Score of Students Solving Math Expression", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Math", "String", "Dynamic Programming", "Stack", "Memoization"], "similar_problems": [{"slug": "basic-calculator", "title": "Basic Calculator", "difficulty": "Hard"}, {"slug": "different-ways-to-add-parentheses", "title": "Different Ways to Add Parentheses", "difficulty": "Medium"}]},
    {"number": 2035, "slug": "partition-array-into-two-arrays-to-minimize-sum-difference", "title": "Partition Array Into Two Arrays to Minimize Sum Difference", "difficulty": "Hard", "tags": ["Array", "Two Pointers", "Binary Search", "Dynamic Programming", "Bit Manipulation", "Ordered Set", "Bitmask"], "similar_problems": [{"slug": "partition-equal-subset-sum", "title": "Partition Equal Subset Sum", "difficulty": "Medium"}, {"slug": "split-array-with-same-average", "title": "Split Array With Same Average", "difficulty": "Hard"}, {"slug": "tallest-billboard", "title": "Tallest Billboard", "difficulty": "Hard"}, {"slug": "last-stone-weight-ii", "title": "Last Stone Weight II", "difficulty": "Medium"}, {"slug": "fair-distribution-of-cookies", "title": "Fair Distribution of Cookies", "difficulty": "Medium"}, {"slug": "closest-subsequence-sum", "title": "Closest Subsequence Sum", "difficulty": "Hard"}, {"slug": "number-of-ways-to-split-array", "title": "Number of Ways to Split Array", "difficulty": "Medium"}, {"slug": "minimum-sum-of-squared-difference", "title": "Minimum Sum of Squared Difference", "difficulty": "Medium"}, {"slug": "split-with-minimum-sum", "title": "Split With Minimum Sum", "difficulty": "Easy"}]},
    {"number": 2036, "slug": "maximum-alternating-subarray-sum", "title": "Maximum Alternating Subarray Sum", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "maximum-alternating-subsequence-sum", "title": "Maximum Alternating Subsequence Sum", "difficulty": "Medium"}]},
    {"number": 2050, "slug": "parallel-courses-iii", "title": "Parallel Courses III", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Graph", "Topological Sort"], "similar_problems": [{"slug": "course-schedule-iii", "title": "Course Schedule III", "difficulty": "Hard"}, {"slug": "parallel-courses", "title": "Parallel Courses", "difficulty": "Medium"}, {"slug": "single-threaded-cpu", "title": "Single-Threaded CPU", "difficulty": "Medium"}, {"slug": "process-tasks-using-servers", "title": "Process Tasks Using Servers", "difficulty": "Medium"}, {"slug": "maximum-employees-to-be-invited-to-a-meeting", "title": "Maximum Employees to Be Invited to a Meeting", "difficulty": "Hard"}]},
    {"number": 2052, "slug": "minimum-cost-to-separate-sentence-into-rows", "title": "Minimum Cost to Separate Sentence Into Rows", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "sentence-screen-fitting", "title": "Sentence Screen Fitting", "difficulty": "Medium"}]},
    {"number": 2054, "slug": "two-best-non-overlapping-events", "title": "Two Best Non-Overlapping Events", "difficulty": "Medium", "tags": ["Array", "Binary Search", "Dynamic Programming", "Sorting", "Heap (Priority Queue)"], "similar_problems": [{"slug": "maximum-profit-in-job-scheduling", "title": "Maximum Profit in Job Scheduling", "difficulty": "Hard"}, {"slug": "maximum-number-of-events-that-can-be-attended-ii", "title": "Maximum Number of Events That Can Be Attended II", "difficulty": "Hard"}, {"slug": "maximize-win-from-two-segments", "title": "Maximize Win From Two Segments", "difficulty": "Medium"}, {"slug": "maximum-score-of-non-overlapping-intervals", "title": "Maximum Score of Non-overlapping Intervals", "difficulty": "Hard"}]},
    {"number": 2060, "slug": "check-if-an-original-string-exists-given-two-encoded-strings", "title": "Check if an Original String Exists Given Two Encoded Strings", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "valid-word-abbreviation", "title": "Valid Word Abbreviation", "difficulty": "Easy"}, {"slug": "check-if-two-string-arrays-are-equivalent", "title": "Check If Two String Arrays are Equivalent", "difficulty": "Easy"}]},
    {"number": 2063, "slug": "vowels-of-all-substrings", "title": "Vowels of All Substrings", "difficulty": "Medium", "tags": ["Math", "String", "Dynamic Programming", "Combinatorics"], "similar_problems": [{"slug": "number-of-substrings-containing-all-three-characters", "title": "Number of Substrings Containing All Three Characters", "difficulty": "Medium"}, {"slug": "total-appeal-of-a-string", "title": "Total Appeal of A String", "difficulty": "Hard"}]},
    {"number": 2086, "slug": "minimum-number-of-food-buckets-to-feed-the-hamsters", "title": "Minimum Number of Food Buckets to Feed the Hamsters", "difficulty": "Medium", "tags": ["String", "Dynamic Programming", "Greedy"], "similar_problems": [{"slug": "maximum-number-of-people-that-can-be-caught-in-tag", "title": "Maximum Number of People That Can Be Caught in Tag", "difficulty": "Medium"}, {"slug": "brightest-position-on-street", "title": "Brightest Position on Street", "difficulty": "Medium"}]},
    {"number": 2088, "slug": "count-fertile-pyramids-in-a-land", "title": "Count Fertile Pyramids in a Land", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Matrix"], "similar_problems": [{"slug": "count-square-submatrices-with-all-ones", "title": "Count Square Submatrices with All Ones", "difficulty": "Medium"}, {"slug": "get-biggest-three-rhombus-sums-in-a-grid", "title": "Get Biggest Three Rhombus Sums in a Grid", "difficulty": "Medium"}]},
    {"number": 2100, "slug": "find-good-days-to-rob-the-bank", "title": "Find Good Days to Rob the Bank", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Prefix Sum"], "similar_problems": [{"slug": "non-decreasing-array", "title": "Non-decreasing Array", "difficulty": "Medium"}, {"slug": "longest-mountain-in-array", "title": "Longest Mountain in Array", "difficulty": "Medium"}, {"slug": "find-in-mountain-array", "title": "Find in Mountain Array", "difficulty": "Hard"}, {"slug": "maximum-ascending-subarray-sum", "title": "Maximum Ascending Subarray Sum", "difficulty": "Easy"}, {"slug": "find-all-good-indices", "title": "Find All Good Indices", "difficulty": "Medium"}]},
    {"number": 2110, "slug": "number-of-smooth-descent-periods-of-a-stock", "title": "Number of Smooth Descent Periods of a Stock", "difficulty": "Medium", "tags": ["Array", "Math", "Dynamic Programming"], "similar_problems": [{"slug": "subarray-product-less-than-k", "title": "Subarray Product Less Than K", "difficulty": "Medium"}, {"slug": "number-of-valid-subarrays", "title": "Number of Valid Subarrays", "difficulty": "Hard"}, {"slug": "number-of-zero-filled-subarrays", "title": "Number of Zero-Filled Subarrays", "difficulty": "Medium"}]},
    {"number": 2140, "slug": "solving-questions-with-brainpower", "title": "Solving Questions With Brainpower", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "house-robber", "title": "House Robber", "difficulty": "Medium"}, {"slug": "frog-jump", "title": "Frog Jump", "difficulty": "Hard"}]},
    {"number": 2143, "slug": "choose-numbers-from-two-arrays-in-range", "title": "Choose Numbers From Two Arrays in Range", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "intersection-of-two-arrays", "title": "Intersection of Two Arrays", "difficulty": "Easy"}, {"slug": "intersection-of-two-arrays-ii", "title": "Intersection of Two Arrays II", "difficulty": "Easy"}, {"slug": "minimum-xor-sum-of-two-arrays", "title": "Minimum XOR Sum of Two Arrays", "difficulty": "Hard"}, {"slug": "minimize-product-sum-of-two-arrays", "title": "Minimize Product Sum of Two Arrays", "difficulty": "Medium"}]},
    {"number": 2147, "slug": "number-of-ways-to-divide-a-long-corridor", "title": "Number of Ways to Divide a Long Corridor", "difficulty": "Hard", "tags": ["Math", "String", "Dynamic Programming"], "similar_problems": [{"slug": "decode-ways-ii", "title": "Decode Ways II", "difficulty": "Hard"}, {"slug": "minimum-cost-to-cut-a-stick", "title": "Minimum Cost to Cut a Stick", "difficulty": "Hard"}, {"slug": "ways-to-split-array-into-three-subarrays", "title": "Ways to Split Array Into Three Subarrays", "difficulty": "Medium"}]},
    {"number": 2152, "slug": "minimum-number-of-lines-to-cover-points", "title": "Minimum Number of Lines to Cover Points", "difficulty": "Medium", "tags": ["Array", "Hash Table", "Math", "Dynamic Programming", "Backtracking", "Bit Manipulation", "Geometry", "Bitmask"], "similar_problems": [{"slug": "max-points-on-a-line", "title": "Max Points on a Line", "difficulty": "Hard"}, {"slug": "min-cost-to-connect-all-points", "title": "Min Cost to Connect All Points", "difficulty": "Medium"}, {"slug": "minimum-lines-to-represent-a-line-chart", "title": "Minimum Lines to Represent a Line Chart", "difficulty": "Medium"}]},
    {"number": 2163, "slug": "minimum-difference-in-sums-after-removal-of-elements", "title": "Minimum Difference in Sums After Removal of Elements", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Heap (Priority Queue)"], "similar_problems": [{"slug": "product-of-array-except-self", "title": "Product of Array Except Self", "difficulty": "Medium"}, {"slug": "find-subsequence-of-length-k-with-the-largest-sum", "title": "Find Subsequence of Length K With the Largest Sum", "difficulty": "Easy"}, {"slug": "find-minimum-cost-to-remove-array-elements", "title": "Find Minimum Cost to Remove Array Elements", "difficulty": "Medium"}]},
    {"number": 2167, "slug": "minimum-time-to-remove-all-cars-containing-illegal-goods", "title": "Minimum Time to Remove All Cars Containing Illegal Goods", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "minimum-number-of-k-consecutive-bit-flips", "title": "Minimum Number of K Consecutive Bit Flips", "difficulty": "Hard"}]},
    {"number": 2172, "slug": "maximum-and-sum-of-array", "title": "Maximum AND Sum of Array", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Bit Manipulation", "Bitmask"], "similar_problems": [{"slug": "minimum-xor-sum-of-two-arrays", "title": "Minimum XOR Sum of Two Arrays", "difficulty": "Hard"}]},
    {"number": 2184, "slug": "number-of-ways-to-build-sturdy-brick-wall", "title": "Number of Ways to Build Sturdy Brick Wall", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Bit Manipulation", "Bitmask"], "similar_problems": [{"slug": "brick-wall", "title": "Brick Wall", "difficulty": "Medium"}, {"slug": "bricks-falling-when-hit", "title": "Bricks Falling When Hit", "difficulty": "Hard"}, {"slug": "minimum-time-to-kill-all-monsters", "title": "Minimum Time to Kill All Monsters", "difficulty": "Hard"}]},
    {"number": 2188, "slug": "minimum-time-to-finish-the-race", "title": "Minimum Time to Finish the Race", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "minimum-skips-to-arrive-at-meeting-on-time", "title": "Minimum Skips to Arrive at Meeting On Time", "difficulty": "Hard"}]},
    {"number": 2189, "slug": "number-of-ways-to-build-house-of-cards", "title": "Number of Ways to Build House of Cards", "difficulty": "Medium", "tags": ["Math", "Dynamic Programming"], "similar_problems": [{"slug": "champagne-tower", "title": "Champagne Tower", "difficulty": "Medium"}]},
    {"number": 2209, "slug": "minimum-white-tiles-after-covering-with-carpets", "title": "Minimum White Tiles After Covering With Carpets", "difficulty": "Hard", "tags": ["String", "Dynamic Programming", "Prefix Sum"], "similar_problems": [{"slug": "edit-distance", "title": "Edit Distance", "difficulty": "Medium"}]},
    {"number": 2218, "slug": "maximum-value-of-k-coins-from-piles", "title": "Maximum Value of K Coins From Piles", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Prefix Sum"], "similar_problems": [{"slug": "coin-change", "title": "Coin Change", "difficulty": "Medium"}, {"slug": "coin-change-ii", "title": "Coin Change II", "difficulty": "Medium"}]},
    {"number": 2222, "slug": "number-of-ways-to-select-buildings", "title": "Number of Ways to Select Buildings", "difficulty": "Medium", "tags": ["String", "Dynamic Programming", "Prefix Sum"], "similar_problems": []},
    {"number": 2247, "slug": "maximum-cost-of-trip-with-k-highways", "title": "Maximum Cost of Trip With K Highways", "difficulty": "Hard", "tags": ["Dynamic Programming", "Bit Manipulation", "Graph", "Bitmask"], "similar_problems": [{"slug": "minimum-cost-to-reach-destination-in-time", "title": "Minimum Cost to Reach Destination in Time", "difficulty": "Hard"}, {"slug": "minimum-cost-to-reach-city-with-discounts", "title": "Minimum Cost to Reach City With Discounts", "difficulty": "Medium"}]},
    {"number": 2262, "slug": "total-appeal-of-a-string", "title": "Total Appeal of A String", "difficulty": "Hard", "tags": ["Hash Table", "String", "Dynamic Programming"], "similar_problems": [{"slug": "count-unique-characters-of-all-substrings-of-a-given-string", "title": "Count Unique Characters of All Substrings of a Given String", "difficulty": "Hard"}, {"slug": "count-vowel-substrings-of-a-string", "title": "Count Vowel Substrings of a String", "difficulty": "Easy"}, {"slug": "vowels-of-all-substrings", "title": "Vowels of All Substrings", "difficulty": "Medium"}, {"slug": "find-the-median-of-the-uniqueness-array", "title": "Find the Median of the Uniqueness Array", "difficulty": "Hard"}]},
    {"number": 2263, "slug": "make-array-non-decreasing-or-non-increasing", "title": "Make Array Non-decreasing or Non-increasing", "difficulty": "Hard", "tags": ["Dynamic Programming", "Greedy"], "similar_problems": [{"slug": "non-decreasing-array", "title": "Non-decreasing Array", "difficulty": "Medium"}, {"slug": "make-array-strictly-increasing", "title": "Make Array Strictly Increasing", "difficulty": "Hard"}, {"slug": "minimum-operations-to-make-the-array-increasing", "title": "Minimum Operations to Make the Array Increasing", "difficulty": "Easy"}]},
    {"number": 2266, "slug": "count-number-of-texts", "title": "Count Number of Texts", "difficulty": "Medium", "tags": ["Hash Table", "Math", "String", "Dynamic Programming"], "similar_problems": [{"slug": "letter-combinations-of-a-phone-number", "title": "Letter Combinations of a Phone Number", "difficulty": "Medium"}, {"slug": "decode-ways", "title": "Decode Ways", "difficulty": "Medium"}]},
    {"number": 2267, "slug": "check-if-there-is-a-valid-parentheses-string-path", "title": " Check if There Is a Valid Parentheses String Path", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Matrix"], "similar_problems": [{"slug": "check-if-there-is-a-valid-path-in-a-grid", "title": "Check if There is a Valid Path in a Grid", "difficulty": "Medium"}, {"slug": "check-if-a-parentheses-string-can-be-valid", "title": "Check if a Parentheses String Can Be Valid", "difficulty": "Medium"}]},
    {"number": 2272, "slug": "substring-with-largest-variance", "title": "Substring With Largest Variance", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "maximum-subarray", "title": "Maximum Subarray", "difficulty": "Medium"}]},
    {"number": 2291, "slug": "maximum-profit-from-trading-stocks", "title": "Maximum Profit From Trading Stocks", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "best-time-to-buy-and-sell-stock", "title": "Best Time to Buy and Sell Stock", "difficulty": "Easy"}, {"slug": "best-time-to-buy-and-sell-stock-ii", "title": "Best Time to Buy and Sell Stock II", "difficulty": "Medium"}, {"slug": "best-time-to-buy-and-sell-stock-iii", "title": "Best Time to Buy and Sell Stock III", "difficulty": "Hard"}, {"slug": "best-time-to-buy-and-sell-stock-iv", "title": "Best Time to Buy and Sell Stock IV", "difficulty": "Hard"}]},
    {"number": 2297, "slug": "jump-game-viii", "title": "Jump Game VIII", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Stack", "Graph", "Monotonic Stack", "Shortest Path"], "similar_problems": [{"slug": "jump-game-ii", "title": "Jump Game II", "difficulty": "Medium"}, {"slug": "jump-game", "title": "Jump Game", "difficulty": "Medium"}, {"slug": "jump-game-iii", "title": "Jump Game III", "difficulty": "Medium"}, {"slug": "jump-game-iv", "title": "Jump Game IV", "difficulty": "Hard"}, {"slug": "jump-game-v", "title": "Jump Game V", "difficulty": "Hard"}, {"slug": "jump-game-vi", "title": "Jump Game VI", "difficulty": "Medium"}, {"slug": "jump-game-vii", "title": "Jump Game VII", "difficulty": "Medium"}, {"slug": "jump-game-viii", "title": "Jump Game VIII", "difficulty": "Medium"}]},
    {"number": 2304, "slug": "minimum-path-cost-in-a-grid", "title": "Minimum Path Cost in a Grid", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Matrix"], "similar_problems": [{"slug": "unique-paths", "title": "Unique Paths", "difficulty": "Medium"}, {"slug": "unique-paths-ii", "title": "Unique Paths II", "difficulty": "Medium"}, {"slug": "minimum-path-sum", "title": "Minimum Path Sum", "difficulty": "Medium"}, {"slug": "dungeon-game", "title": "Dungeon Game", "difficulty": "Hard"}, {"slug": "paint-house", "title": "Paint House", "difficulty": "Medium"}]},
    {"number": 2305, "slug": "fair-distribution-of-cookies", "title": "Fair Distribution of Cookies", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Backtracking", "Bit Manipulation", "Bitmask"], "similar_problems": [{"slug": "split-array-largest-sum", "title": "Split Array Largest Sum", "difficulty": "Hard"}, {"slug": "split-array-with-equal-sum", "title": "Split Array with Equal Sum", "difficulty": "Hard"}, {"slug": "partition-to-k-equal-sum-subsets", "title": "Partition to K Equal Sum Subsets", "difficulty": "Medium"}, {"slug": "minimum-xor-sum-of-two-arrays", "title": "Minimum XOR Sum of Two Arrays", "difficulty": "Hard"}, {"slug": "the-number-of-good-subsets", "title": "The Number of Good Subsets", "difficulty": "Hard"}, {"slug": "minimum-number-of-work-sessions-to-finish-the-tasks", "title": "Minimum Number of Work Sessions to Finish the Tasks", "difficulty": "Medium"}, {"slug": "partition-array-into-two-arrays-to-minimize-sum-difference", "title": "Partition Array Into Two Arrays to Minimize Sum Difference", "difficulty": "Hard"}, {"slug": "maximum-rows-covered-by-columns", "title": "Maximum Rows Covered by Columns", "difficulty": "Medium"}, {"slug": "distribute-money-to-maximum-children", "title": "Distribute Money to Maximum Children", "difficulty": "Easy"}]},
    {"number": 2310, "slug": "sum-of-numbers-with-units-digit-k", "title": "Sum of Numbers With Units Digit K", "difficulty": "Medium", "tags": ["Math", "Dynamic Programming", "Greedy", "Enumeration"], "similar_problems": [{"slug": "digit-count-in-range", "title": "Digit Count in Range", "difficulty": "Hard"}, {"slug": "count-integers-with-even-digit-sum", "title": "Count Integers With Even Digit Sum", "difficulty": "Easy"}, {"slug": "sum-of-number-and-its-reverse", "title": "Sum of Number and Its Reverse", "difficulty": "Medium"}]},
    {"number": 2311, "slug": "longest-binary-subsequence-less-than-or-equal-to-k", "title": "Longest Binary Subsequence Less Than or Equal to K", "difficulty": "Medium", "tags": ["String", "Dynamic Programming", "Greedy", "Memoization"], "similar_problems": [{"slug": "maximum-binary-string-after-change", "title": "Maximum Binary String After Change", "difficulty": "Medium"}]},
    {"number": 2312, "slug": "selling-pieces-of-wood", "title": "Selling Pieces of Wood", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Memoization"], "similar_problems": [{"slug": "tiling-a-rectangle-with-the-fewest-squares", "title": "Tiling a Rectangle with the Fewest Squares", "difficulty": "Hard"}, {"slug": "number-of-ways-of-cutting-a-pizza", "title": "Number of Ways of Cutting a Pizza", "difficulty": "Hard"}]},
    {"number": 2313, "slug": "minimum-flips-in-binary-tree-to-get-result", "title": "Minimum Flips in Binary Tree to Get Result", "difficulty": "Hard", "tags": ["Dynamic Programming", "Tree", "Depth-First Search", "Binary Tree"], "similar_problems": [{"slug": "check-if-two-expression-trees-are-equivalent", "title": "Check If Two Expression Trees are Equivalent", "difficulty": "Medium"}, {"slug": "design-an-expression-tree-with-evaluate-function", "title": "Design an Expression Tree With Evaluate Function", "difficulty": "Medium"}, {"slug": "evaluate-boolean-binary-tree", "title": "Evaluate Boolean Binary Tree", "difficulty": "Easy"}]},
    {"number": 2318, "slug": "number-of-distinct-roll-sequences", "title": "Number of Distinct Roll Sequences", "difficulty": "Hard", "tags": ["Dynamic Programming", "Memoization"], "similar_problems": [{"slug": "dice-roll-simulation", "title": "Dice Roll Simulation", "difficulty": "Hard"}, {"slug": "paint-house-iii", "title": "Paint House III", "difficulty": "Hard"}]},
    {"number": 2320, "slug": "count-number-of-ways-to-place-houses", "title": "Count Number of Ways to Place Houses", "difficulty": "Medium", "tags": ["Dynamic Programming"], "similar_problems": [{"slug": "climbing-stairs", "title": "Climbing Stairs", "difficulty": "Easy"}, {"slug": "house-robber", "title": "House Robber", "difficulty": "Medium"}]},
    {"number": 2321, "slug": "maximum-score-of-spliced-array", "title": "Maximum Score Of Spliced Array", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "maximum-subarray", "title": "Maximum Subarray", "difficulty": "Medium"}]},
    {"number": 2327, "slug": "number-of-people-aware-of-a-secret", "title": "Number of People Aware of a Secret", "difficulty": "Medium", "tags": ["Dynamic Programming", "Queue", "Simulation"], "similar_problems": []},
    {"number": 2328, "slug": "number-of-increasing-paths-in-a-grid", "title": "Number of Increasing Paths in a Grid", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Depth-First Search", "Breadth-First Search", "Graph", "Topological Sort", "Memoization", "Matrix"], "similar_problems": [{"slug": "longest-increasing-path-in-a-matrix", "title": "Longest Increasing Path in a Matrix", "difficulty": "Hard"}, {"slug": "all-paths-from-source-to-target", "title": "All Paths From Source to Target", "difficulty": "Medium"}, {"slug": "maximum-strictly-increasing-cells-in-a-matrix", "title": "Maximum Strictly Increasing Cells in a Matrix", "difficulty": "Hard"}]},
    {"number": 2338, "slug": "count-the-number-of-ideal-arrays", "title": "Count the Number of Ideal Arrays", "difficulty": "Hard", "tags": ["Math", "Dynamic Programming", "Combinatorics", "Number Theory"], "similar_problems": [{"slug": "count-ways-to-make-array-with-product", "title": "Count Ways to Make Array With Product", "difficulty": "Hard"}, {"slug": "count-the-number-of-beautiful-subarrays", "title": "Count the Number of Beautiful Subarrays", "difficulty": "Medium"}]},
    {"number": 2355, "slug": "maximum-number-of-books-you-can-take", "title": "Maximum Number of Books You Can Take", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Stack", "Monotonic Stack"], "similar_problems": [{"slug": "longest-increasing-subsequence", "title": "Longest Increasing Subsequence", "difficulty": "Medium"}, {"slug": "maximum-ascending-subarray-sum", "title": "Maximum Ascending Subarray Sum", "difficulty": "Easy"}, {"slug": "beautiful-towers-ii", "title": "Beautiful Towers II", "difficulty": "Medium"}, {"slug": "beautiful-towers-i", "title": "Beautiful Towers I", "difficulty": "Medium"}]},
    {"number": 2361, "slug": "minimum-costs-using-the-train-line", "title": "Minimum Costs Using the Train Line", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "bus-routes", "title": "Bus Routes", "difficulty": "Hard"}, {"slug": "distance-between-bus-stops", "title": "Distance Between Bus Stops", "difficulty": "Easy"}]},
    {"number": 2369, "slug": "check-if-there-is-a-valid-partition-for-the-array", "title": "Check if There is a Valid Partition For The Array", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "count-the-number-of-good-partitions", "title": "Count the Number of Good Partitions", "difficulty": "Hard"}]},
    {"number": 2370, "slug": "longest-ideal-subsequence", "title": "Longest Ideal Subsequence", "difficulty": "Medium", "tags": ["Hash Table", "String", "Dynamic Programming"], "similar_problems": [{"slug": "longest-increasing-subsequence", "title": "Longest Increasing Subsequence", "difficulty": "Medium"}]},
    {"number": 2376, "slug": "count-special-integers", "title": "Count Special Integers", "difficulty": "Hard", "tags": ["Math", "Dynamic Programming"], "similar_problems": [{"slug": "count-numbers-with-unique-digits", "title": "Count Numbers with Unique Digits", "difficulty": "Medium"}, {"slug": "k-th-smallest-in-lexicographical-order", "title": "K-th Smallest in Lexicographical Order", "difficulty": "Hard"}]},
    {"number": 2378, "slug": "choose-edges-to-maximize-score-in-a-tree", "title": "Choose Edges to Maximize Score in a Tree", "difficulty": "Medium", "tags": ["Dynamic Programming", "Tree", "Depth-First Search"], "similar_problems": [{"slug": "binary-tree-cameras", "title": "Binary Tree Cameras", "difficulty": "Hard"}, {"slug": "longest-path-with-different-adjacent-characters", "title": "Longest Path With Different Adjacent Characters", "difficulty": "Hard"}]},
    {"number": 2380, "slug": "time-needed-to-rearrange-a-binary-string", "title": "Time Needed to Rearrange a Binary String", "difficulty": "Medium", "tags": ["String", "Dynamic Programming", "Simulation"], "similar_problems": [{"slug": "minimum-swaps-to-group-all-1s-together", "title": "Minimum Swaps to Group All 1's Together", "difficulty": "Medium"}, {"slug": "minimum-swaps-to-group-all-1s-together-ii", "title": "Minimum Swaps to Group All 1's Together II", "difficulty": "Medium"}]},
    {"number": 2393, "slug": "count-strictly-increasing-subarrays", "title": "Count Strictly Increasing Subarrays", "difficulty": "Medium", "tags": ["Array", "Math", "Dynamic Programming"], "similar_problems": [{"slug": "maximum-ascending-subarray-sum", "title": "Maximum Ascending Subarray Sum", "difficulty": "Easy"}]},
    {"number": 2400, "slug": "number-of-ways-to-reach-a-position-after-exactly-k-steps", "title": "Number of Ways to Reach a Position After Exactly k Steps", "difficulty": "Medium", "tags": ["Math", "Dynamic Programming", "Combinatorics"], "similar_problems": [{"slug": "unique-paths", "title": "Unique Paths", "difficulty": "Medium"}, {"slug": "climbing-stairs", "title": "Climbing Stairs", "difficulty": "Easy"}, {"slug": "reach-a-number", "title": "Reach a Number", "difficulty": "Medium"}, {"slug": "reaching-points", "title": "Reaching Points", "difficulty": "Hard"}, {"slug": "number-of-ways-to-stay-in-the-same-place-after-some-steps", "title": "Number of Ways to Stay in the Same Place After Some Steps", "difficulty": "Hard"}]},
    {"number": 2403, "slug": "minimum-time-to-kill-all-monsters", "title": "Minimum Time to Kill All Monsters", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Bit Manipulation", "Bitmask"], "similar_problems": [{"slug": "closest-room", "title": "Closest Room", "difficulty": "Hard"}, {"slug": "eliminate-maximum-number-of-monsters", "title": "Eliminate Maximum Number of Monsters", "difficulty": "Medium"}, {"slug": "number-of-ways-to-build-sturdy-brick-wall", "title": "Number of Ways to Build Sturdy Brick Wall", "difficulty": "Medium"}]},
    {"number": 2407, "slug": "longest-increasing-subsequence-ii", "title": "Longest Increasing Subsequence II", "difficulty": "Hard", "tags": ["Array", "Divide and Conquer", "Dynamic Programming", "Binary Indexed Tree", "Segment Tree", "Queue", "Monotonic Queue"], "similar_problems": [{"slug": "longest-increasing-subsequence", "title": "Longest Increasing Subsequence", "difficulty": "Medium"}, {"slug": "number-of-longest-increasing-subsequence", "title": "Number of Longest Increasing Subsequence", "difficulty": "Medium"}, {"slug": "longest-continuous-increasing-subsequence", "title": "Longest Continuous Increasing Subsequence", "difficulty": "Easy"}, {"slug": "longest-substring-of-one-repeating-character", "title": "Longest Substring of One Repeating Character", "difficulty": "Hard"}, {"slug": "booking-concert-tickets-in-groups", "title": "Booking Concert Tickets in Groups", "difficulty": "Hard"}, {"slug": "longest-subsequence-with-decreasing-adjacent-difference", "title": "Longest Subsequence With Decreasing Adjacent Difference", "difficulty": "Medium"}]},
    {"number": 2420, "slug": "find-all-good-indices", "title": "Find All Good Indices", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Prefix Sum"], "similar_problems": [{"slug": "find-good-days-to-rob-the-bank", "title": "Find Good Days to Rob the Bank", "difficulty": "Medium"}, {"slug": "abbreviating-the-product-of-a-range", "title": "Abbreviating the Product of a Range", "difficulty": "Hard"}, {"slug": "count-the-number-of-k-big-indices", "title": "Count the Number of K-Big Indices", "difficulty": "Hard"}]},
    {"number": 2430, "slug": "maximum-deletions-on-a-string", "title": "Maximum Deletions on a String", "difficulty": "Hard", "tags": ["String", "Dynamic Programming", "Rolling Hash", "String Matching", "Hash Function"], "similar_problems": [{"slug": "shortest-palindrome", "title": "Shortest Palindrome", "difficulty": "Hard"}, {"slug": "longest-happy-prefix", "title": "Longest Happy Prefix", "difficulty": "Hard"}, {"slug": "remove-all-occurrences-of-a-substring", "title": "Remove All Occurrences of a Substring", "difficulty": "Medium"}]},
    {"number": 2431, "slug": "maximize-total-tastiness-of-purchased-fruits", "title": "Maximize Total Tastiness of Purchased Fruits", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": []},
    {"number": 2435, "slug": "paths-in-matrix-whose-sum-is-divisible-by-k", "title": "Paths in Matrix Whose Sum Is Divisible by K", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Matrix"], "similar_problems": [{"slug": "unique-paths", "title": "Unique Paths", "difficulty": "Medium"}, {"slug": "unique-paths-ii", "title": "Unique Paths II", "difficulty": "Medium"}, {"slug": "minimum-path-sum", "title": "Minimum Path Sum", "difficulty": "Medium"}, {"slug": "dungeon-game", "title": "Dungeon Game", "difficulty": "Hard"}, {"slug": "cherry-pickup", "title": "Cherry Pickup", "difficulty": "Hard"}, {"slug": "shortest-path-in-binary-matrix", "title": "Shortest Path in Binary Matrix", "difficulty": "Medium"}, {"slug": "minimum-cost-homecoming-of-a-robot-in-a-grid", "title": "Minimum Cost Homecoming of a Robot in a Grid", "difficulty": "Medium"}, {"slug": "check-if-there-is-a-path-with-equal-number-of-0s-and-1s", "title": "Check if There is a Path With Equal Number of 0's And 1's", "difficulty": "Medium"}]},
    {"number": 2436, "slug": "minimum-split-into-subarrays-with-gcd-greater-than-one", "title": "Minimum Split Into Subarrays With GCD Greater Than One", "difficulty": "Medium", "tags": ["Array", "Math", "Dynamic Programming", "Greedy", "Number Theory"], "similar_problems": [{"slug": "minimum-subarrays-in-a-valid-split", "title": "Minimum Subarrays in a Valid Split", "difficulty": "Medium"}]},
    {"number": 2439, "slug": "minimize-maximum-of-array", "title": "Minimize Maximum of Array", "difficulty": "Medium", "tags": ["Array", "Binary Search", "Dynamic Programming", "Greedy", "Prefix Sum"], "similar_problems": [{"slug": "maximum-candies-allocated-to-k-children", "title": "Maximum Candies Allocated to K Children", "difficulty": "Medium"}, {"slug": "minimum-speed-to-arrive-on-time", "title": "Minimum Speed to Arrive on Time", "difficulty": "Medium"}, {"slug": "minimum-time-to-complete-trips", "title": "Minimum Time to Complete Trips", "difficulty": "Medium"}]},
    {"number": 2463, "slug": "minimum-total-distance-traveled", "title": "Minimum Total Distance Traveled", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Sorting"], "similar_problems": [{"slug": "capacity-to-ship-packages-within-d-days", "title": "Capacity To Ship Packages Within D Days", "difficulty": "Medium"}, {"slug": "number-of-ways-to-earn-points", "title": "Number of Ways to Earn Points", "difficulty": "Hard"}]},
    {"number": 2464, "slug": "minimum-subarrays-in-a-valid-split", "title": "Minimum Subarrays in a Valid Split", "difficulty": "Medium", "tags": ["Array", "Math", "Dynamic Programming", "Number Theory"], "similar_problems": [{"slug": "minimum-split-into-subarrays-with-gcd-greater-than-one", "title": "Minimum Split Into Subarrays With GCD Greater Than One", "difficulty": "Medium"}]},
    {"number": 2466, "slug": "count-ways-to-build-good-strings", "title": "Count Ways To Build Good Strings", "difficulty": "Medium", "tags": ["Dynamic Programming"], "similar_problems": [{"slug": "climbing-stairs", "title": "Climbing Stairs", "difficulty": "Easy"}]},
    {"number": 2472, "slug": "maximum-number-of-non-overlapping-palindrome-substrings", "title": "Maximum Number of Non-overlapping Palindrome Substrings", "difficulty": "Hard", "tags": ["Two Pointers", "String", "Dynamic Programming", "Greedy"], "similar_problems": [{"slug": "longest-palindromic-substring", "title": "Longest Palindromic Substring", "difficulty": "Medium"}, {"slug": "palindrome-partitioning", "title": "Palindrome Partitioning", "difficulty": "Medium"}, {"slug": "palindrome-partitioning-ii", "title": "Palindrome Partitioning II", "difficulty": "Hard"}, {"slug": "palindrome-partitioning-iii", "title": "Palindrome Partitioning III", "difficulty": "Hard"}, {"slug": "maximum-number-of-non-overlapping-substrings", "title": "Maximum Number of Non-Overlapping Substrings", "difficulty": "Hard"}, {"slug": "palindrome-partitioning-iv", "title": "Palindrome Partitioning IV", "difficulty": "Hard"}]},
    {"number": 2478, "slug": "number-of-beautiful-partitions", "title": "Number of Beautiful Partitions", "difficulty": "Hard", "tags": ["String", "Dynamic Programming", "Prefix Sum"], "similar_problems": [{"slug": "restore-the-array", "title": "Restore The Array", "difficulty": "Hard"}, {"slug": "number-of-ways-to-separate-numbers", "title": "Number of Ways to Separate Numbers", "difficulty": "Hard"}]},
    {"number": 2484, "slug": "count-palindromic-subsequences", "title": "Count Palindromic Subsequences", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "arithmetic-slices-ii-subsequence", "title": "Arithmetic Slices II - Subsequence", "difficulty": "Hard"}, {"slug": "count-different-palindromic-subsequences", "title": "Count Different Palindromic Subsequences", "difficulty": "Hard"}, {"slug": "unique-length-3-palindromic-subsequences", "title": "Unique Length-3 Palindromic Subsequences", "difficulty": "Medium"}]},
    {"number": 2495, "slug": "number-of-subarrays-having-even-product", "title": "Number of Subarrays Having Even Product", "difficulty": "Medium", "tags": ["Array", "Math", "Dynamic Programming"], "similar_problems": []},
    {"number": 2501, "slug": "longest-square-streak-in-an-array", "title": "Longest Square Streak in an Array", "difficulty": "Medium", "tags": ["Array", "Hash Table", "Binary Search", "Dynamic Programming", "Sorting"], "similar_problems": []},
    {"number": 2510, "slug": "check-if-there-is-a-path-with-equal-number-of-0s-and-1s", "title": "Check if There is a Path With Equal Number of 0's And 1's", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Matrix"], "similar_problems": [{"slug": "minimum-path-sum", "title": "Minimum Path Sum", "difficulty": "Medium"}, {"slug": "dungeon-game", "title": "Dungeon Game", "difficulty": "Hard"}, {"slug": "minimum-cost-homecoming-of-a-robot-in-a-grid", "title": "Minimum Cost Homecoming of a Robot in a Grid", "difficulty": "Medium"}, {"slug": "paths-in-matrix-whose-sum-is-divisible-by-k", "title": "Paths in Matrix Whose Sum Is Divisible by K", "difficulty": "Hard"}]},
    {"number": 2518, "slug": "number-of-great-partitions", "title": "Number of Great Partitions", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "palindrome-partitioning-ii", "title": "Palindrome Partitioning II", "difficulty": "Hard"}, {"slug": "partition-equal-subset-sum", "title": "Partition Equal Subset Sum", "difficulty": "Medium"}, {"slug": "find-the-punishment-number-of-an-integer", "title": "Find the Punishment Number of an Integer", "difficulty": "Medium"}, {"slug": "count-partitions-with-max-min-difference-at-most-k", "title": "Count Partitions With Max-Min Difference at Most K", "difficulty": "Medium"}]},
    {"number": 2522, "slug": "partition-string-into-substrings-with-values-at-most-k", "title": "Partition String Into Substrings With Values at Most K", "difficulty": "Medium", "tags": ["String", "Dynamic Programming", "Greedy"], "similar_problems": []},
    {"number": 2533, "slug": "number-of-good-binary-strings", "title": "Number of Good Binary Strings", "difficulty": "Medium", "tags": ["Dynamic Programming"], "similar_problems": [{"slug": "special-binary-string", "title": "Special Binary String", "difficulty": "Hard"}]},
    {"number": 2538, "slug": "difference-between-maximum-and-minimum-price-sum", "title": "Difference Between Maximum and Minimum Price Sum", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Tree", "Depth-First Search"], "similar_problems": [{"slug": "binary-tree-maximum-path-sum", "title": "Binary Tree Maximum Path Sum", "difficulty": "Hard"}]},
    {"number": 2547, "slug": "minimum-cost-to-split-an-array", "title": "Minimum Cost to Split an Array", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Dynamic Programming", "Counting"], "similar_problems": [{"slug": "coin-change", "title": "Coin Change", "difficulty": "Medium"}, {"slug": "split-array-largest-sum", "title": "Split Array Largest Sum", "difficulty": "Hard"}, {"slug": "divide-an-array-into-subarrays-with-minimum-cost-ii", "title": "Divide an Array Into Subarrays With Minimum Cost II", "difficulty": "Hard"}, {"slug": "minimum-sum-of-values-by-dividing-array", "title": "Minimum Sum of Values by Dividing Array", "difficulty": "Hard"}, {"slug": "minimum-cost-to-divide-array-into-subarrays", "title": "Minimum Cost to Divide Array Into Subarrays", "difficulty": "Hard"}]},
    {"number": 2552, "slug": "count-increasing-quadruplets", "title": "Count Increasing Quadruplets", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Binary Indexed Tree", "Enumeration", "Prefix Sum"], "similar_problems": [{"slug": "increasing-triplet-subsequence", "title": "Increasing Triplet Subsequence", "difficulty": "Medium"}, {"slug": "count-special-quadruplets", "title": "Count Special Quadruplets", "difficulty": "Easy"}, {"slug": "count-good-triplets-in-an-array", "title": "Count Good Triplets in an Array", "difficulty": "Hard"}]},
    {"number": 2556, "slug": "disconnect-path-in-a-binary-matrix-by-at-most-one-flip", "title": "Disconnect Path in a Binary Matrix by at Most One Flip", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Depth-First Search", "Breadth-First Search", "Matrix"], "similar_problems": [{"slug": "number-of-submatrices-that-sum-to-target", "title": "Number of Submatrices That Sum to Target", "difficulty": "Hard"}, {"slug": "minimum-cost-to-make-at-least-one-valid-path-in-a-grid", "title": "Minimum Cost to Make at Least One Valid Path in a Grid", "difficulty": "Hard"}, {"slug": "minimum-number-of-days-to-disconnect-island", "title": "Minimum Number of Days to Disconnect Island", "difficulty": "Hard"}, {"slug": "minimum-weighted-subgraph-with-the-required-paths", "title": "Minimum Weighted Subgraph With the Required Paths", "difficulty": "Hard"}]},
    {"number": 2560, "slug": "house-robber-iv", "title": "House Robber IV", "difficulty": "Medium", "tags": ["Array", "Binary Search", "Dynamic Programming", "Greedy"], "similar_problems": [{"slug": "container-with-most-water", "title": "Container With Most Water", "difficulty": "Medium"}, {"slug": "house-robber", "title": "House Robber", "difficulty": "Medium"}]},
    {"number": 2571, "slug": "minimum-operations-to-reduce-an-integer-to-0", "title": "Minimum Operations to Reduce an Integer to 0", "difficulty": "Medium", "tags": ["Dynamic Programming", "Greedy", "Bit Manipulation"], "similar_problems": [{"slug": "plus-one", "title": "Plus One", "difficulty": "Easy"}]},
    {"number": 2572, "slug": "count-the-number-of-square-free-subsets", "title": "Count the Number of Square-Free Subsets", "difficulty": "Medium", "tags": ["Array", "Math", "Dynamic Programming", "Bit Manipulation", "Bitmask"], "similar_problems": [{"slug": "distinct-prime-factors-of-product-of-array", "title": "Distinct Prime Factors of Product of Array", "difficulty": "Medium"}]},
    {"number": 2573, "slug": "find-the-string-with-lcp", "title": "Find the String with LCP", "difficulty": "Hard", "tags": ["Array", "String", "Dynamic Programming", "Greedy", "Union Find", "Matrix"], "similar_problems": []},
    {"number": 2581, "slug": "count-number-of-possible-root-nodes", "title": "Count Number of Possible Root Nodes", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Dynamic Programming", "Tree", "Depth-First Search"], "similar_problems": [{"slug": "closest-node-to-path-in-tree", "title": "Closest Node to Path in Tree", "difficulty": "Hard"}]},
    {"number": 2585, "slug": "number-of-ways-to-earn-points", "title": "Number of Ways to Earn Points", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "coin-change-ii", "title": "Coin Change II", "difficulty": "Medium"}, {"slug": "minimum-total-distance-traveled", "title": "Minimum Total Distance Traveled", "difficulty": "Hard"}]},
    {"number": 2597, "slug": "the-number-of-beautiful-subsets", "title": "The Number of Beautiful Subsets", "difficulty": "Medium", "tags": ["Array", "Hash Table", "Math", "Dynamic Programming", "Backtracking", "Sorting", "Combinatorics"], "similar_problems": [{"slug": "construct-the-lexicographically-largest-valid-sequence", "title": "Construct the Lexicographically Largest Valid Sequence", "difficulty": "Medium"}]},
    {"number": 2606, "slug": "find-the-substring-with-maximum-cost", "title": "Find the Substring With Maximum Cost", "difficulty": "Medium", "tags": ["Array", "Hash Table", "String", "Dynamic Programming"], "similar_problems": [{"slug": "maximum-subarray", "title": "Maximum Subarray", "difficulty": "Medium"}]},
    {"number": 2616, "slug": "minimize-the-maximum-difference-of-pairs", "title": "Minimize the Maximum Difference of Pairs", "difficulty": "Medium", "tags": ["Array", "Binary Search", "Dynamic Programming", "Greedy", "Sorting"], "similar_problems": [{"slug": "minimum-absolute-difference", "title": "Minimum Absolute Difference", "difficulty": "Easy"}, {"slug": "minimum-difference-between-largest-and-smallest-value-in-three-moves", "title": "Minimum Difference Between Largest and Smallest Value in Three Moves", "difficulty": "Medium"}]},
    {"number": 2617, "slug": "minimum-number-of-visited-cells-in-a-grid", "title": "Minimum Number of Visited Cells in a Grid", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Stack", "Breadth-First Search", "Union Find", "Heap (Priority Queue)", "Matrix", "Monotonic Stack"], "similar_problems": [{"slug": "jump-game-ii", "title": "Jump Game II", "difficulty": "Medium"}, {"slug": "jump-game", "title": "Jump Game", "difficulty": "Medium"}]},
    {"number": 2638, "slug": "count-the-number-of-k-free-subsets", "title": "Count the Number of K-Free Subsets", "difficulty": "Medium", "tags": ["Array", "Math", "Dynamic Programming", "Sorting", "Combinatorics"], "similar_problems": []},
    {"number": 2645, "slug": "minimum-additions-to-make-valid-string", "title": "Minimum Additions to Make Valid String", "difficulty": "Medium", "tags": ["String", "Dynamic Programming", "Stack", "Greedy"], "similar_problems": [{"slug": "merge-strings-alternately", "title": "Merge Strings Alternately", "difficulty": "Easy"}]},
    {"number": 2646, "slug": "minimize-the-total-price-of-the-trips", "title": "Minimize the Total Price of the Trips", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Tree", "Depth-First Search", "Graph"], "similar_problems": []},
    {"number": 2673, "slug": "make-costs-of-paths-equal-in-a-binary-tree", "title": "Make Costs of Paths Equal in a Binary Tree", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Greedy", "Tree", "Binary Tree"], "similar_problems": []},
    {"number": 2681, "slug": "power-of-heroes", "title": "Power of Heroes", "difficulty": "Hard", "tags": ["Array", "Math", "Dynamic Programming", "Sorting", "Prefix Sum"], "similar_problems": []},
    {"number": 2684, "slug": "maximum-number-of-moves-in-a-grid", "title": "Maximum Number of Moves in a Grid", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Matrix"], "similar_problems": []},
    {"number": 2707, "slug": "extra-characters-in-a-string", "title": "Extra Characters in a String", "difficulty": "Medium", "tags": ["Array", "Hash Table", "String", "Dynamic Programming", "Trie"], "similar_problems": [{"slug": "word-break", "title": "Word Break", "difficulty": "Medium"}]},
    {"number": 2708, "slug": "maximum-strength-of-a-group", "title": "Maximum Strength of a Group", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Backtracking", "Greedy", "Bit Manipulation", "Sorting", "Enumeration"], "similar_problems": [{"slug": "maximum-strength-of-k-disjoint-subarrays", "title": "Maximum Strength of K Disjoint Subarrays", "difficulty": "Hard"}]},
    {"number": 2712, "slug": "minimum-cost-to-make-all-characters-equal", "title": "Minimum Cost to Make All Characters Equal", "difficulty": "Medium", "tags": ["String", "Dynamic Programming", "Greedy"], "similar_problems": [{"slug": "flip-string-to-monotone-increasing", "title": "Flip String to Monotone Increasing", "difficulty": "Medium"}]},
    {"number": 2713, "slug": "maximum-strictly-increasing-cells-in-a-matrix", "title": "Maximum Strictly Increasing Cells in a Matrix", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Binary Search", "Dynamic Programming", "Memoization", "Sorting", "Matrix", "Ordered Set"], "similar_problems": [{"slug": "number-of-increasing-paths-in-a-grid", "title": "Number of Increasing Paths in a Grid", "difficulty": "Hard"}]},
    {"number": 2719, "slug": "count-of-integers", "title": "Count of Integers", "difficulty": "Hard", "tags": ["Math", "String", "Dynamic Programming"], "similar_problems": [{"slug": "count-numbers-with-non-decreasing-digits", "title": "Count Numbers with Non-Decreasing Digits ", "difficulty": "Hard"}]},
    {"number": 2741, "slug": "special-permutations", "title": "Special Permutations", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Bit Manipulation", "Bitmask"], "similar_problems": []},
    {"number": 2742, "slug": "painting-the-walls", "title": "Painting the Walls", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": []},
    {"number": 2745, "slug": "construct-the-longest-new-string", "title": "Construct the Longest New String", "difficulty": "Medium", "tags": ["Math", "Dynamic Programming", "Greedy", "Brainteaser"], "similar_problems": []},
    {"number": 2746, "slug": "decremental-string-concatenation", "title": "Decremental String Concatenation", "difficulty": "Medium", "tags": ["Array", "String", "Dynamic Programming"], "similar_problems": [{"slug": "largest-merge-of-two-strings", "title": "Largest Merge Of Two Strings", "difficulty": "Medium"}]},
    {"number": 2750, "slug": "ways-to-split-array-into-good-subarrays", "title": "Ways to Split Array Into Good Subarrays", "difficulty": "Medium", "tags": ["Array", "Math", "Dynamic Programming"], "similar_problems": [{"slug": "binary-subarrays-with-sum", "title": "Binary Subarrays With Sum", "difficulty": "Medium"}, {"slug": "count-number-of-nice-subarrays", "title": "Count Number of Nice Subarrays", "difficulty": "Medium"}]},
    {"number": 2767, "slug": "partition-string-into-minimum-beautiful-substrings", "title": "Partition String Into Minimum Beautiful Substrings", "difficulty": "Medium", "tags": ["Hash Table", "String", "Dynamic Programming", "Backtracking"], "similar_problems": [{"slug": "partition-array-for-maximum-sum", "title": "Partition Array for Maximum Sum", "difficulty": "Medium"}, {"slug": "minimum-substring-partition-of-equal-character-frequency", "title": "Minimum Substring Partition of Equal Character Frequency", "difficulty": "Medium"}]},
    {"number": 2770, "slug": "maximum-number-of-jumps-to-reach-the-last-index", "title": "Maximum Number of Jumps to Reach the Last Index", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "jump-game-ii", "title": "Jump Game II", "difficulty": "Medium"}, {"slug": "frog-jump", "title": "Frog Jump", "difficulty": "Hard"}, {"slug": "jump-game-iii", "title": "Jump Game III", "difficulty": "Medium"}, {"slug": "jump-game-iv", "title": "Jump Game IV", "difficulty": "Hard"}, {"slug": "minimum-jumps-to-reach-home", "title": "Minimum Jumps to Reach Home", "difficulty": "Medium"}, {"slug": "jump-game-vii", "title": "Jump Game VII", "difficulty": "Medium"}]},
    {"number": 2771, "slug": "longest-non-decreasing-subarray-from-two-arrays", "title": "Longest Non-decreasing Subarray From Two Arrays", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "russian-doll-envelopes", "title": "Russian Doll Envelopes", "difficulty": "Hard"}, {"slug": "maximum-length-of-pair-chain", "title": "Maximum Length of Pair Chain", "difficulty": "Medium"}]},
    {"number": 2786, "slug": "visit-array-positions-to-maximize-score", "title": "Visit Array Positions to Maximize Score", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "jump-game-ii", "title": "Jump Game II", "difficulty": "Medium"}, {"slug": "stone-game", "title": "Stone Game", "difficulty": "Medium"}]},
    {"number": 2787, "slug": "ways-to-express-an-integer-as-sum-of-powers", "title": "Ways to Express an Integer as Sum of Powers", "difficulty": "Medium", "tags": ["Dynamic Programming"], "similar_problems": [{"slug": "perfect-squares", "title": "Perfect Squares", "difficulty": "Medium"}, {"slug": "combination-sum-iv", "title": "Combination Sum IV", "difficulty": "Medium"}, {"slug": "target-sum", "title": "Target Sum", "difficulty": "Medium"}]},
    {"number": 2791, "slug": "count-paths-that-can-form-a-palindrome-in-a-tree", "title": "Count Paths That Can Form a Palindrome in a Tree", "difficulty": "Hard", "tags": ["Dynamic Programming", "Bit Manipulation", "Tree", "Depth-First Search", "Bitmask"], "similar_problems": [{"slug": "count-valid-paths-in-a-tree", "title": "Count Valid Paths in a Tree", "difficulty": "Hard"}]},
    {"number": 2801, "slug": "count-stepping-numbers-in-range", "title": "Count Stepping Numbers in Range", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "stepping-numbers", "title": "Stepping Numbers", "difficulty": "Medium"}]},
    {"number": 2809, "slug": "minimum-time-to-make-array-sum-at-most-x", "title": "Minimum Time to Make Array Sum At Most x", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Sorting"], "similar_problems": []},
    {"number": 2811, "slug": "check-if-it-is-possible-to-split-array", "title": "Check if it is Possible to Split Array", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Greedy"], "similar_problems": []},
    {"number": 2826, "slug": "sorting-three-groups", "title": "Sorting Three Groups", "difficulty": "Medium", "tags": ["Array", "Binary Search", "Dynamic Programming"], "similar_problems": []},
    {"number": 2827, "slug": "number-of-beautiful-integers-in-the-range", "title": "Number of Beautiful Integers in the Range", "difficulty": "Hard", "tags": ["Math", "Dynamic Programming"], "similar_problems": [{"slug": "count-numbers-with-non-decreasing-digits", "title": "Count Numbers with Non-Decreasing Digits ", "difficulty": "Hard"}]},
    {"number": 2830, "slug": "maximize-the-profit-as-the-salesman", "title": "Maximize the Profit as the Salesman", "difficulty": "Medium", "tags": ["Array", "Hash Table", "Binary Search", "Dynamic Programming", "Sorting"], "similar_problems": []},
    {"number": 2836, "slug": "maximize-value-of-function-in-a-ball-passing-game", "title": "Maximize Value of Function in a Ball Passing Game", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Bit Manipulation"], "similar_problems": [{"slug": "jump-game-vi", "title": "Jump Game VI", "difficulty": "Medium"}]},
    {"number": 2850, "slug": "minimum-moves-to-spread-stones-over-grid", "title": "Minimum Moves to Spread Stones Over Grid", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Breadth-First Search", "Matrix"], "similar_problems": [{"slug": "minimum-number-of-operations-to-move-all-balls-to-each-box", "title": "Minimum Number of Operations to Move All Balls to Each Box", "difficulty": "Medium"}, {"slug": "minimum-number-of-operations-to-make-x-and-y-equal", "title": "Minimum Number of Operations to Make X and Y Equal", "difficulty": "Medium"}]},
    {"number": 2851, "slug": "string-transformation", "title": "String Transformation", "difficulty": "Hard", "tags": ["Math", "String", "Dynamic Programming", "String Matching"], "similar_problems": []},
    {"number": 2858, "slug": "minimum-edge-reversals-so-every-node-is-reachable", "title": "Minimum Edge Reversals So Every Node Is Reachable", "difficulty": "Hard", "tags": ["Dynamic Programming", "Depth-First Search", "Breadth-First Search", "Graph"], "similar_problems": [{"slug": "reorder-routes-to-make-all-paths-lead-to-the-city-zero", "title": "Reorder Routes to Make All Paths Lead to the City Zero", "difficulty": "Medium"}]},
    {"number": 2867, "slug": "count-valid-paths-in-a-tree", "title": "Count Valid Paths in a Tree", "difficulty": "Hard", "tags": ["Math", "Dynamic Programming", "Tree", "Depth-First Search", "Number Theory"], "similar_problems": [{"slug": "count-paths-that-can-form-a-palindrome-in-a-tree", "title": "Count Paths That Can Form a Palindrome in a Tree", "difficulty": "Hard"}]},
    {"number": 2876, "slug": "count-visited-nodes-in-a-directed-graph", "title": "Count Visited Nodes in a Directed Graph", "difficulty": "Hard", "tags": ["Dynamic Programming", "Graph", "Memoization"], "similar_problems": []},
    {"number": 2892, "slug": "minimizing-array-after-replacing-pairs-with-their-product", "title": "Minimizing Array After Replacing Pairs With Their Product", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Greedy"], "similar_problems": []},
    {"number": 2896, "slug": "apply-operations-to-make-two-strings-equal", "title": "Apply Operations to Make Two Strings Equal", "difficulty": "Medium", "tags": ["String", "Dynamic Programming"], "similar_problems": []},
    {"number": 2900, "slug": "longest-unequal-adjacent-groups-subsequence-i", "title": "Longest Unequal Adjacent Groups Subsequence I", "difficulty": "Easy", "tags": ["Array", "String", "Dynamic Programming", "Greedy"], "similar_problems": []},
    {"number": 2901, "slug": "longest-unequal-adjacent-groups-subsequence-ii", "title": "Longest Unequal Adjacent Groups Subsequence II", "difficulty": "Medium", "tags": ["Array", "String", "Dynamic Programming"], "similar_problems": []},
    {"number": 2902, "slug": "count-of-sub-multisets-with-bounded-sum", "title": "Count of Sub-Multisets With Bounded Sum", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Dynamic Programming", "Sliding Window"], "similar_problems": [{"slug": "coin-change", "title": "Coin Change", "difficulty": "Medium"}, {"slug": "coin-change-ii", "title": "Coin Change II", "difficulty": "Medium"}]},
    {"number": 2911, "slug": "minimum-changes-to-make-k-semi-palindromes", "title": "Minimum Changes to Make K Semi-palindromes", "difficulty": "Hard", "tags": ["Two Pointers", "String", "Dynamic Programming"], "similar_problems": [{"slug": "palindrome-partitioning-iii", "title": "Palindrome Partitioning III", "difficulty": "Hard"}]},
    {"number": 2912, "slug": "number-of-ways-to-reach-destination-in-the-grid", "title": "Number of Ways to Reach Destination in the Grid", "difficulty": "Hard", "tags": ["Math", "Dynamic Programming", "Combinatorics"], "similar_problems": []},
    {"number": 2915, "slug": "length-of-the-longest-subsequence-that-sums-to-target", "title": "Length of the Longest Subsequence That Sums to Target", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "coin-change", "title": "Coin Change", "difficulty": "Medium"}, {"slug": "coin-change-ii", "title": "Coin Change II", "difficulty": "Medium"}, {"slug": "find-the-maximum-length-of-valid-subsequence-i", "title": "Find the Maximum Length of Valid Subsequence I", "difficulty": "Medium"}, {"slug": "find-the-maximum-length-of-valid-subsequence-ii", "title": "Find the Maximum Length of Valid Subsequence II", "difficulty": "Medium"}]},
    {"number": 2916, "slug": "subarrays-distinct-element-sum-of-squares-ii", "title": "Subarrays Distinct Element Sum of Squares II", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Binary Indexed Tree", "Segment Tree"], "similar_problems": []},
    {"number": 2919, "slug": "minimum-increment-operations-to-make-array-beautiful", "title": "Minimum Increment Operations to Make Array Beautiful", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": []},
    {"number": 2920, "slug": "maximum-points-after-collecting-coins-from-all-nodes", "title": "Maximum Points After Collecting Coins From All Nodes", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Bit Manipulation", "Tree", "Depth-First Search", "Memoization"], "similar_problems": []},
    {"number": 2925, "slug": "maximum-score-after-applying-operations-on-a-tree", "title": "Maximum Score After Applying Operations on a Tree", "difficulty": "Medium", "tags": ["Dynamic Programming", "Tree", "Depth-First Search"], "similar_problems": [{"slug": "sum-of-distances-in-tree", "title": "Sum of Distances in Tree", "difficulty": "Hard"}, {"slug": "collect-coins-in-a-tree", "title": "Collect Coins in a Tree", "difficulty": "Hard"}, {"slug": "find-the-maximum-sum-of-node-values", "title": "Find the Maximum Sum of Node Values", "difficulty": "Hard"}]},
    {"number": 2926, "slug": "maximum-balanced-subsequence-sum", "title": "Maximum Balanced Subsequence Sum", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Dynamic Programming", "Binary Indexed Tree", "Segment Tree"], "similar_problems": [{"slug": "number-of-pairs-satisfying-inequality", "title": "Number of Pairs Satisfying Inequality", "difficulty": "Hard"}]},
    {"number": 2930, "slug": "number-of-strings-which-can-be-rearranged-to-contain-substring", "title": "Number of Strings Which Can Be Rearranged to Contain Substring", "difficulty": "Medium", "tags": ["Math", "Dynamic Programming", "Combinatorics"], "similar_problems": [{"slug": "count-vowels-permutation", "title": "Count Vowels Permutation", "difficulty": "Hard"}]},
    {"number": 2944, "slug": "minimum-number-of-coins-for-fruits", "title": "Minimum Number of Coins for Fruits", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Queue", "Heap (Priority Queue)", "Monotonic Queue"], "similar_problems": []},
    {"number": 2945, "slug": "find-maximum-non-decreasing-array-length", "title": "Find Maximum Non-decreasing Array Length", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Dynamic Programming", "Stack", "Queue", "Monotonic Stack", "Monotonic Queue"], "similar_problems": []},
    {"number": 2957, "slug": "remove-adjacent-almost-equal-characters", "title": "Remove Adjacent Almost-Equal Characters", "difficulty": "Medium", "tags": ["String", "Dynamic Programming", "Greedy"], "similar_problems": [{"slug": "minimum-changes-to-make-alternating-binary-string", "title": "Minimum Changes To Make Alternating Binary String", "difficulty": "Easy"}]},
    {"number": 2969, "slug": "minimum-number-of-coins-for-fruits-ii", "title": "Minimum Number of Coins for Fruits II", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Queue", "Heap (Priority Queue)", "Monotonic Queue"], "similar_problems": []},
    {"number": 2973, "slug": "find-number-of-coins-to-place-in-tree-nodes", "title": "Find Number of Coins to Place in Tree Nodes", "difficulty": "Hard", "tags": ["Dynamic Programming", "Tree", "Depth-First Search", "Sorting", "Heap (Priority Queue)"], "similar_problems": [{"slug": "collect-coins-in-a-tree", "title": "Collect Coins in a Tree", "difficulty": "Hard"}, {"slug": "find-the-maximum-sum-of-node-values", "title": "Find the Maximum Sum of Node Values", "difficulty": "Hard"}]},
    {"number": 2977, "slug": "minimum-cost-to-convert-string-ii", "title": "Minimum Cost to Convert String II", "difficulty": "Hard", "tags": ["Array", "String", "Dynamic Programming", "Graph", "Trie", "Shortest Path"], "similar_problems": [{"slug": "can-convert-string-in-k-moves", "title": "Can Convert String in K Moves", "difficulty": "Medium"}, {"slug": "minimum-moves-to-convert-string", "title": "Minimum Moves to Convert String", "difficulty": "Easy"}, {"slug": "minimum-number-of-valid-strings-to-form-target-ii", "title": "Minimum Number of Valid Strings to Form Target II", "difficulty": "Hard"}, {"slug": "minimum-number-of-valid-strings-to-form-target-i", "title": "Minimum Number of Valid Strings to Form Target I", "difficulty": "Medium"}]},
    {"number": 2979, "slug": "most-expensive-item-that-can-not-be-bought", "title": "Most Expensive Item That Can Not Be Bought", "difficulty": "Medium", "tags": ["Math", "Dynamic Programming", "Number Theory"], "similar_problems": [{"slug": "coin-change", "title": "Coin Change", "difficulty": "Medium"}, {"slug": "minimum-cost-for-tickets", "title": "Minimum Cost For Tickets", "difficulty": "Medium"}, {"slug": "minimum-number-of-coins-to-be-added", "title": "Minimum Number of Coins to be Added", "difficulty": "Medium"}]},
    {"number": 2992, "slug": "number-of-self-divisible-permutations", "title": "Number of Self-Divisible Permutations", "difficulty": "Medium", "tags": ["Array", "Math", "Dynamic Programming", "Backtracking", "Bit Manipulation", "Number Theory", "Bitmask"], "similar_problems": []},
    {"number": 2998, "slug": "minimum-number-of-operations-to-make-x-and-y-equal", "title": "Minimum Number of Operations to Make X and Y Equal", "difficulty": "Medium", "tags": ["Dynamic Programming", "Breadth-First Search", "Memoization"], "similar_problems": [{"slug": "shortest-bridge", "title": "Shortest Bridge", "difficulty": "Medium"}, {"slug": "minimum-moves-to-spread-stones-over-grid", "title": "Minimum Moves to Spread Stones Over Grid", "difficulty": "Medium"}]},
    {"number": 2999, "slug": "count-the-number-of-powerful-integers", "title": "Count the Number of Powerful Integers", "difficulty": "Hard", "tags": ["Math", "String", "Dynamic Programming"], "similar_problems": [{"slug": "powerful-integers", "title": "Powerful Integers", "difficulty": "Medium"}, {"slug": "numbers-with-repeated-digits", "title": "Numbers With Repeated Digits", "difficulty": "Hard"}]},
    {"number": 3003, "slug": "maximize-the-number-of-partitions-after-operations", "title": "Maximize the Number of Partitions After Operations", "difficulty": "Hard", "tags": ["String", "Dynamic Programming", "Bit Manipulation", "Bitmask"], "similar_problems": [{"slug": "can-make-palindrome-from-substring", "title": "Can Make Palindrome from Substring", "difficulty": "Medium"}]},
    {"number": 3004, "slug": "maximum-subtree-of-the-same-color", "title": "Maximum Subtree of the Same Color", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Tree", "Depth-First Search"], "similar_problems": []},
    {"number": 3007, "slug": "maximum-number-that-sum-of-the-prices-is-less-than-or-equal-to-k", "title": "Maximum Number That Sum of the Prices Is Less Than or Equal to K", "difficulty": "Medium", "tags": ["Math", "Binary Search", "Dynamic Programming", "Bit Manipulation"], "similar_problems": []},
    {"number": 3018, "slug": "maximum-number-of-removal-queries-that-can-be-processed-i", "title": "Maximum Number of Removal Queries That Can Be Processed I", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": []},
    {"number": 3032, "slug": "count-numbers-with-unique-digits-ii", "title": "Count Numbers With Unique Digits II", "difficulty": "Easy", "tags": ["Hash Table", "Math", "Dynamic Programming"], "similar_problems": [{"slug": "count-numbers-with-unique-digits", "title": "Count Numbers with Unique Digits", "difficulty": "Medium"}]},
    {"number": 3040, "slug": "maximum-number-of-operations-with-the-same-score-ii", "title": "Maximum Number of Operations With the Same Score II", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Memoization"], "similar_problems": []},
    {"number": 3041, "slug": "maximize-consecutive-elements-in-an-array-after-modification", "title": "Maximize Consecutive Elements in an Array After Modification", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Sorting"], "similar_problems": []},
    {"number": 3068, "slug": "find-the-maximum-sum-of-node-values", "title": "Find the Maximum Sum of Node Values", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Greedy", "Bit Manipulation", "Tree", "Sorting"], "similar_problems": [{"slug": "maximum-score-after-applying-operations-on-a-tree", "title": "Maximum Score After Applying Operations on a Tree", "difficulty": "Medium"}, {"slug": "find-number-of-coins-to-place-in-tree-nodes", "title": "Find Number of Coins to Place in Tree Nodes", "difficulty": "Hard"}]},
    {"number": 3077, "slug": "maximum-strength-of-k-disjoint-subarrays", "title": "Maximum Strength of K Disjoint Subarrays", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Prefix Sum"], "similar_problems": [{"slug": "partition-array-into-disjoint-intervals", "title": "Partition Array into Disjoint Intervals", "difficulty": "Medium"}, {"slug": "maximum-strength-of-a-group", "title": "Maximum Strength of a Group", "difficulty": "Medium"}]},
    {"number": 3082, "slug": "find-the-sum-of-the-power-of-all-subsequences", "title": "Find the Sum of the Power of All Subsequences", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "number-of-subsequences-that-satisfy-the-given-sum-condition", "title": "Number of Subsequences That Satisfy the Given Sum Condition", "difficulty": "Medium"}]},
    {"number": 3098, "slug": "find-the-sum-of-subsequence-powers", "title": "Find the Sum of Subsequence Powers", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Sorting"], "similar_problems": [{"slug": "number-of-subsequences-that-satisfy-the-given-sum-condition", "title": "Number of Subsequences That Satisfy the Given Sum Condition", "difficulty": "Medium"}, {"slug": "closest-subsequence-sum", "title": "Closest Subsequence Sum", "difficulty": "Hard"}]},
    {"number": 3117, "slug": "minimum-sum-of-values-by-dividing-array", "title": "Minimum Sum of Values by Dividing Array", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Dynamic Programming", "Bit Manipulation", "Segment Tree", "Queue"], "similar_problems": [{"slug": "minimum-cost-to-split-an-array", "title": "Minimum Cost to Split an Array", "difficulty": "Hard"}, {"slug": "split-with-minimum-sum", "title": "Split With Minimum Sum", "difficulty": "Easy"}, {"slug": "find-subarray-with-bitwise-or-closest-to-k", "title": "Find Subarray With Bitwise OR Closest to K", "difficulty": "Hard"}, {"slug": "find-x-value-of-array-ii", "title": "Find X Value of Array II", "difficulty": "Hard"}]},
    {"number": 3122, "slug": "minimum-number-of-operations-to-satisfy-conditions", "title": "Minimum Number of Operations to Satisfy Conditions", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Matrix"], "similar_problems": [{"slug": "candy", "title": "Candy", "difficulty": "Hard"}, {"slug": "distribute-candies", "title": "Distribute Candies", "difficulty": "Easy"}, {"slug": "minimum-cost-of-buying-candies-with-discount", "title": "Minimum Cost of Buying Candies With Discount", "difficulty": "Easy"}]},
    {"number": 3129, "slug": "find-all-possible-stable-binary-arrays-i", "title": "Find All Possible Stable Binary Arrays I", "difficulty": "Medium", "tags": ["Dynamic Programming", "Prefix Sum"], "similar_problems": [{"slug": "contiguous-array", "title": "Contiguous Array", "difficulty": "Medium"}, {"slug": "binary-subarrays-with-sum", "title": "Binary Subarrays With Sum", "difficulty": "Medium"}]},
    {"number": 3130, "slug": "find-all-possible-stable-binary-arrays-ii", "title": "Find All Possible Stable Binary Arrays II", "difficulty": "Hard", "tags": ["Dynamic Programming", "Prefix Sum"], "similar_problems": [{"slug": "contiguous-array", "title": "Contiguous Array", "difficulty": "Medium"}, {"slug": "binary-subarrays-with-sum", "title": "Binary Subarrays With Sum", "difficulty": "Medium"}]},
    {"number": 3135, "slug": "equalize-strings-by-adding-or-removing-characters-at-ends", "title": "Equalize Strings by Adding or Removing Characters at Ends", "difficulty": "Medium", "tags": ["String", "Binary Search", "Dynamic Programming", "Sliding Window", "Hash Function"], "similar_problems": []},
    {"number": 3144, "slug": "minimum-substring-partition-of-equal-character-frequency", "title": "Minimum Substring Partition of Equal Character Frequency", "difficulty": "Medium", "tags": ["Hash Table", "String", "Dynamic Programming", "Counting"], "similar_problems": [{"slug": "partition-array-for-maximum-sum", "title": "Partition Array for Maximum Sum", "difficulty": "Medium"}, {"slug": "partition-string-into-minimum-beautiful-substrings", "title": "Partition String Into Minimum Beautiful Substrings", "difficulty": "Medium"}]},
    {"number": 3148, "slug": "maximum-difference-score-in-a-grid", "title": "Maximum Difference Score in a Grid", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Matrix"], "similar_problems": [{"slug": "maximum-score-from-grid-operations", "title": "Maximum Score From Grid Operations", "difficulty": "Hard"}]},
    {"number": 3149, "slug": "find-the-minimum-cost-array-permutation", "title": "Find the Minimum Cost Array Permutation", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Bit Manipulation", "Bitmask"], "similar_problems": [{"slug": "shortest-path-visiting-all-nodes", "title": "Shortest Path Visiting All Nodes", "difficulty": "Hard"}, {"slug": "find-the-shortest-superstring", "title": "Find the Shortest Superstring", "difficulty": "Hard"}]},
    {"number": 3154, "slug": "find-number-of-ways-to-reach-the-k-th-stair", "title": "Find Number of Ways to Reach the K-th Stair", "difficulty": "Hard", "tags": ["Math", "Dynamic Programming", "Bit Manipulation", "Memoization", "Combinatorics"], "similar_problems": [{"slug": "climbing-stairs", "title": "Climbing Stairs", "difficulty": "Easy"}, {"slug": "min-cost-climbing-stairs", "title": "Min Cost Climbing Stairs", "difficulty": "Easy"}]},
    {"number": 3165, "slug": "maximum-sum-of-subsequence-with-non-adjacent-elements", "title": "Maximum Sum of Subsequence With Non-adjacent Elements", "difficulty": "Hard", "tags": ["Array", "Divide and Conquer", "Dynamic Programming", "Segment Tree"], "similar_problems": []},
    {"number": 3176, "slug": "find-the-maximum-length-of-a-good-subsequence-i", "title": "Find the Maximum Length of a Good Subsequence I", "difficulty": "Medium", "tags": ["Array", "Hash Table", "Dynamic Programming"], "similar_problems": [{"slug": "longest-increasing-subsequence", "title": "Longest Increasing Subsequence", "difficulty": "Medium"}, {"slug": "maximum-length-of-repeated-subarray", "title": "Maximum Length of Repeated Subarray", "difficulty": "Medium"}]},
    {"number": 3177, "slug": "find-the-maximum-length-of-a-good-subsequence-ii", "title": "Find the Maximum Length of a Good Subsequence II", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Dynamic Programming"], "similar_problems": [{"slug": "longest-increasing-subsequence", "title": "Longest Increasing Subsequence", "difficulty": "Medium"}, {"slug": "maximum-length-of-repeated-subarray", "title": "Maximum Length of Repeated Subarray", "difficulty": "Medium"}]},
    {"number": 3180, "slug": "maximum-total-reward-using-operations-i", "title": "Maximum Total Reward Using Operations I", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": []},
    {"number": 3181, "slug": "maximum-total-reward-using-operations-ii", "title": "Maximum Total Reward Using Operations II", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Bit Manipulation"], "similar_problems": []},
    {"number": 3183, "slug": "the-number-of-ways-to-make-the-sum", "title": "The Number of Ways to Make the Sum", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "combination-sum", "title": "Combination Sum", "difficulty": "Medium"}, {"slug": "climbing-stairs", "title": "Climbing Stairs", "difficulty": "Easy"}, {"slug": "coin-change-ii", "title": "Coin Change II", "difficulty": "Medium"}]},
    {"number": 3186, "slug": "maximum-total-damage-with-spell-casting", "title": "Maximum Total Damage With Spell Casting", "difficulty": "Medium", "tags": ["Array", "Hash Table", "Two Pointers", "Binary Search", "Dynamic Programming", "Sorting", "Counting"], "similar_problems": []},
    {"number": 3192, "slug": "minimum-operations-to-make-binary-array-elements-equal-to-one-ii", "title": "Minimum Operations to Make Binary Array Elements Equal to One II", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Greedy"], "similar_problems": [{"slug": "minimum-suffix-flips", "title": "Minimum Suffix Flips", "difficulty": "Medium"}]},
    {"number": 3193, "slug": "count-the-number-of-inversions", "title": "Count the Number of Inversions", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "k-inverse-pairs-array", "title": "K Inverse Pairs Array", "difficulty": "Hard"}]},
    {"number": 3196, "slug": "maximize-total-cost-of-alternating-subarrays", "title": "Maximize Total Cost of Alternating Subarrays", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": []},
    {"number": 3201, "slug": "find-the-maximum-length-of-valid-subsequence-i", "title": "Find the Maximum Length of Valid Subsequence I", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "longest-increasing-subsequence", "title": "Longest Increasing Subsequence", "difficulty": "Medium"}, {"slug": "length-of-the-longest-subsequence-that-sums-to-target", "title": "Length of the Longest Subsequence That Sums to Target", "difficulty": "Medium"}]},
    {"number": 3202, "slug": "find-the-maximum-length-of-valid-subsequence-ii", "title": "Find the Maximum Length of Valid Subsequence II", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "longest-increasing-subsequence", "title": "Longest Increasing Subsequence", "difficulty": "Medium"}, {"slug": "length-of-the-longest-subsequence-that-sums-to-target", "title": "Length of the Longest Subsequence That Sums to Target", "difficulty": "Medium"}]},
    {"number": 3205, "slug": "maximum-array-hopping-score-i", "title": "Maximum Array Hopping Score I", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Stack", "Greedy", "Monotonic Stack"], "similar_problems": []},
    {"number": 3213, "slug": "construct-string-with-minimum-cost", "title": "Construct String with Minimum Cost", "difficulty": "Hard", "tags": ["Array", "String", "Dynamic Programming", "Suffix Array"], "similar_problems": [{"slug": "minimum-number-of-valid-strings-to-form-target-ii", "title": "Minimum Number of Valid Strings to Form Target II", "difficulty": "Hard"}, {"slug": "minimum-number-of-valid-strings-to-form-target-i", "title": "Minimum Number of Valid Strings to Form Target I", "difficulty": "Medium"}]},
    {"number": 3218, "slug": "minimum-cost-for-cutting-cake-i", "title": "Minimum Cost for Cutting Cake I", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Greedy", "Sorting"], "similar_problems": [{"slug": "minimum-cost-for-cutting-cake-ii", "title": "Minimum Cost for Cutting Cake II", "difficulty": "Hard"}]},
    {"number": 3225, "slug": "maximum-score-from-grid-operations", "title": "Maximum Score From Grid Operations", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Matrix", "Prefix Sum"], "similar_problems": [{"slug": "maximum-difference-score-in-a-grid", "title": "Maximum Difference Score in a Grid", "difficulty": "Medium"}]},
    {"number": 3229, "slug": "minimum-operations-to-make-array-equal-to-target", "title": "Minimum Operations to Make Array Equal to Target", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Stack", "Greedy", "Monotonic Stack"], "similar_problems": []},
    {"number": 3241, "slug": "time-taken-to-mark-all-nodes", "title": "Time Taken to Mark All Nodes", "difficulty": "Hard", "tags": ["Dynamic Programming", "Tree", "Depth-First Search", "Graph"], "similar_problems": [{"slug": "sum-of-distances-in-tree", "title": "Sum of Distances in Tree", "difficulty": "Hard"}, {"slug": "most-profitable-path-in-a-tree", "title": "Most Profitable Path in a Tree", "difficulty": "Medium"}, {"slug": "find-the-last-marked-nodes-in-tree", "title": "Find the Last Marked Nodes in Tree", "difficulty": "Hard"}]},
    {"number": 3247, "slug": "number-of-subsequences-with-odd-sum", "title": "Number of Subsequences with Odd Sum", "difficulty": "Medium", "tags": ["Array", "Math", "Dynamic Programming", "Combinatorics"], "similar_problems": []},
    {"number": 3250, "slug": "find-the-count-of-monotonic-pairs-i", "title": "Find the Count of Monotonic Pairs I", "difficulty": "Hard", "tags": ["Array", "Math", "Dynamic Programming", "Combinatorics", "Prefix Sum"], "similar_problems": [{"slug": "monotonic-array", "title": "Monotonic Array", "difficulty": "Easy"}]},
    {"number": 3251, "slug": "find-the-count-of-monotonic-pairs-ii", "title": "Find the Count of Monotonic Pairs II", "difficulty": "Hard", "tags": ["Array", "Math", "Dynamic Programming", "Combinatorics", "Prefix Sum"], "similar_problems": []},
    {"number": 3256, "slug": "maximum-value-sum-by-placing-three-rooks-i", "title": "Maximum Value Sum by Placing Three Rooks I", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Matrix", "Enumeration"], "similar_problems": [{"slug": "available-captures-for-rook", "title": "Available Captures for Rook", "difficulty": "Easy"}]},
    {"number": 3257, "slug": "maximum-value-sum-by-placing-three-rooks-ii", "title": "Maximum Value Sum by Placing Three Rooks II", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Matrix", "Enumeration"], "similar_problems": [{"slug": "available-captures-for-rook", "title": "Available Captures for Rook", "difficulty": "Easy"}]},
    {"number": 3259, "slug": "maximum-energy-boost-from-two-drinks", "title": "Maximum Energy Boost From Two Drinks", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": []},
    {"number": 3260, "slug": "find-the-largest-palindrome-divisible-by-k", "title": "Find the Largest Palindrome Divisible by K", "difficulty": "Hard", "tags": ["Math", "String", "Dynamic Programming", "Greedy", "Number Theory"], "similar_problems": [{"slug": "palindrome-number", "title": "Palindrome Number", "difficulty": "Easy"}, {"slug": "find-the-closest-palindrome", "title": "Find the Closest Palindrome", "difficulty": "Hard"}]},
    {"number": 3269, "slug": "constructing-two-increasing-arrays", "title": "Constructing Two Increasing Arrays", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": []},
    {"number": 3276, "slug": "select-cells-in-grid-with-maximum-score", "title": "Select Cells in Grid With Maximum Score", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Bit Manipulation", "Matrix", "Bitmask"], "similar_problems": []},
    {"number": 3277, "slug": "maximum-xor-score-subarray-queries", "title": "Maximum XOR Score Subarray Queries", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "make-the-xor-of-all-segments-equal-to-zero", "title": "Make the XOR of All Segments Equal to Zero", "difficulty": "Hard"}]},
    {"number": 3284, "slug": "sum-of-consecutive-subarrays", "title": "Sum of Consecutive Subarrays", "difficulty": "Medium", "tags": ["Array", "Two Pointers", "Dynamic Programming"], "similar_problems": []},
    {"number": 3287, "slug": "find-the-maximum-sequence-value-of-array", "title": "Find the Maximum Sequence Value of Array", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Bit Manipulation"], "similar_problems": [{"slug": "bitwise-ors-of-subarrays", "title": "Bitwise ORs of Subarrays", "difficulty": "Medium"}]},
    {"number": 3290, "slug": "maximum-multiplication-score", "title": "Maximum Multiplication Score", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": []},
    {"number": 3291, "slug": "minimum-number-of-valid-strings-to-form-target-i", "title": "Minimum Number of Valid Strings to Form Target I", "difficulty": "Medium", "tags": ["Array", "String", "Binary Search", "Dynamic Programming", "Trie", "Segment Tree", "Rolling Hash", "String Matching", "Hash Function"], "similar_problems": [{"slug": "minimum-cost-to-convert-string-ii", "title": "Minimum Cost to Convert String II", "difficulty": "Hard"}, {"slug": "construct-string-with-minimum-cost", "title": "Construct String with Minimum Cost", "difficulty": "Hard"}]},
    {"number": 3292, "slug": "minimum-number-of-valid-strings-to-form-target-ii", "title": "Minimum Number of Valid Strings to Form Target II", "difficulty": "Hard", "tags": ["Array", "String", "Binary Search", "Dynamic Programming", "Segment Tree", "Rolling Hash", "String Matching", "Hash Function"], "similar_problems": [{"slug": "minimum-cost-to-convert-string-ii", "title": "Minimum Cost to Convert String II", "difficulty": "Hard"}, {"slug": "construct-string-with-minimum-cost", "title": "Construct String with Minimum Cost", "difficulty": "Hard"}]},
    {"number": 3299, "slug": "sum-of-consecutive-subsequences", "title": "Sum of Consecutive Subsequences", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Dynamic Programming"], "similar_problems": []},
    {"number": 3302, "slug": "find-the-lexicographically-smallest-valid-sequence", "title": "Find the Lexicographically Smallest Valid Sequence", "difficulty": "Medium", "tags": ["Two Pointers", "String", "Dynamic Programming", "Greedy"], "similar_problems": [{"slug": "smallest-k-length-subsequence-with-occurrences-of-a-letter", "title": "Smallest K-Length Subsequence With Occurrences of a Letter", "difficulty": "Hard"}]},
    {"number": 3316, "slug": "find-maximum-removals-from-source-string", "title": "Find Maximum Removals From Source String", "difficulty": "Medium", "tags": ["Array", "Hash Table", "Two Pointers", "String", "Dynamic Programming"], "similar_problems": [{"slug": "delete-characters-to-make-fancy-string", "title": "Delete Characters to Make Fancy String", "difficulty": "Easy"}]},
    {"number": 3317, "slug": "find-the-number-of-possible-ways-for-an-event", "title": "Find the Number of Possible Ways for an Event", "difficulty": "Hard", "tags": ["Math", "Dynamic Programming", "Combinatorics"], "similar_problems": [{"slug": "kth-smallest-amount-with-single-denomination-combination", "title": "Kth Smallest Amount With Single Denomination Combination", "difficulty": "Hard"}]},
    {"number": 3320, "slug": "count-the-number-of-winning-sequences", "title": "Count The Number of Winning Sequences", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "predict-the-winner", "title": "Predict the Winner", "difficulty": "Medium"}]},
    {"number": 3332, "slug": "maximum-points-tourist-can-earn", "title": "Maximum Points Tourist Can Earn", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Matrix"], "similar_problems": []},
    {"number": 3333, "slug": "find-the-original-typed-string-ii", "title": "Find the Original Typed String II", "difficulty": "Hard", "tags": ["String", "Dynamic Programming", "Prefix Sum"], "similar_problems": [{"slug": "keyboard-row", "title": "Keyboard Row", "difficulty": "Easy"}, {"slug": "faulty-keyboard", "title": "Faulty Keyboard", "difficulty": "Easy"}]},
    {"number": 3335, "slug": "total-characters-in-string-after-transformations-i", "title": "Total Characters in String After Transformations I", "difficulty": "Medium", "tags": ["Hash Table", "Math", "String", "Dynamic Programming", "Counting"], "similar_problems": []},
    {"number": 3336, "slug": "find-the-number-of-subsequences-with-equal-gcd", "title": "Find the Number of Subsequences With Equal GCD", "difficulty": "Hard", "tags": ["Array", "Math", "Dynamic Programming", "Number Theory"], "similar_problems": [{"slug": "find-greatest-common-divisor-of-array", "title": "Find Greatest Common Divisor of Array", "difficulty": "Easy"}]},
    {"number": 3337, "slug": "total-characters-in-string-after-transformations-ii", "title": "Total Characters in String After Transformations II", "difficulty": "Hard", "tags": ["Hash Table", "Math", "String", "Dynamic Programming", "Counting"], "similar_problems": []},
    {"number": 3339, "slug": "find-the-number-of-k-even-arrays", "title": "Find the Number of K-Even Arrays", "difficulty": "Medium", "tags": ["Dynamic Programming"], "similar_problems": [{"slug": "sort-array-by-parity-ii", "title": "Sort Array By Parity II", "difficulty": "Easy"}]},
    {"number": 3343, "slug": "count-number-of-balanced-permutations", "title": "Count Number of Balanced Permutations", "difficulty": "Hard", "tags": ["Math", "String", "Dynamic Programming", "Combinatorics"], "similar_problems": []},
    {"number": 3351, "slug": "sum-of-good-subsequences", "title": "Sum of Good Subsequences", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Dynamic Programming"], "similar_problems": []},
    {"number": 3352, "slug": "count-k-reducible-numbers-less-than-n", "title": "Count K-Reducible Numbers Less Than N", "difficulty": "Hard", "tags": ["Math", "String", "Dynamic Programming", "Combinatorics"], "similar_problems": []},
    {"number": 3363, "slug": "find-the-maximum-number-of-fruits-collected", "title": "Find the Maximum Number of Fruits Collected", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Matrix"], "similar_problems": []},
    {"number": 3366, "slug": "minimum-array-sum", "title": "Minimum Array Sum", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": []},
    {"number": 3367, "slug": "maximize-sum-of-weights-after-edge-removals", "title": "Maximize Sum of Weights after Edge Removals", "difficulty": "Hard", "tags": ["Dynamic Programming", "Tree", "Depth-First Search"], "similar_problems": [{"slug": "find-minimum-diameter-after-merging-two-trees", "title": "Find Minimum Diameter After Merging Two Trees", "difficulty": "Hard"}]},
    {"number": 3376, "slug": "minimum-time-to-break-locks-i", "title": "Minimum Time to Break Locks I", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Backtracking", "Bit Manipulation", "Depth-First Search", "Bitmask"], "similar_problems": []},
    {"number": 3388, "slug": "count-beautiful-splits-in-an-array", "title": "Count Beautiful Splits in an Array", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": []},
    {"number": 3389, "slug": "minimum-operations-to-make-character-frequencies-equal", "title": "Minimum Operations to Make Character Frequencies Equal", "difficulty": "Hard", "tags": ["Hash Table", "String", "Dynamic Programming", "Counting", "Enumeration"], "similar_problems": [{"slug": "minimum-number-of-steps-to-make-two-strings-anagram", "title": "Minimum Number of Steps to Make Two Strings Anagram", "difficulty": "Medium"}]},
    {"number": 3393, "slug": "count-paths-with-the-given-xor-value", "title": "Count Paths With the Given XOR Value", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Bit Manipulation", "Matrix"], "similar_problems": [{"slug": "count-pairs-with-xor-in-a-range", "title": "Count Pairs With XOR in a Range", "difficulty": "Hard"}]},
    {"number": 3409, "slug": "longest-subsequence-with-decreasing-adjacent-difference", "title": "Longest Subsequence With Decreasing Adjacent Difference", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "longest-increasing-subsequence", "title": "Longest Increasing Subsequence", "difficulty": "Medium"}, {"slug": "longest-increasing-subsequence-ii", "title": "Longest Increasing Subsequence II", "difficulty": "Hard"}]},
    {"number": 3410, "slug": "maximize-subarray-sum-after-removing-all-occurrences-of-one-element", "title": "Maximize Subarray Sum After Removing All Occurrences of One Element", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Segment Tree"], "similar_problems": [{"slug": "maximum-subarray", "title": "Maximum Subarray", "difficulty": "Medium"}, {"slug": "maximum-subarray-sum-with-one-deletion", "title": "Maximum Subarray Sum with One Deletion", "difficulty": "Medium"}]},
    {"number": 3414, "slug": "maximum-score-of-non-overlapping-intervals", "title": "Maximum Score of Non-overlapping Intervals", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Dynamic Programming", "Sorting"], "similar_problems": [{"slug": "two-best-non-overlapping-events", "title": "Two Best Non-Overlapping Events", "difficulty": "Medium"}]},
    {"number": 3418, "slug": "maximum-amount-of-money-robot-can-earn", "title": "Maximum Amount of Money Robot Can Earn", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Matrix"], "similar_problems": []},
    {"number": 3428, "slug": "maximum-and-minimum-sums-of-at-most-size-k-subsequences", "title": "Maximum and Minimum Sums of at Most Size K Subsequences", "difficulty": "Medium", "tags": ["Array", "Math", "Dynamic Programming", "Sorting", "Combinatorics"], "similar_problems": []},
    {"number": 3429, "slug": "paint-house-iv", "title": "Paint House IV", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "paint-house-iii", "title": "Paint House III", "difficulty": "Hard"}]},
    {"number": 3434, "slug": "maximum-frequency-after-subarray-operation", "title": "Maximum Frequency After Subarray Operation", "difficulty": "Medium", "tags": ["Array", "Hash Table", "Dynamic Programming", "Greedy", "Enumeration", "Prefix Sum"], "similar_problems": []},
    {"number": 3441, "slug": "minimum-cost-good-caption", "title": "Minimum Cost Good Caption", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": []},
    {"number": 3444, "slug": "minimum-increments-for-target-multiples-in-an-array", "title": "Minimum Increments for Target Multiples in an Array", "difficulty": "Hard", "tags": ["Array", "Math", "Dynamic Programming", "Bit Manipulation", "Number Theory", "Bitmask"], "similar_problems": []},
    {"number": 3448, "slug": "count-substrings-divisible-by-last-digit", "title": "Count Substrings Divisible By Last Digit", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "number-of-divisible-substrings", "title": "Number of Divisible Substrings", "difficulty": "Medium"}]},
    {"number": 3458, "slug": "select-k-disjoint-special-substrings", "title": "Select K Disjoint Special Substrings", "difficulty": "Medium", "tags": ["Hash Table", "String", "Dynamic Programming", "Greedy", "Sorting"], "similar_problems": [{"slug": "find-longest-self-contained-substring", "title": "Find Longest Self-Contained Substring", "difficulty": "Hard"}]},
    {"number": 3459, "slug": "length-of-longest-v-shaped-diagonal-segment", "title": "Length of Longest V-Shaped Diagonal Segment", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Memoization", "Matrix"], "similar_problems": []},
    {"number": 3466, "slug": "maximum-coin-collection", "title": "Maximum Coin Collection ", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": []},
    {"number": 3469, "slug": "find-minimum-cost-to-remove-array-elements", "title": "Find Minimum Cost to Remove Array Elements", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "minimum-difference-in-sums-after-removal-of-elements", "title": "Minimum Difference in Sums After Removal of Elements", "difficulty": "Hard"}]},
    {"number": 3472, "slug": "longest-palindromic-subsequence-after-at-most-k-operations", "title": "Longest Palindromic Subsequence After at Most K Operations", "difficulty": "Medium", "tags": ["String", "Dynamic Programming"], "similar_problems": []},
    {"number": 3473, "slug": "sum-of-k-subarrays-with-length-at-least-m", "title": "Sum of K Subarrays With Length at Least M", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Prefix Sum"], "similar_problems": []},
    {"number": 3489, "slug": "zero-array-transformation-iv", "title": "Zero Array Transformation IV", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "zero-array-transformation-i", "title": "Zero Array Transformation I", "difficulty": "Medium"}, {"slug": "zero-array-transformation-ii", "title": "Zero Array Transformation II", "difficulty": "Medium"}, {"slug": "zero-array-transformation-iii", "title": "Zero Array Transformation III", "difficulty": "Medium"}]},
    {"number": 3490, "slug": "count-beautiful-numbers", "title": "Count Beautiful Numbers", "difficulty": "Hard", "tags": ["Dynamic Programming"], "similar_problems": []},
    {"number": 3500, "slug": "minimum-cost-to-divide-array-into-subarrays", "title": "Minimum Cost to Divide Array Into Subarrays", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Prefix Sum"], "similar_problems": [{"slug": "minimum-cost-to-split-an-array", "title": "Minimum Cost to Split an Array", "difficulty": "Hard"}]},
    {"number": 3503, "slug": "longest-palindrome-after-substring-concatenation-i", "title": "Longest Palindrome After Substring Concatenation I", "difficulty": "Medium", "tags": ["Two Pointers", "String", "Dynamic Programming", "Enumeration"], "similar_problems": []},
    {"number": 3504, "slug": "longest-palindrome-after-substring-concatenation-ii", "title": "Longest Palindrome After Substring Concatenation II", "difficulty": "Hard", "tags": ["Two Pointers", "String", "Dynamic Programming"], "similar_problems": [{"slug": "edit-distance", "title": "Edit Distance", "difficulty": "Medium"}]},
    {"number": 3505, "slug": "minimum-operations-to-make-elements-within-k-subarrays-equal", "title": "Minimum Operations to Make Elements Within K Subarrays Equal", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Math", "Dynamic Programming", "Sliding Window", "Heap (Priority Queue)"], "similar_problems": [{"slug": "find-median-from-data-stream", "title": "Find Median from Data Stream", "difficulty": "Hard"}, {"slug": "minimum-moves-to-equal-array-elements-ii", "title": "Minimum Moves to Equal Array Elements II", "difficulty": "Medium"}]},
    {"number": 3509, "slug": "maximum-product-of-subsequences-with-an-alternating-sum-equal-to-k", "title": "Maximum Product of Subsequences With an Alternating Sum Equal to K", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Dynamic Programming"], "similar_problems": [{"slug": "maximum-alternating-subsequence-sum", "title": "Maximum Alternating Subsequence Sum", "difficulty": "Medium"}]},
    {"number": 3519, "slug": "count-numbers-with-non-decreasing-digits", "title": "Count Numbers with Non-Decreasing Digits ", "difficulty": "Hard", "tags": ["Math", "String", "Dynamic Programming"], "similar_problems": [{"slug": "count-of-integers", "title": "Count of Integers", "difficulty": "Hard"}, {"slug": "number-of-beautiful-integers-in-the-range", "title": "Number of Beautiful Integers in the Range", "difficulty": "Hard"}]},
    {"number": 3524, "slug": "find-x-value-of-array-i", "title": "Find X Value of Array I", "difficulty": "Medium", "tags": ["Array", "Math", "Dynamic Programming"], "similar_problems": []},
    {"number": 3530, "slug": "maximum-profit-from-valid-topological-order-in-dag", "title": "Maximum Profit from Valid Topological Order in DAG", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Bit Manipulation", "Graph", "Topological Sort", "Bitmask"], "similar_problems": []},
    {"number": 3533, "slug": "concatenated-divisibility", "title": "Concatenated Divisibility", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Bit Manipulation", "Bitmask"], "similar_problems": []},
    {"number": 3534, "slug": "path-existence-queries-in-a-graph-ii", "title": "Path Existence Queries in a Graph II", "difficulty": "Hard", "tags": ["Array", "Two Pointers", "Binary Search", "Dynamic Programming", "Greedy", "Bit Manipulation", "Graph", "Sorting"], "similar_problems": []},
    {"number": 3538, "slug": "merge-operations-for-minimum-travel-time", "title": "Merge Operations for Minimum Travel Time", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Prefix Sum"], "similar_problems": []},
    {"number": 3539, "slug": "find-sum-of-array-product-of-magical-sequences", "title": "Find Sum of Array Product of Magical Sequences", "difficulty": "Hard", "tags": ["Array", "Math", "Dynamic Programming", "Bit Manipulation", "Combinatorics", "Bitmask"], "similar_problems": [{"slug": "product-of-array-except-self", "title": "Product of Array Except Self", "difficulty": "Medium"}, {"slug": "smallest-number-with-all-set-bits", "title": "Smallest Number With All Set Bits", "difficulty": "Easy"}]},
    {"number": 3543, "slug": "maximum-weighted-k-edge-path", "title": "Maximum Weighted K-Edge Path", "difficulty": "Medium", "tags": ["Hash Table", "Dynamic Programming", "Graph"], "similar_problems": []},
    {"number": 3544, "slug": "subtree-inversion-sum", "title": "Subtree Inversion Sum", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Tree", "Depth-First Search"], "similar_problems": []},
    {"number": 3557, "slug": "find-maximum-number-of-non-intersecting-substrings", "title": "Find Maximum Number of Non Intersecting Substrings", "difficulty": "Medium", "tags": ["Hash Table", "String", "Dynamic Programming", "Greedy"], "similar_problems": []},
    {"number": 3559, "slug": "number-of-ways-to-assign-edge-weights-ii", "title": "Number of Ways to Assign Edge Weights II", "difficulty": "Hard", "tags": ["Array", "Math", "Dynamic Programming", "Bit Manipulation", "Tree", "Depth-First Search"], "similar_problems": []},
    {"number": 3562, "slug": "maximum-profit-from-trading-stocks-with-discounts", "title": "Maximum Profit from Trading Stocks with Discounts", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Tree", "Depth-First Search"], "similar_problems": []},
    {"number": 3563, "slug": "lexicographically-smallest-string-after-adjacent-removals", "title": "Lexicographically Smallest String After Adjacent Removals", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": []},
    {"number": 3573, "slug": "best-time-to-buy-and-sell-stock-v", "title": "Best Time to Buy and Sell Stock V", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "best-time-to-buy-and-sell-stock", "title": "Best Time to Buy and Sell Stock", "difficulty": "Easy"}]},
    {"number": 3575, "slug": "maximum-good-subtree-score", "title": "Maximum Good Subtree Score", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Bit Manipulation", "Tree", "Depth-First Search", "Bitmask"], "similar_problems": []},
    {"number": 3578, "slug": "count-partitions-with-max-min-difference-at-most-k", "title": "Count Partitions With Max-Min Difference at Most K", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Queue", "Sliding Window", "Prefix Sum", "Monotonic Queue"], "similar_problems": [{"slug": "number-of-great-partitions", "title": "Number of Great Partitions", "difficulty": "Hard"}]},
    {"number": 3579, "slug": "minimum-steps-to-convert-string-with-operations", "title": "Minimum Steps to Convert String with Operations", "difficulty": "Hard", "tags": ["String", "Dynamic Programming", "Greedy"], "similar_problems": [{"slug": "edit-distance", "title": "Edit Distance", "difficulty": "Medium"}]},
    {"number": 3585, "slug": "find-weighted-median-node-in-tree", "title": "Find Weighted Median Node in Tree", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Dynamic Programming", "Tree", "Depth-First Search"], "similar_problems": []},
    {"number": 3592, "slug": "inverse-coin-change", "title": "Inverse Coin Change", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "coin-change", "title": "Coin Change", "difficulty": "Medium"}, {"slug": "coin-change-ii", "title": "Coin Change II", "difficulty": "Medium"}]},
    {"number": 3593, "slug": "minimum-increments-to-equalize-leaf-paths", "title": "Minimum Increments to Equalize Leaf Paths", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Tree", "Depth-First Search"], "similar_problems": []},
    {"number": 3594, "slug": "minimum-time-to-transport-all-individuals", "title": "Minimum Time to Transport All Individuals", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Bit Manipulation", "Graph", "Heap (Priority Queue)", "Shortest Path", "Bitmask"], "similar_problems": []},
    {"number": 3599, "slug": "partition-array-to-minimize-xor", "title": "Partition Array to Minimize XOR", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Bit Manipulation", "Prefix Sum"], "similar_problems": []},
    {"number": 3603, "slug": "minimum-cost-path-with-alternating-directions-ii", "title": "Minimum Cost Path with Alternating Directions II", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Matrix"], "similar_problems": []},
    {"number": 3610, "slug": "minimum-number-of-primes-to-sum-to-target", "title": "Minimum Number of Primes to Sum to Target", "difficulty": "Medium", "tags": ["Array", "Math", "Dynamic Programming", "Number Theory"], "similar_problems": []},
    {"number": 3615, "slug": "longest-palindromic-path-in-graph", "title": "Longest Palindromic Path in Graph", "difficulty": "Hard", "tags": ["String", "Dynamic Programming", "Bit Manipulation", "Graph", "Bitmask"], "similar_problems": []},
    {"number": 3620, "slug": "network-recovery-pathways", "title": "Network Recovery Pathways", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Dynamic Programming", "Graph", "Topological Sort", "Heap (Priority Queue)", "Shortest Path"], "similar_problems": []},
    {"number": 3621, "slug": "number-of-integers-with-popcount-depth-equal-to-k-i", "title": "Number of Integers With Popcount-Depth Equal to K I", "difficulty": "Hard", "tags": ["Math", "Dynamic Programming", "Bit Manipulation", "Combinatorics"], "similar_problems": [{"slug": "find-pattern-in-infinite-stream-ii", "title": "Find Pattern in Infinite Stream II", "difficulty": "Hard"}]},
    {"number": 3628, "slug": "maximum-number-of-subsequences-after-one-inserting", "title": "Maximum Number of Subsequences After One Inserting", "difficulty": "Medium", "tags": ["String", "Dynamic Programming", "Greedy", "Prefix Sum"], "similar_problems": []},
    {"number": 3638, "slug": "maximum-balanced-shipments", "title": "Maximum Balanced Shipments", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Stack", "Greedy", "Monotonic Stack"], "similar_problems": []},
    {"number": 3640, "slug": "trionic-array-ii", "title": "Trionic Array II", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": []},
    {"number": 3647, "slug": "maximum-weight-in-two-bags", "title": "Maximum Weight in Two Bags", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": []},
    {"number": 3651, "slug": "minimum-cost-path-with-teleportations", "title": "Minimum Cost Path with Teleportations", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Matrix"], "similar_problems": []},
    {"number": 3654, "slug": "minimum-sum-after-divisible-sum-deletions", "title": "Minimum Sum After Divisible Sum Deletions", "difficulty": "Medium", "tags": ["Array", "Hash Table", "Dynamic Programming", "Prefix Sum"], "similar_problems": []},
    {"number": 3660, "slug": "jump-game-ix", "title": "Jump Game IX", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": []},
    {"number": 3661, "slug": "maximum-walls-destroyed-by-robots", "title": "Maximum Walls Destroyed by Robots", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Dynamic Programming", "Sorting"], "similar_problems": []},
    {"number": 3665, "slug": "twisted-mirror-path-count", "title": "Twisted Mirror Path Count", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Matrix"], "similar_problems": []},
    {"number": 3670, "slug": "maximum-product-of-two-integers-with-no-common-bits", "title": "Maximum Product of Two Integers With No Common Bits", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Bit Manipulation"], "similar_problems": [{"slug": "partition-to-k-equal-sum-subsets", "title": "Partition to K Equal Sum Subsets", "difficulty": "Medium"}]},
    {"number": 3685, "slug": "subsequence-sum-after-capping-elements", "title": "Subsequence Sum After Capping Elements", "difficulty": "Medium", "tags": ["Array", "Two Pointers", "Dynamic Programming", "Sorting"], "similar_problems": []},
    {"number": 3686, "slug": "number-of-stable-subsequences", "title": "Number of Stable Subsequences", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": []},
    {"number": 3693, "slug": "climbing-stairs-ii", "title": "Climbing Stairs II", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming"], "similar_problems": []},
    {"number": 3699, "slug": "number-of-zigzag-arrays-i", "title": "Number of ZigZag Arrays I", "difficulty": "Hard", "tags": ["Dynamic Programming", "Prefix Sum"], "similar_problems": []},
    {"number": 3700, "slug": "number-of-zigzag-arrays-ii", "title": "Number of ZigZag Arrays II", "difficulty": "Hard", "tags": ["Math", "Dynamic Programming"], "similar_problems": []},
    {"number": 3704, "slug": "count-no-zero-pairs-that-sum-to-n", "title": "Count No-Zero Pairs That Sum to N", "difficulty": "Hard", "tags": ["Math", "Dynamic Programming"], "similar_problems": []}
]