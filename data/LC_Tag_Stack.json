[
    {"number": 20, "slug": "valid-parentheses", "title": "Valid Parentheses", "difficulty": "Easy", "tags": ["String", "Stack"], "similar_problems": [{"slug": "generate-parentheses", "title": "Generate Parentheses", "difficulty": "Medium"}, {"slug": "longest-valid-parentheses", "title": "Longest Valid Parentheses", "difficulty": "Hard"}, {"slug": "remove-invalid-parentheses", "title": "Remove Invalid Parentheses", "difficulty": "Hard"}, {"slug": "check-if-word-is-valid-after-substitutions", "title": "Check If Word Is Valid After Substitutions", "difficulty": "Medium"}, {"slug": "check-if-a-parentheses-string-can-be-valid", "title": "Check if a Parentheses String Can Be Valid", "difficulty": "Medium"}, {"slug": "move-pieces-to-obtain-a-string", "title": "Move Pieces to Obtain a String", "difficulty": "Medium"}]},
    {"number": 32, "slug": "longest-valid-parentheses", "title": "Longest Valid Parentheses", "difficulty": "Hard", "tags": ["String", "Dynamic Programming", "Stack"], "similar_problems": [{"slug": "valid-parentheses", "title": "Valid Parentheses", "difficulty": "Easy"}]},
    {"number": 42, "slug": "trapping-rain-water", "title": "Trapping Rain Water", "difficulty": "Hard", "tags": ["Array", "Two Pointers", "Dynamic Programming", "Stack", "Monotonic Stack"], "similar_problems": [{"slug": "container-with-most-water", "title": "Container With Most Water", "difficulty": "Medium"}, {"slug": "product-of-array-except-self", "title": "Product of Array Except Self", "difficulty": "Medium"}, {"slug": "trapping-rain-water-ii", "title": "Trapping Rain Water II", "difficulty": "Hard"}, {"slug": "pour-water", "title": "Pour Water", "difficulty": "Medium"}, {"slug": "maximum-value-of-an-ordered-triplet-ii", "title": "Maximum Value of an Ordered Triplet II", "difficulty": "Medium"}]},
    {"number": 71, "slug": "simplify-path", "title": "Simplify Path", "difficulty": "Medium", "tags": ["String", "Stack"], "similar_problems": []},
    {"number": 84, "slug": "largest-rectangle-in-histogram", "title": "Largest Rectangle in Histogram", "difficulty": "Hard", "tags": ["Array", "Stack", "Monotonic Stack"], "similar_problems": [{"slug": "maximal-rectangle", "title": "Maximal Rectangle", "difficulty": "Hard"}, {"slug": "maximum-score-of-a-good-subarray", "title": "Maximum Score of a Good Subarray", "difficulty": "Hard"}]},
    {"number": 85, "slug": "maximal-rectangle", "title": "Maximal Rectangle", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Stack", "Matrix", "Monotonic Stack"], "similar_problems": [{"slug": "largest-rectangle-in-histogram", "title": "Largest Rectangle in Histogram", "difficulty": "Hard"}, {"slug": "maximal-square", "title": "Maximal Square", "difficulty": "Medium"}, {"slug": "find-sorted-submatrices-with-maximum-element-at-most-k", "title": "Find Sorted Submatrices With Maximum Element at Most K", "difficulty": "Hard"}]},
    {"number": 94, "slug": "binary-tree-inorder-traversal", "title": "Binary Tree Inorder Traversal", "difficulty": "Easy", "tags": ["Stack", "Tree", "Depth-First Search", "Binary Tree"], "similar_problems": [{"slug": "validate-binary-search-tree", "title": "Validate Binary Search Tree", "difficulty": "Medium"}, {"slug": "binary-tree-preorder-traversal", "title": "Binary Tree Preorder Traversal", "difficulty": "Easy"}, {"slug": "binary-tree-postorder-traversal", "title": "Binary Tree Postorder Traversal", "difficulty": "Easy"}, {"slug": "binary-search-tree-iterator", "title": "Binary Search Tree Iterator", "difficulty": "Medium"}, {"slug": "kth-smallest-element-in-a-bst", "title": "Kth Smallest Element in a BST", "difficulty": "Medium"}, {"slug": "closest-binary-search-tree-value-ii", "title": "Closest Binary Search Tree Value II", "difficulty": "Hard"}, {"slug": "inorder-successor-in-bst", "title": "Inorder Successor in BST", "difficulty": "Medium"}, {"slug": "convert-binary-search-tree-to-sorted-doubly-linked-list", "title": "Convert Binary Search Tree to Sorted Doubly Linked List", "difficulty": "Medium"}, {"slug": "minimum-distance-between-bst-nodes", "title": "Minimum Distance Between BST Nodes", "difficulty": "Easy"}]},
    {"number": 114, "slug": "flatten-binary-tree-to-linked-list", "title": "Flatten Binary Tree to Linked List", "difficulty": "Medium", "tags": ["Linked List", "Stack", "Tree", "Depth-First Search", "Binary Tree"], "similar_problems": [{"slug": "flatten-a-multilevel-doubly-linked-list", "title": "Flatten a Multilevel Doubly Linked List", "difficulty": "Medium"}, {"slug": "correct-a-binary-tree", "title": "Correct a Binary Tree", "difficulty": "Medium"}]},
    {"number": 143, "slug": "reorder-list", "title": "Reorder List", "difficulty": "Medium", "tags": ["Linked List", "Two Pointers", "Stack", "Recursion"], "similar_problems": [{"slug": "delete-the-middle-node-of-a-linked-list", "title": "Delete the Middle Node of a Linked List", "difficulty": "Medium"}, {"slug": "take-k-of-each-character-from-left-and-right", "title": "Take K of Each Character From Left and Right", "difficulty": "Medium"}]},
    {"number": 144, "slug": "binary-tree-preorder-traversal", "title": "Binary Tree Preorder Traversal", "difficulty": "Easy", "tags": ["Stack", "Tree", "Depth-First Search", "Binary Tree"], "similar_problems": [{"slug": "binary-tree-inorder-traversal", "title": "Binary Tree Inorder Traversal", "difficulty": "Easy"}, {"slug": "verify-preorder-sequence-in-binary-search-tree", "title": "Verify Preorder Sequence in Binary Search Tree", "difficulty": "Medium"}, {"slug": "n-ary-tree-preorder-traversal", "title": "N-ary Tree Preorder Traversal", "difficulty": "Easy"}, {"slug": "kth-largest-sum-in-a-binary-tree", "title": "Kth Largest Sum in a Binary Tree", "difficulty": "Medium"}]},
    {"number": 145, "slug": "binary-tree-postorder-traversal", "title": "Binary Tree Postorder Traversal", "difficulty": "Easy", "tags": ["Stack", "Tree", "Depth-First Search", "Binary Tree"], "similar_problems": [{"slug": "binary-tree-inorder-traversal", "title": "Binary Tree Inorder Traversal", "difficulty": "Easy"}, {"slug": "n-ary-tree-postorder-traversal", "title": "N-ary Tree Postorder Traversal", "difficulty": "Easy"}, {"slug": "minimum-fuel-cost-to-report-to-the-capital", "title": "Minimum Fuel Cost to Report to the Capital", "difficulty": "Medium"}]},
    {"number": 150, "slug": "evaluate-reverse-polish-notation", "title": "Evaluate Reverse Polish Notation", "difficulty": "Medium", "tags": ["Array", "Math", "Stack"], "similar_problems": [{"slug": "basic-calculator", "title": "Basic Calculator", "difficulty": "Hard"}, {"slug": "expression-add-operators", "title": "Expression Add Operators", "difficulty": "Hard"}]},
    {"number": 155, "slug": "min-stack", "title": "Min Stack", "difficulty": "Medium", "tags": ["Stack", "Design"], "similar_problems": [{"slug": "sliding-window-maximum", "title": "Sliding Window Maximum", "difficulty": "Hard"}, {"slug": "max-stack", "title": "Max Stack", "difficulty": "Hard"}]},
    {"number": 173, "slug": "binary-search-tree-iterator", "title": "Binary Search Tree Iterator", "difficulty": "Medium", "tags": ["Stack", "Tree", "Design", "Binary Search Tree", "Binary Tree", "Iterator"], "similar_problems": [{"slug": "binary-tree-inorder-traversal", "title": "Binary Tree Inorder Traversal", "difficulty": "Easy"}, {"slug": "flatten-2d-vector", "title": "Flatten 2D Vector", "difficulty": "Medium"}, {"slug": "zigzag-iterator", "title": "Zigzag Iterator", "difficulty": "Medium"}, {"slug": "peeking-iterator", "title": "Peeking Iterator", "difficulty": "Medium"}, {"slug": "inorder-successor-in-bst", "title": "Inorder Successor in BST", "difficulty": "Medium"}, {"slug": "binary-search-tree-iterator-ii", "title": "Binary Search Tree Iterator II", "difficulty": "Medium"}]},
    {"number": 224, "slug": "basic-calculator", "title": "Basic Calculator", "difficulty": "Hard", "tags": ["Math", "String", "Stack", "Recursion"], "similar_problems": [{"slug": "evaluate-reverse-polish-notation", "title": "Evaluate Reverse Polish Notation", "difficulty": "Medium"}, {"slug": "basic-calculator-ii", "title": "Basic Calculator II", "difficulty": "Medium"}, {"slug": "different-ways-to-add-parentheses", "title": "Different Ways to Add Parentheses", "difficulty": "Medium"}, {"slug": "expression-add-operators", "title": "Expression Add Operators", "difficulty": "Hard"}, {"slug": "basic-calculator-iii", "title": "Basic Calculator III", "difficulty": "Hard"}, {"slug": "the-score-of-students-solving-math-expression", "title": "The Score of Students Solving Math Expression", "difficulty": "Hard"}, {"slug": "minimize-result-by-adding-parentheses-to-expression", "title": "Minimize Result by Adding Parentheses to Expression", "difficulty": "Medium"}]},
    {"number": 225, "slug": "implement-stack-using-queues", "title": "Implement Stack using Queues", "difficulty": "Easy", "tags": ["Stack", "Design", "Queue"], "similar_problems": [{"slug": "implement-queue-using-stacks", "title": "Implement Queue using Stacks", "difficulty": "Easy"}]},
    {"number": 227, "slug": "basic-calculator-ii", "title": "Basic Calculator II", "difficulty": "Medium", "tags": ["Math", "String", "Stack"], "similar_problems": [{"slug": "basic-calculator", "title": "Basic Calculator", "difficulty": "Hard"}, {"slug": "expression-add-operators", "title": "Expression Add Operators", "difficulty": "Hard"}, {"slug": "basic-calculator-iii", "title": "Basic Calculator III", "difficulty": "Hard"}]},
    {"number": 232, "slug": "implement-queue-using-stacks", "title": "Implement Queue using Stacks", "difficulty": "Easy", "tags": ["Stack", "Design", "Queue"], "similar_problems": [{"slug": "implement-stack-using-queues", "title": "Implement Stack using Queues", "difficulty": "Easy"}]},
    {"number": 234, "slug": "palindrome-linked-list", "title": "Palindrome Linked List", "difficulty": "Easy", "tags": ["Linked List", "Two Pointers", "Stack", "Recursion"], "similar_problems": [{"slug": "palindrome-number", "title": "Palindrome Number", "difficulty": "Easy"}, {"slug": "valid-palindrome", "title": "Valid Palindrome", "difficulty": "Easy"}, {"slug": "reverse-linked-list", "title": "Reverse Linked List", "difficulty": "Easy"}, {"slug": "maximum-twin-sum-of-a-linked-list", "title": "Maximum Twin Sum of a Linked List", "difficulty": "Medium"}]},
    {"number": 255, "slug": "verify-preorder-sequence-in-binary-search-tree", "title": "Verify Preorder Sequence in Binary Search Tree", "difficulty": "Medium", "tags": ["Array", "Stack", "Tree", "Binary Search Tree", "Recursion", "Monotonic Stack", "Binary Tree"], "similar_problems": [{"slug": "binary-tree-preorder-traversal", "title": "Binary Tree Preorder Traversal", "difficulty": "Easy"}]},
    {"number": 272, "slug": "closest-binary-search-tree-value-ii", "title": "Closest Binary Search Tree Value II", "difficulty": "Hard", "tags": ["Two Pointers", "Stack", "Tree", "Depth-First Search", "Binary Search Tree", "Heap (Priority Queue)", "Binary Tree"], "similar_problems": [{"slug": "binary-tree-inorder-traversal", "title": "Binary Tree Inorder Traversal", "difficulty": "Easy"}, {"slug": "closest-binary-search-tree-value", "title": "Closest Binary Search Tree Value", "difficulty": "Easy"}, {"slug": "closest-nodes-queries-in-a-binary-search-tree", "title": "Closest Nodes Queries in a Binary Search Tree", "difficulty": "Medium"}]},
    {"number": 316, "slug": "remove-duplicate-letters", "title": "Remove Duplicate Letters", "difficulty": "Medium", "tags": ["String", "Stack", "Greedy", "Monotonic Stack"], "similar_problems": [{"slug": "smallest-k-length-subsequence-with-occurrences-of-a-letter", "title": "Smallest K-Length Subsequence With Occurrences of a Letter", "difficulty": "Hard"}]},
    {"number": 321, "slug": "create-maximum-number", "title": "Create Maximum Number", "difficulty": "Hard", "tags": ["Array", "Two Pointers", "Stack", "Greedy", "Monotonic Stack"], "similar_problems": [{"slug": "remove-k-digits", "title": "Remove K Digits", "difficulty": "Medium"}, {"slug": "maximum-swap", "title": "Maximum Swap", "difficulty": "Medium"}]},
    {"number": 331, "slug": "verify-preorder-serialization-of-a-binary-tree", "title": "Verify Preorder Serialization of a Binary Tree", "difficulty": "Medium", "tags": ["String", "Stack", "Tree", "Binary Tree"], "similar_problems": []},
    {"number": 341, "slug": "flatten-nested-list-iterator", "title": "Flatten Nested List Iterator", "difficulty": "Medium", "tags": ["Stack", "Tree", "Depth-First Search", "Design", "Queue", "Iterator"], "similar_problems": [{"slug": "flatten-2d-vector", "title": "Flatten 2D Vector", "difficulty": "Medium"}, {"slug": "zigzag-iterator", "title": "Zigzag Iterator", "difficulty": "Medium"}, {"slug": "mini-parser", "title": "Mini Parser", "difficulty": "Medium"}, {"slug": "array-nesting", "title": "Array Nesting", "difficulty": "Medium"}]},
    {"number": 364, "slug": "nested-list-weight-sum-ii", "title": "Nested List Weight Sum II", "difficulty": "Medium", "tags": ["Stack", "Depth-First Search", "Breadth-First Search"], "similar_problems": [{"slug": "nested-list-weight-sum", "title": "Nested List Weight Sum", "difficulty": "Medium"}, {"slug": "array-nesting", "title": "Array Nesting", "difficulty": "Medium"}]},
    {"number": 385, "slug": "mini-parser", "title": "Mini Parser", "difficulty": "Medium", "tags": ["String", "Stack", "Depth-First Search"], "similar_problems": [{"slug": "flatten-nested-list-iterator", "title": "Flatten Nested List Iterator", "difficulty": "Medium"}, {"slug": "ternary-expression-parser", "title": "Ternary Expression Parser", "difficulty": "Medium"}, {"slug": "remove-comments", "title": "Remove Comments", "difficulty": "Medium"}]},
    {"number": 388, "slug": "longest-absolute-file-path", "title": "Longest Absolute File Path", "difficulty": "Medium", "tags": ["String", "Stack", "Depth-First Search"], "similar_problems": []},
    {"number": 394, "slug": "decode-string", "title": "Decode String", "difficulty": "Medium", "tags": ["String", "Stack", "Recursion"], "similar_problems": [{"slug": "encode-string-with-shortest-length", "title": "Encode String with Shortest Length", "difficulty": "Hard"}, {"slug": "number-of-atoms", "title": "Number of Atoms", "difficulty": "Hard"}, {"slug": "brace-expansion", "title": "Brace Expansion", "difficulty": "Medium"}]},
    {"number": 402, "slug": "remove-k-digits", "title": "Remove K Digits", "difficulty": "Medium", "tags": ["String", "Stack", "Greedy", "Monotonic Stack"], "similar_problems": [{"slug": "create-maximum-number", "title": "Create Maximum Number", "difficulty": "Hard"}, {"slug": "monotone-increasing-digits", "title": "Monotone Increasing Digits", "difficulty": "Medium"}, {"slug": "find-the-most-competitive-subsequence", "title": "Find the Most Competitive Subsequence", "difficulty": "Medium"}, {"slug": "append-k-integers-with-minimal-sum", "title": "Append K Integers With Minimal Sum", "difficulty": "Medium"}, {"slug": "remove-digit-from-number-to-maximize-result", "title": "Remove Digit From Number to Maximize Result", "difficulty": "Easy"}, {"slug": "minimum-operations-to-make-a-special-number", "title": "Minimum Operations to Make a Special Number", "difficulty": "Medium"}]},
    {"number": 426, "slug": "convert-binary-search-tree-to-sorted-doubly-linked-list", "title": "Convert Binary Search Tree to Sorted Doubly Linked List", "difficulty": "Medium", "tags": ["Linked List", "Stack", "Tree", "Depth-First Search", "Binary Search Tree", "Binary Tree", "Doubly-Linked List"], "similar_problems": [{"slug": "binary-tree-inorder-traversal", "title": "Binary Tree Inorder Traversal", "difficulty": "Easy"}]},
    {"number": 439, "slug": "ternary-expression-parser", "title": "Ternary Expression Parser", "difficulty": "Medium", "tags": ["String", "Stack", "Recursion"], "similar_problems": [{"slug": "mini-parser", "title": "Mini Parser", "difficulty": "Medium"}, {"slug": "remove-comments", "title": "Remove Comments", "difficulty": "Medium"}, {"slug": "parse-lisp-expression", "title": "Parse Lisp Expression", "difficulty": "Hard"}]},
    {"number": 445, "slug": "add-two-numbers-ii", "title": "Add Two Numbers II", "difficulty": "Medium", "tags": ["Linked List", "Math", "Stack"], "similar_problems": [{"slug": "add-two-numbers", "title": "Add Two Numbers", "difficulty": "Medium"}, {"slug": "add-two-polynomials-represented-as-linked-lists", "title": "Add Two Polynomials Represented as Linked Lists", "difficulty": "Medium"}]},
    {"number": 456, "slug": "132-pattern", "title": "132 Pattern", "difficulty": "Medium", "tags": ["Array", "Binary Search", "Stack", "Monotonic Stack", "Ordered Set"], "similar_problems": []},
    {"number": 484, "slug": "find-permutation", "title": "Find Permutation", "difficulty": "Medium", "tags": ["Array", "String", "Stack", "Greedy"], "similar_problems": [{"slug": "using-a-robot-to-print-the-lexicographically-smallest-string", "title": "Using a Robot to Print the Lexicographically Smallest String", "difficulty": "Medium"}]},
    {"number": 488, "slug": "zuma-game", "title": "Zuma Game", "difficulty": "Hard", "tags": ["String", "Dynamic Programming", "Stack", "Breadth-First Search", "Memoization"], "similar_problems": []},
    {"number": 496, "slug": "next-greater-element-i", "title": "Next Greater Element I", "difficulty": "Easy", "tags": ["Array", "Hash Table", "Stack", "Monotonic Stack"], "similar_problems": [{"slug": "next-greater-element-ii", "title": "Next Greater Element II", "difficulty": "Medium"}, {"slug": "next-greater-element-iii", "title": "Next Greater Element III", "difficulty": "Medium"}, {"slug": "daily-temperatures", "title": "Daily Temperatures", "difficulty": "Medium"}, {"slug": "sum-of-subarray-ranges", "title": "Sum of Subarray Ranges", "difficulty": "Medium"}, {"slug": "sum-of-total-strength-of-wizards", "title": "Sum of Total Strength of Wizards", "difficulty": "Hard"}, {"slug": "next-greater-element-iv", "title": "Next Greater Element IV", "difficulty": "Hard"}, {"slug": "remove-nodes-from-linked-list", "title": "Remove Nodes From Linked List", "difficulty": "Medium"}, {"slug": "smallest-missing-integer-greater-than-sequential-prefix-sum", "title": "Smallest Missing Integer Greater Than Sequential Prefix Sum", "difficulty": "Easy"}]},
    {"number": 503, "slug": "next-greater-element-ii", "title": "Next Greater Element II", "difficulty": "Medium", "tags": ["Array", "Stack", "Monotonic Stack"], "similar_problems": [{"slug": "next-greater-element-i", "title": "Next Greater Element I", "difficulty": "Easy"}, {"slug": "next-greater-element-iii", "title": "Next Greater Element III", "difficulty": "Medium"}, {"slug": "maximum-and-minimum-sums-of-at-most-size-k-subarrays", "title": "Maximum and Minimum Sums of at Most Size K Subarrays", "difficulty": "Hard"}]},
    {"number": 536, "slug": "construct-binary-tree-from-string", "title": "Construct Binary Tree from String", "difficulty": "Medium", "tags": ["String", "Stack", "Tree", "Depth-First Search", "Binary Tree"], "similar_problems": [{"slug": "construct-string-from-binary-tree", "title": "Construct String from Binary Tree", "difficulty": "Medium"}]},
    {"number": 581, "slug": "shortest-unsorted-continuous-subarray", "title": "Shortest Unsorted Continuous Subarray", "difficulty": "Medium", "tags": ["Array", "Two Pointers", "Stack", "Greedy", "Sorting", "Monotonic Stack"], "similar_problems": [{"slug": "smallest-subarray-to-sort-in-every-sliding-window", "title": "Smallest Subarray to Sort in Every Sliding Window", "difficulty": "Medium"}]},
    {"number": 589, "slug": "n-ary-tree-preorder-traversal", "title": "N-ary Tree Preorder Traversal", "difficulty": "Easy", "tags": ["Stack", "Tree", "Depth-First Search"], "similar_problems": [{"slug": "binary-tree-preorder-traversal", "title": "Binary Tree Preorder Traversal", "difficulty": "Easy"}, {"slug": "n-ary-tree-level-order-traversal", "title": "N-ary Tree Level Order Traversal", "difficulty": "Medium"}, {"slug": "n-ary-tree-postorder-traversal", "title": "N-ary Tree Postorder Traversal", "difficulty": "Easy"}]},
    {"number": 590, "slug": "n-ary-tree-postorder-traversal", "title": "N-ary Tree Postorder Traversal", "difficulty": "Easy", "tags": ["Stack", "Tree", "Depth-First Search"], "similar_problems": [{"slug": "binary-tree-postorder-traversal", "title": "Binary Tree Postorder Traversal", "difficulty": "Easy"}, {"slug": "n-ary-tree-level-order-traversal", "title": "N-ary Tree Level Order Traversal", "difficulty": "Medium"}, {"slug": "n-ary-tree-preorder-traversal", "title": "N-ary Tree Preorder Traversal", "difficulty": "Easy"}]},
    {"number": 591, "slug": "tag-validator", "title": "Tag Validator", "difficulty": "Hard", "tags": ["String", "Stack"], "similar_problems": [{"slug": "add-bold-tag-in-string", "title": "Add Bold Tag in String", "difficulty": "Medium"}]},
    {"number": 636, "slug": "exclusive-time-of-functions", "title": "Exclusive Time of Functions", "difficulty": "Medium", "tags": ["Array", "Stack"], "similar_problems": []},
    {"number": 654, "slug": "maximum-binary-tree", "title": "Maximum Binary Tree", "difficulty": "Medium", "tags": ["Array", "Divide and Conquer", "Stack", "Tree", "Monotonic Stack", "Binary Tree"], "similar_problems": [{"slug": "maximum-binary-tree-ii", "title": "Maximum Binary Tree II", "difficulty": "Medium"}]},
    {"number": 678, "slug": "valid-parenthesis-string", "title": "Valid Parenthesis String", "difficulty": "Medium", "tags": ["String", "Dynamic Programming", "Stack", "Greedy"], "similar_problems": [{"slug": "special-binary-string", "title": "Special Binary String", "difficulty": "Hard"}, {"slug": "check-if-a-parentheses-string-can-be-valid", "title": "Check if a Parentheses String Can Be Valid", "difficulty": "Medium"}]},
    {"number": 682, "slug": "baseball-game", "title": "Baseball Game", "difficulty": "Easy", "tags": ["Array", "Stack", "Simulation"], "similar_problems": [{"slug": "crawler-log-folder", "title": "Crawler Log Folder", "difficulty": "Easy"}]},
    {"number": 716, "slug": "max-stack", "title": "Max Stack", "difficulty": "Hard", "tags": ["Linked List", "Stack", "Design", "Doubly-Linked List", "Ordered Set"], "similar_problems": [{"slug": "min-stack", "title": "Min Stack", "difficulty": "Medium"}]},
    {"number": 726, "slug": "number-of-atoms", "title": "Number of Atoms", "difficulty": "Hard", "tags": ["Hash Table", "String", "Stack", "Sorting"], "similar_problems": [{"slug": "decode-string", "title": "Decode String", "difficulty": "Medium"}, {"slug": "encode-string-with-shortest-length", "title": "Encode String with Shortest Length", "difficulty": "Hard"}, {"slug": "parse-lisp-expression", "title": "Parse Lisp Expression", "difficulty": "Hard"}]},
    {"number": 735, "slug": "asteroid-collision", "title": "Asteroid Collision", "difficulty": "Medium", "tags": ["Array", "Stack", "Simulation"], "similar_problems": [{"slug": "can-place-flowers", "title": "Can Place Flowers", "difficulty": "Easy"}, {"slug": "destroying-asteroids", "title": "Destroying Asteroids", "difficulty": "Medium"}, {"slug": "count-collisions-on-a-road", "title": "Count Collisions on a Road", "difficulty": "Medium"}, {"slug": "robot-collisions", "title": "Robot Collisions", "difficulty": "Hard"}]},
    {"number": 736, "slug": "parse-lisp-expression", "title": "Parse Lisp Expression", "difficulty": "Hard", "tags": ["Hash Table", "String", "Stack", "Recursion"], "similar_problems": [{"slug": "ternary-expression-parser", "title": "Ternary Expression Parser", "difficulty": "Medium"}, {"slug": "number-of-atoms", "title": "Number of Atoms", "difficulty": "Hard"}, {"slug": "basic-calculator-iv", "title": "Basic Calculator IV", "difficulty": "Hard"}]},
    {"number": 739, "slug": "daily-temperatures", "title": "Daily Temperatures", "difficulty": "Medium", "tags": ["Array", "Stack", "Monotonic Stack"], "similar_problems": [{"slug": "next-greater-element-i", "title": "Next Greater Element I", "difficulty": "Easy"}, {"slug": "online-stock-span", "title": "Online Stock Span", "difficulty": "Medium"}]},
    {"number": 768, "slug": "max-chunks-to-make-sorted-ii", "title": "Max Chunks To Make Sorted II", "difficulty": "Hard", "tags": ["Array", "Stack", "Greedy", "Sorting", "Monotonic Stack"], "similar_problems": [{"slug": "max-chunks-to-make-sorted", "title": "Max Chunks To Make Sorted", "difficulty": "Medium"}]},
    {"number": 769, "slug": "max-chunks-to-make-sorted", "title": "Max Chunks To Make Sorted", "difficulty": "Medium", "tags": ["Array", "Stack", "Greedy", "Sorting", "Monotonic Stack"], "similar_problems": [{"slug": "max-chunks-to-make-sorted-ii", "title": "Max Chunks To Make Sorted II", "difficulty": "Hard"}]},
    {"number": 770, "slug": "basic-calculator-iv", "title": "Basic Calculator IV", "difficulty": "Hard", "tags": ["Hash Table", "Math", "String", "Stack", "Recursion"], "similar_problems": [{"slug": "parse-lisp-expression", "title": "Parse Lisp Expression", "difficulty": "Hard"}, {"slug": "basic-calculator-iii", "title": "Basic Calculator III", "difficulty": "Hard"}]},
    {"number": 772, "slug": "basic-calculator-iii", "title": "Basic Calculator III", "difficulty": "Hard", "tags": ["Math", "String", "Stack", "Recursion"], "similar_problems": [{"slug": "basic-calculator", "title": "Basic Calculator", "difficulty": "Hard"}, {"slug": "basic-calculator-ii", "title": "Basic Calculator II", "difficulty": "Medium"}, {"slug": "basic-calculator-iv", "title": "Basic Calculator IV", "difficulty": "Hard"}, {"slug": "build-binary-expression-tree-from-infix-expression", "title": "Build Binary Expression Tree From Infix Expression", "difficulty": "Hard"}]},
    {"number": 844, "slug": "backspace-string-compare", "title": "Backspace String Compare", "difficulty": "Easy", "tags": ["Two Pointers", "String", "Stack", "Simulation"], "similar_problems": [{"slug": "crawler-log-folder", "title": "Crawler Log Folder", "difficulty": "Easy"}, {"slug": "removing-stars-from-a-string", "title": "Removing Stars From a String", "difficulty": "Medium"}]},
    {"number": 853, "slug": "car-fleet", "title": "Car Fleet", "difficulty": "Medium", "tags": ["Array", "Stack", "Sorting", "Monotonic Stack"], "similar_problems": [{"slug": "car-fleet-ii", "title": "Car Fleet II", "difficulty": "Hard"}, {"slug": "count-collisions-on-a-road", "title": "Count Collisions on a Road", "difficulty": "Medium"}]},
    {"number": 856, "slug": "score-of-parentheses", "title": "Score of Parentheses", "difficulty": "Medium", "tags": ["String", "Stack"], "similar_problems": []},
    {"number": 880, "slug": "decoded-string-at-index", "title": "Decoded String at Index", "difficulty": "Medium", "tags": ["String", "Stack"], "similar_problems": []},
    {"number": 895, "slug": "maximum-frequency-stack", "title": "Maximum Frequency Stack", "difficulty": "Hard", "tags": ["Hash Table", "Stack", "Design", "Ordered Set"], "similar_problems": []},
    {"number": 897, "slug": "increasing-order-search-tree", "title": "Increasing Order Search Tree", "difficulty": "Easy", "tags": ["Stack", "Tree", "Depth-First Search", "Binary Search Tree", "Binary Tree"], "similar_problems": []},
    {"number": 901, "slug": "online-stock-span", "title": "Online Stock Span", "difficulty": "Medium", "tags": ["Stack", "Design", "Monotonic Stack", "Data Stream"], "similar_problems": [{"slug": "daily-temperatures", "title": "Daily Temperatures", "difficulty": "Medium"}]},
    {"number": 907, "slug": "sum-of-subarray-minimums", "title": "Sum of Subarray Minimums", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Stack", "Monotonic Stack"], "similar_problems": [{"slug": "sum-of-subarray-ranges", "title": "Sum of Subarray Ranges", "difficulty": "Medium"}, {"slug": "sum-of-total-strength-of-wizards", "title": "Sum of Total Strength of Wizards", "difficulty": "Hard"}]},
    {"number": 921, "slug": "minimum-add-to-make-parentheses-valid", "title": "Minimum Add to Make Parentheses Valid", "difficulty": "Medium", "tags": ["String", "Stack", "Greedy"], "similar_problems": [{"slug": "minimum-number-of-swaps-to-make-the-string-balanced", "title": "Minimum Number of Swaps to Make the String Balanced", "difficulty": "Medium"}]},
    {"number": 936, "slug": "stamping-the-sequence", "title": "Stamping The Sequence", "difficulty": "Hard", "tags": ["String", "Stack", "Greedy", "Queue"], "similar_problems": []},
    {"number": 946, "slug": "validate-stack-sequences", "title": "Validate Stack Sequences", "difficulty": "Medium", "tags": ["Array", "Stack", "Simulation"], "similar_problems": []},
    {"number": 962, "slug": "maximum-width-ramp", "title": "Maximum Width Ramp", "difficulty": "Medium", "tags": ["Array", "Two Pointers", "Stack", "Monotonic Stack"], "similar_problems": []},
    {"number": 975, "slug": "odd-even-jump", "title": "Odd Even Jump", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Stack", "Sorting", "Monotonic Stack", "Ordered Set"], "similar_problems": []},
    {"number": 1003, "slug": "check-if-word-is-valid-after-substitutions", "title": "Check If Word Is Valid After Substitutions", "difficulty": "Medium", "tags": ["String", "Stack"], "similar_problems": [{"slug": "valid-parentheses", "title": "Valid Parentheses", "difficulty": "Easy"}]},
    {"number": 1006, "slug": "clumsy-factorial", "title": "Clumsy Factorial", "difficulty": "Medium", "tags": ["Math", "Stack", "Simulation"], "similar_problems": [{"slug": "count-the-number-of-computer-unlocking-permutations", "title": "Count the Number of Computer Unlocking Permutations", "difficulty": "Medium"}]},
    {"number": 1008, "slug": "construct-binary-search-tree-from-preorder-traversal", "title": "Construct Binary Search Tree from Preorder Traversal", "difficulty": "Medium", "tags": ["Array", "Stack", "Tree", "Binary Search Tree", "Monotonic Stack", "Binary Tree"], "similar_problems": []},
    {"number": 1019, "slug": "next-greater-node-in-linked-list", "title": "Next Greater Node In Linked List", "difficulty": "Medium", "tags": ["Array", "Linked List", "Stack", "Monotonic Stack"], "similar_problems": []},
    {"number": 1021, "slug": "remove-outermost-parentheses", "title": "Remove Outermost Parentheses", "difficulty": "Easy", "tags": ["String", "Stack"], "similar_problems": []},
    {"number": 1047, "slug": "remove-all-adjacent-duplicates-in-string", "title": "Remove All Adjacent Duplicates In String", "difficulty": "Easy", "tags": ["String", "Stack"], "similar_problems": [{"slug": "remove-all-adjacent-duplicates-in-string-ii", "title": "Remove All Adjacent Duplicates in String II", "difficulty": "Medium"}, {"slug": "removing-stars-from-a-string", "title": "Removing Stars From a String", "difficulty": "Medium"}, {"slug": "minimize-string-length", "title": "Minimize String Length", "difficulty": "Easy"}]},
    {"number": 1063, "slug": "number-of-valid-subarrays", "title": "Number of Valid Subarrays", "difficulty": "Hard", "tags": ["Array", "Stack", "Monotonic Stack"], "similar_problems": [{"slug": "number-of-smooth-descent-periods-of-a-stock", "title": "Number of Smooth Descent Periods of a Stock", "difficulty": "Medium"}]},
    {"number": 1081, "slug": "smallest-subsequence-of-distinct-characters", "title": "Smallest Subsequence of Distinct Characters", "difficulty": "Medium", "tags": ["String", "Stack", "Greedy", "Monotonic Stack"], "similar_problems": [{"slug": "find-the-most-competitive-subsequence", "title": "Find the Most Competitive Subsequence", "difficulty": "Medium"}]},
    {"number": 1096, "slug": "brace-expansion-ii", "title": "Brace Expansion II", "difficulty": "Hard", "tags": ["Hash Table", "String", "Backtracking", "Stack", "Breadth-First Search", "Sorting"], "similar_problems": [{"slug": "brace-expansion", "title": "Brace Expansion", "difficulty": "Medium"}]},
    {"number": 1106, "slug": "parsing-a-boolean-expression", "title": "Parsing A Boolean Expression", "difficulty": "Hard", "tags": ["String", "Stack", "Recursion"], "similar_problems": []},
    {"number": 1111, "slug": "maximum-nesting-depth-of-two-valid-parentheses-strings", "title": "Maximum Nesting Depth of Two Valid Parentheses Strings", "difficulty": "Medium", "tags": ["String", "Stack"], "similar_problems": [{"slug": "maximum-nesting-depth-of-the-parentheses", "title": "Maximum Nesting Depth of the Parentheses", "difficulty": "Easy"}]},
    {"number": 1124, "slug": "longest-well-performing-interval", "title": "Longest Well-Performing Interval", "difficulty": "Medium", "tags": ["Array", "Hash Table", "Stack", "Monotonic Stack", "Prefix Sum"], "similar_problems": []},
    {"number": 1130, "slug": "minimum-cost-tree-from-leaf-values", "title": "Minimum Cost Tree From Leaf Values", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Stack", "Greedy", "Monotonic Stack"], "similar_problems": []},
    {"number": 1172, "slug": "dinner-plate-stacks", "title": "Dinner Plate Stacks", "difficulty": "Hard", "tags": ["Hash Table", "Stack", "Design", "Heap (Priority Queue)"], "similar_problems": []},
    {"number": 1190, "slug": "reverse-substrings-between-each-pair-of-parentheses", "title": "Reverse Substrings Between Each Pair of Parentheses", "difficulty": "Medium", "tags": ["String", "Stack"], "similar_problems": []},
    {"number": 1209, "slug": "remove-all-adjacent-duplicates-in-string-ii", "title": "Remove All Adjacent Duplicates in String II", "difficulty": "Medium", "tags": ["String", "Stack"], "similar_problems": [{"slug": "remove-all-adjacent-duplicates-in-string", "title": "Remove All Adjacent Duplicates In String", "difficulty": "Easy"}, {"slug": "replace-non-coprime-numbers-in-array", "title": "Replace Non-Coprime Numbers in Array", "difficulty": "Hard"}, {"slug": "minimize-string-length", "title": "Minimize String Length", "difficulty": "Easy"}]},
    {"number": 1214, "slug": "two-sum-bsts", "title": "Two Sum BSTs", "difficulty": "Medium", "tags": ["Two Pointers", "Binary Search", "Stack", "Tree", "Depth-First Search", "Binary Search Tree", "Binary Tree"], "similar_problems": [{"slug": "two-sum-iv-input-is-a-bst", "title": "Two Sum IV - Input is a BST", "difficulty": "Easy"}]},
    {"number": 1249, "slug": "minimum-remove-to-make-valid-parentheses", "title": "Minimum Remove to Make Valid Parentheses", "difficulty": "Medium", "tags": ["String", "Stack"], "similar_problems": [{"slug": "minimum-number-of-swaps-to-make-the-string-balanced", "title": "Minimum Number of Swaps to Make the String Balanced", "difficulty": "Medium"}, {"slug": "check-if-a-parentheses-string-can-be-valid", "title": "Check if a Parentheses String Can Be Valid", "difficulty": "Medium"}]},
    {"number": 1265, "slug": "print-immutable-linked-list-in-reverse", "title": "Print Immutable Linked List in Reverse", "difficulty": "Medium", "tags": ["Linked List", "Two Pointers", "Stack", "Recursion"], "similar_problems": []},
    {"number": 1381, "slug": "design-a-stack-with-increment-operation", "title": "Design a Stack With Increment Operation", "difficulty": "Medium", "tags": ["Array", "Stack", "Design"], "similar_problems": []},
    {"number": 1441, "slug": "build-an-array-with-stack-operations", "title": "Build an Array With Stack Operations", "difficulty": "Medium", "tags": ["Array", "Stack", "Simulation"], "similar_problems": [{"slug": "minimum-operations-to-collect-elements", "title": "Minimum Operations to Collect Elements", "difficulty": "Easy"}]},
    {"number": 1472, "slug": "design-browser-history", "title": "Design Browser History", "difficulty": "Medium", "tags": ["Array", "Linked List", "Stack", "Design", "Doubly-Linked List", "Data Stream"], "similar_problems": [{"slug": "design-video-sharing-platform", "title": "Design Video Sharing Platform", "difficulty": "Hard"}]},
    {"number": 1475, "slug": "final-prices-with-a-special-discount-in-a-shop", "title": "Final Prices With a Special Discount in a Shop", "difficulty": "Easy", "tags": ["Array", "Stack", "Monotonic Stack"], "similar_problems": []},
    {"number": 1504, "slug": "count-submatrices-with-all-ones", "title": "Count Submatrices With All Ones", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Stack", "Matrix", "Monotonic Stack"], "similar_problems": [{"slug": "count-submatrices-with-equal-frequency-of-x-and-y", "title": "Count Submatrices With Equal Frequency of X and Y", "difficulty": "Medium"}]},
    {"number": 1526, "slug": "minimum-number-of-increments-on-subarrays-to-form-a-target-array", "title": "Minimum Number of Increments on Subarrays to Form a Target Array", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Stack", "Greedy", "Monotonic Stack"], "similar_problems": []},
    {"number": 1541, "slug": "minimum-insertions-to-balance-a-parentheses-string", "title": "Minimum Insertions to Balance a Parentheses String", "difficulty": "Medium", "tags": ["String", "Stack", "Greedy"], "similar_problems": [{"slug": "minimum-number-of-swaps-to-make-the-string-balanced", "title": "Minimum Number of Swaps to Make the String Balanced", "difficulty": "Medium"}]},
    {"number": 1544, "slug": "make-the-string-great", "title": "Make The String Great", "difficulty": "Easy", "tags": ["String", "Stack"], "similar_problems": []},
    {"number": 1574, "slug": "shortest-subarray-to-be-removed-to-make-array-sorted", "title": "Shortest Subarray to be Removed to Make Array Sorted", "difficulty": "Medium", "tags": ["Array", "Two Pointers", "Binary Search", "Stack", "Monotonic Stack"], "similar_problems": [{"slug": "count-the-number-of-incremovable-subarrays-ii", "title": "Count the Number of Incremovable Subarrays II", "difficulty": "Hard"}, {"slug": "count-the-number-of-incremovable-subarrays-i", "title": "Count the Number of Incremovable Subarrays I", "difficulty": "Easy"}]},
    {"number": 1586, "slug": "binary-search-tree-iterator-ii", "title": "Binary Search Tree Iterator II", "difficulty": "Medium", "tags": ["Stack", "Tree", "Design", "Binary Search Tree", "Binary Tree", "Iterator"], "similar_problems": [{"slug": "binary-search-tree-iterator", "title": "Binary Search Tree Iterator", "difficulty": "Medium"}]},
    {"number": 1597, "slug": "build-binary-expression-tree-from-infix-expression", "title": "Build Binary Expression Tree From Infix Expression", "difficulty": "Hard", "tags": ["String", "Stack", "Tree", "Binary Tree"], "similar_problems": [{"slug": "basic-calculator-iii", "title": "Basic Calculator III", "difficulty": "Hard"}, {"slug": "check-if-two-expression-trees-are-equivalent", "title": "Check If Two Expression Trees are Equivalent", "difficulty": "Medium"}]},
    {"number": 1598, "slug": "crawler-log-folder", "title": "Crawler Log Folder", "difficulty": "Easy", "tags": ["Array", "String", "Stack"], "similar_problems": [{"slug": "baseball-game", "title": "Baseball Game", "difficulty": "Easy"}, {"slug": "backspace-string-compare", "title": "Backspace String Compare", "difficulty": "Easy"}]},
    {"number": 1614, "slug": "maximum-nesting-depth-of-the-parentheses", "title": "Maximum Nesting Depth of the Parentheses", "difficulty": "Easy", "tags": ["String", "Stack"], "similar_problems": [{"slug": "maximum-nesting-depth-of-two-valid-parentheses-strings", "title": "Maximum Nesting Depth of Two Valid Parentheses Strings", "difficulty": "Medium"}]},
    {"number": 1628, "slug": "design-an-expression-tree-with-evaluate-function", "title": "Design an Expression Tree With Evaluate Function", "difficulty": "Medium", "tags": ["Array", "Math", "Stack", "Tree", "Design", "Binary Tree"], "similar_problems": [{"slug": "minimum-flips-in-binary-tree-to-get-result", "title": "Minimum Flips in Binary Tree to Get Result", "difficulty": "Hard"}, {"slug": "evaluate-boolean-binary-tree", "title": "Evaluate Boolean Binary Tree", "difficulty": "Easy"}]},
    {"number": 1653, "slug": "minimum-deletions-to-make-string-balanced", "title": "Minimum Deletions to Make String Balanced", "difficulty": "Medium", "tags": ["String", "Dynamic Programming", "Stack"], "similar_problems": [{"slug": "check-if-all-as-appears-before-all-bs", "title": "Check if All A's Appears Before All B's", "difficulty": "Easy"}]},
    {"number": 1673, "slug": "find-the-most-competitive-subsequence", "title": "Find the Most Competitive Subsequence", "difficulty": "Medium", "tags": ["Array", "Stack", "Greedy", "Monotonic Stack"], "similar_problems": [{"slug": "remove-k-digits", "title": "Remove K Digits", "difficulty": "Medium"}, {"slug": "smallest-subsequence-of-distinct-characters", "title": "Smallest Subsequence of Distinct Characters", "difficulty": "Medium"}]},
    {"number": 1700, "slug": "number-of-students-unable-to-eat-lunch", "title": "Number of Students Unable to Eat Lunch", "difficulty": "Easy", "tags": ["Array", "Stack", "Queue", "Simulation"], "similar_problems": [{"slug": "time-needed-to-buy-tickets", "title": "Time Needed to Buy Tickets", "difficulty": "Easy"}]},
    {"number": 1717, "slug": "maximum-score-from-removing-substrings", "title": "Maximum Score From Removing Substrings", "difficulty": "Medium", "tags": ["String", "Stack", "Greedy"], "similar_problems": [{"slug": "count-words-obtained-after-adding-a-letter", "title": "Count Words Obtained After Adding a Letter", "difficulty": "Medium"}]},
    {"number": 1756, "slug": "design-most-recently-used-queue", "title": "Design Most Recently Used Queue", "difficulty": "Medium", "tags": ["Array", "Hash Table", "Stack", "Design", "Binary Indexed Tree", "Ordered Set"], "similar_problems": [{"slug": "lru-cache", "title": "LRU Cache", "difficulty": "Medium"}]},
    {"number": 1762, "slug": "buildings-with-an-ocean-view", "title": "Buildings With an Ocean View", "difficulty": "Medium", "tags": ["Array", "Stack", "Monotonic Stack"], "similar_problems": [{"slug": "number-of-visible-people-in-a-queue", "title": "Number of Visible People in a Queue", "difficulty": "Hard"}, {"slug": "finding-the-number-of-visible-mountains", "title": "Finding the Number of Visible Mountains", "difficulty": "Medium"}]},
    {"number": 1776, "slug": "car-fleet-ii", "title": "Car Fleet II", "difficulty": "Hard", "tags": ["Array", "Math", "Stack", "Heap (Priority Queue)", "Monotonic Stack"], "similar_problems": [{"slug": "car-fleet", "title": "Car Fleet", "difficulty": "Medium"}, {"slug": "count-collisions-on-a-road", "title": "Count Collisions on a Road", "difficulty": "Medium"}]},
    {"number": 1793, "slug": "maximum-score-of-a-good-subarray", "title": "Maximum Score of a Good Subarray", "difficulty": "Hard", "tags": ["Array", "Two Pointers", "Binary Search", "Stack", "Monotonic Stack"], "similar_problems": [{"slug": "largest-rectangle-in-histogram", "title": "Largest Rectangle in Histogram", "difficulty": "Hard"}]},
    {"number": 1856, "slug": "maximum-subarray-min-product", "title": "Maximum Subarray Min-Product", "difficulty": "Medium", "tags": ["Array", "Stack", "Monotonic Stack", "Prefix Sum"], "similar_problems": [{"slug": "subarray-with-elements-greater-than-varying-threshold", "title": "Subarray With Elements Greater Than Varying Threshold", "difficulty": "Hard"}]},
    {"number": 1896, "slug": "minimum-cost-to-change-the-final-value-of-expression", "title": "Minimum Cost to Change the Final Value of Expression", "difficulty": "Hard", "tags": ["Math", "String", "Dynamic Programming", "Stack"], "similar_problems": []},
    {"number": 1910, "slug": "remove-all-occurrences-of-a-substring", "title": "Remove All Occurrences of a Substring", "difficulty": "Medium", "tags": ["String", "Stack", "Simulation"], "similar_problems": [{"slug": "maximum-deletions-on-a-string", "title": "Maximum Deletions on a String", "difficulty": "Hard"}]},
    {"number": 1944, "slug": "number-of-visible-people-in-a-queue", "title": "Number of Visible People in a Queue", "difficulty": "Hard", "tags": ["Array", "Stack", "Monotonic Stack"], "similar_problems": [{"slug": "buildings-with-an-ocean-view", "title": "Buildings With an Ocean View", "difficulty": "Medium"}, {"slug": "sum-of-subarray-ranges", "title": "Sum of Subarray Ranges", "difficulty": "Medium"}, {"slug": "sum-of-total-strength-of-wizards", "title": "Sum of Total Strength of Wizards", "difficulty": "Hard"}, {"slug": "number-of-people-that-can-be-seen-in-a-grid", "title": "Number of People That Can Be Seen in a Grid", "difficulty": "Medium"}, {"slug": "find-building-where-alice-and-bob-can-meet", "title": "Find Building Where Alice and Bob Can Meet", "difficulty": "Hard"}]},
    {"number": 1950, "slug": "maximum-of-minimum-values-in-all-subarrays", "title": "Maximum of Minimum Values in All Subarrays", "difficulty": "Medium", "tags": ["Array", "Stack", "Monotonic Stack"], "similar_problems": []},
    {"number": 1963, "slug": "minimum-number-of-swaps-to-make-the-string-balanced", "title": "Minimum Number of Swaps to Make the String Balanced", "difficulty": "Medium", "tags": ["Two Pointers", "String", "Stack", "Greedy"], "similar_problems": [{"slug": "remove-invalid-parentheses", "title": "Remove Invalid Parentheses", "difficulty": "Hard"}, {"slug": "minimum-add-to-make-parentheses-valid", "title": "Minimum Add to Make Parentheses Valid", "difficulty": "Medium"}, {"slug": "minimum-remove-to-make-valid-parentheses", "title": "Minimum Remove to Make Valid Parentheses", "difficulty": "Medium"}, {"slug": "minimum-insertions-to-balance-a-parentheses-string", "title": "Minimum Insertions to Balance a Parentheses String", "difficulty": "Medium"}]},
    {"number": 1996, "slug": "the-number-of-weak-characters-in-the-game", "title": "The Number of Weak Characters in the Game", "difficulty": "Medium", "tags": ["Array", "Stack", "Greedy", "Sorting", "Monotonic Stack"], "similar_problems": [{"slug": "russian-doll-envelopes", "title": "Russian Doll Envelopes", "difficulty": "Hard"}, {"slug": "maximum-height-by-stacking-cuboids", "title": "Maximum Height by Stacking Cuboids ", "difficulty": "Hard"}]},
    {"number": 2000, "slug": "reverse-prefix-of-word", "title": "Reverse Prefix of Word", "difficulty": "Easy", "tags": ["Two Pointers", "String", "Stack"], "similar_problems": []},
    {"number": 2019, "slug": "the-score-of-students-solving-math-expression", "title": "The Score of Students Solving Math Expression", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Math", "String", "Dynamic Programming", "Stack", "Memoization"], "similar_problems": [{"slug": "basic-calculator", "title": "Basic Calculator", "difficulty": "Hard"}, {"slug": "different-ways-to-add-parentheses", "title": "Different Ways to Add Parentheses", "difficulty": "Medium"}]},
    {"number": 2030, "slug": "smallest-k-length-subsequence-with-occurrences-of-a-letter", "title": "Smallest K-Length Subsequence With Occurrences of a Letter", "difficulty": "Hard", "tags": ["String", "Stack", "Greedy", "Monotonic Stack"], "similar_problems": [{"slug": "remove-duplicate-letters", "title": "Remove Duplicate Letters", "difficulty": "Medium"}, {"slug": "subarray-with-elements-greater-than-varying-threshold", "title": "Subarray With Elements Greater Than Varying Threshold", "difficulty": "Hard"}, {"slug": "find-the-lexicographically-smallest-valid-sequence", "title": "Find the Lexicographically Smallest Valid Sequence", "difficulty": "Medium"}]},
    {"number": 2104, "slug": "sum-of-subarray-ranges", "title": "Sum of Subarray Ranges", "difficulty": "Medium", "tags": ["Array", "Stack", "Monotonic Stack"], "similar_problems": [{"slug": "next-greater-element-i", "title": "Next Greater Element I", "difficulty": "Easy"}, {"slug": "sum-of-subarray-minimums", "title": "Sum of Subarray Minimums", "difficulty": "Medium"}, {"slug": "number-of-visible-people-in-a-queue", "title": "Number of Visible People in a Queue", "difficulty": "Hard"}, {"slug": "count-number-of-homogenous-substrings", "title": "Count Number of Homogenous Substrings", "difficulty": "Medium"}, {"slug": "sum-of-total-strength-of-wizards", "title": "Sum of Total Strength of Wizards", "difficulty": "Hard"}]},
    {"number": 2116, "slug": "check-if-a-parentheses-string-can-be-valid", "title": "Check if a Parentheses String Can Be Valid", "difficulty": "Medium", "tags": ["String", "Stack", "Greedy"], "similar_problems": [{"slug": "valid-parentheses", "title": "Valid Parentheses", "difficulty": "Easy"}, {"slug": "generate-parentheses", "title": "Generate Parentheses", "difficulty": "Medium"}, {"slug": "valid-parenthesis-string", "title": "Valid Parenthesis String", "difficulty": "Medium"}, {"slug": "minimum-remove-to-make-valid-parentheses", "title": "Minimum Remove to Make Valid Parentheses", "difficulty": "Medium"}, {"slug": "check-if-there-is-a-valid-parentheses-string-path", "title": " Check if There Is a Valid Parentheses String Path", "difficulty": "Hard"}]},
    {"number": 2130, "slug": "maximum-twin-sum-of-a-linked-list", "title": "Maximum Twin Sum of a Linked List", "difficulty": "Medium", "tags": ["Linked List", "Two Pointers", "Stack"], "similar_problems": [{"slug": "reverse-linked-list", "title": "Reverse Linked List", "difficulty": "Easy"}, {"slug": "palindrome-linked-list", "title": "Palindrome Linked List", "difficulty": "Easy"}, {"slug": "middle-of-the-linked-list", "title": "Middle of the Linked List", "difficulty": "Easy"}]},
    {"number": 2197, "slug": "replace-non-coprime-numbers-in-array", "title": "Replace Non-Coprime Numbers in Array", "difficulty": "Hard", "tags": ["Array", "Math", "Stack", "Number Theory"], "similar_problems": [{"slug": "remove-all-adjacent-duplicates-in-string-ii", "title": "Remove All Adjacent Duplicates in String II", "difficulty": "Medium"}, {"slug": "number-of-pairs-of-interchangeable-rectangles", "title": "Number of Pairs of Interchangeable Rectangles", "difficulty": "Medium"}, {"slug": "split-the-array-to-make-coprime-products", "title": "Split the Array to Make Coprime Products", "difficulty": "Hard"}]},
    {"number": 2211, "slug": "count-collisions-on-a-road", "title": "Count Collisions on a Road", "difficulty": "Medium", "tags": ["String", "Stack", "Simulation"], "similar_problems": [{"slug": "asteroid-collision", "title": "Asteroid Collision", "difficulty": "Medium"}, {"slug": "car-fleet", "title": "Car Fleet", "difficulty": "Medium"}, {"slug": "last-moment-before-all-ants-fall-out-of-a-plank", "title": "Last Moment Before All Ants Fall Out of a Plank", "difficulty": "Medium"}, {"slug": "car-fleet-ii", "title": "Car Fleet II", "difficulty": "Hard"}]},
    {"number": 2216, "slug": "minimum-deletions-to-make-array-beautiful", "title": "Minimum Deletions to Make Array Beautiful", "difficulty": "Medium", "tags": ["Array", "Stack", "Greedy"], "similar_problems": [{"slug": "minimum-deletions-to-make-character-frequencies-unique", "title": "Minimum Deletions to Make Character Frequencies Unique", "difficulty": "Medium"}, {"slug": "minimum-operations-to-make-the-array-alternating", "title": "Minimum Operations to Make the Array Alternating", "difficulty": "Medium"}]},
    {"number": 2254, "slug": "design-video-sharing-platform", "title": "Design Video Sharing Platform", "difficulty": "Hard", "tags": ["Hash Table", "Stack", "Design", "Ordered Set"], "similar_problems": [{"slug": "tweet-counts-per-frequency", "title": "Tweet Counts Per Frequency", "difficulty": "Medium"}, {"slug": "design-browser-history", "title": "Design Browser History", "difficulty": "Medium"}, {"slug": "most-popular-video-creator", "title": "Most Popular Video Creator", "difficulty": "Medium"}]},
    {"number": 2281, "slug": "sum-of-total-strength-of-wizards", "title": "Sum of Total Strength of Wizards", "difficulty": "Hard", "tags": ["Array", "Stack", "Monotonic Stack", "Prefix Sum"], "similar_problems": [{"slug": "next-greater-element-i", "title": "Next Greater Element I", "difficulty": "Easy"}, {"slug": "sum-of-subarray-minimums", "title": "Sum of Subarray Minimums", "difficulty": "Medium"}, {"slug": "number-of-visible-people-in-a-queue", "title": "Number of Visible People in a Queue", "difficulty": "Hard"}, {"slug": "sum-of-subarray-ranges", "title": "Sum of Subarray Ranges", "difficulty": "Medium"}]},
    {"number": 2282, "slug": "number-of-people-that-can-be-seen-in-a-grid", "title": "Number of People That Can Be Seen in a Grid", "difficulty": "Medium", "tags": ["Array", "Stack", "Matrix", "Monotonic Stack"], "similar_problems": [{"slug": "number-of-visible-people-in-a-queue", "title": "Number of Visible People in a Queue", "difficulty": "Hard"}]},
    {"number": 2289, "slug": "steps-to-make-array-non-decreasing", "title": "Steps to Make Array Non-decreasing", "difficulty": "Medium", "tags": ["Array", "Linked List", "Stack", "Monotonic Stack"], "similar_problems": [{"slug": "remove-one-element-to-make-the-array-strictly-increasing", "title": "Remove One Element to Make the Array Strictly Increasing", "difficulty": "Easy"}]},
    {"number": 2296, "slug": "design-a-text-editor", "title": "Design a Text Editor", "difficulty": "Hard", "tags": ["Linked List", "String", "Stack", "Design", "Simulation", "Doubly-Linked List"], "similar_problems": []},
    {"number": 2297, "slug": "jump-game-viii", "title": "Jump Game VIII", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Stack", "Graph", "Monotonic Stack", "Shortest Path"], "similar_problems": [{"slug": "jump-game-ii", "title": "Jump Game II", "difficulty": "Medium"}, {"slug": "jump-game", "title": "Jump Game", "difficulty": "Medium"}, {"slug": "jump-game-iii", "title": "Jump Game III", "difficulty": "Medium"}, {"slug": "jump-game-iv", "title": "Jump Game IV", "difficulty": "Hard"}, {"slug": "jump-game-v", "title": "Jump Game V", "difficulty": "Hard"}, {"slug": "jump-game-vi", "title": "Jump Game VI", "difficulty": "Medium"}, {"slug": "jump-game-vii", "title": "Jump Game VII", "difficulty": "Medium"}, {"slug": "jump-game-viii", "title": "Jump Game VIII", "difficulty": "Medium"}]},
    {"number": 2334, "slug": "subarray-with-elements-greater-than-varying-threshold", "title": "Subarray With Elements Greater Than Varying Threshold", "difficulty": "Hard", "tags": ["Array", "Stack", "Union Find", "Monotonic Stack"], "similar_problems": [{"slug": "maximum-subarray-min-product", "title": "Maximum Subarray Min-Product", "difficulty": "Medium"}, {"slug": "smallest-k-length-subsequence-with-occurrences-of-a-letter", "title": "Smallest K-Length Subsequence With Occurrences of a Letter", "difficulty": "Hard"}, {"slug": "k-divisible-elements-subarrays", "title": "K Divisible Elements Subarrays", "difficulty": "Medium"}]},
    {"number": 2345, "slug": "finding-the-number-of-visible-mountains", "title": "Finding the Number of Visible Mountains", "difficulty": "Medium", "tags": ["Array", "Stack", "Sorting", "Monotonic Stack"], "similar_problems": [{"slug": "buildings-with-an-ocean-view", "title": "Buildings With an Ocean View", "difficulty": "Medium"}]},
    {"number": 2355, "slug": "maximum-number-of-books-you-can-take", "title": "Maximum Number of Books You Can Take", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Stack", "Monotonic Stack"], "similar_problems": [{"slug": "longest-increasing-subsequence", "title": "Longest Increasing Subsequence", "difficulty": "Medium"}, {"slug": "maximum-ascending-subarray-sum", "title": "Maximum Ascending Subarray Sum", "difficulty": "Easy"}, {"slug": "beautiful-towers-ii", "title": "Beautiful Towers II", "difficulty": "Medium"}, {"slug": "beautiful-towers-i", "title": "Beautiful Towers I", "difficulty": "Medium"}]},
    {"number": 2375, "slug": "construct-smallest-number-from-di-string", "title": "Construct Smallest Number From DI String", "difficulty": "Medium", "tags": ["String", "Backtracking", "Stack", "Greedy"], "similar_problems": [{"slug": "di-string-match", "title": "DI String Match", "difficulty": "Easy"}]},
    {"number": 2390, "slug": "removing-stars-from-a-string", "title": "Removing Stars From a String", "difficulty": "Medium", "tags": ["String", "Stack", "Simulation"], "similar_problems": [{"slug": "backspace-string-compare", "title": "Backspace String Compare", "difficulty": "Easy"}, {"slug": "remove-all-adjacent-duplicates-in-string", "title": "Remove All Adjacent Duplicates In String", "difficulty": "Easy"}]},
    {"number": 2434, "slug": "using-a-robot-to-print-the-lexicographically-smallest-string", "title": "Using a Robot to Print the Lexicographically Smallest String", "difficulty": "Medium", "tags": ["Hash Table", "String", "Stack", "Greedy"], "similar_problems": [{"slug": "find-permutation", "title": "Find Permutation", "difficulty": "Medium"}]},
    {"number": 2454, "slug": "next-greater-element-iv", "title": "Next Greater Element IV", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Stack", "Sorting", "Heap (Priority Queue)", "Monotonic Stack"], "similar_problems": [{"slug": "next-greater-element-i", "title": "Next Greater Element I", "difficulty": "Easy"}, {"slug": "replace-elements-with-greatest-element-on-right-side", "title": "Replace Elements with Greatest Element on Right Side", "difficulty": "Easy"}, {"slug": "apply-operations-to-maximize-score", "title": "Apply Operations to Maximize Score", "difficulty": "Hard"}]},
    {"number": 2487, "slug": "remove-nodes-from-linked-list", "title": "Remove Nodes From Linked List", "difficulty": "Medium", "tags": ["Linked List", "Stack", "Recursion", "Monotonic Stack"], "similar_problems": [{"slug": "reverse-linked-list", "title": "Reverse Linked List", "difficulty": "Easy"}, {"slug": "delete-node-in-a-linked-list", "title": "Delete Node in a Linked List", "difficulty": "Medium"}, {"slug": "next-greater-element-i", "title": "Next Greater Element I", "difficulty": "Easy"}, {"slug": "delete-nodes-from-linked-list-present-in-array", "title": "Delete Nodes From Linked List Present in Array", "difficulty": "Medium"}]},
    {"number": 2524, "slug": "maximum-frequency-score-of-a-subarray", "title": "Maximum Frequency Score of a Subarray", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Math", "Stack", "Sliding Window"], "similar_problems": []},
    {"number": 2589, "slug": "minimum-time-to-complete-all-tasks", "title": "Minimum Time to Complete All Tasks", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Stack", "Greedy", "Sorting"], "similar_problems": [{"slug": "single-threaded-cpu", "title": "Single-Threaded CPU", "difficulty": "Medium"}]},
    {"number": 2617, "slug": "minimum-number-of-visited-cells-in-a-grid", "title": "Minimum Number of Visited Cells in a Grid", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Stack", "Breadth-First Search", "Union Find", "Heap (Priority Queue)", "Matrix", "Monotonic Stack"], "similar_problems": [{"slug": "jump-game-ii", "title": "Jump Game II", "difficulty": "Medium"}, {"slug": "jump-game", "title": "Jump Game", "difficulty": "Medium"}]},
    {"number": 2645, "slug": "minimum-additions-to-make-valid-string", "title": "Minimum Additions to Make Valid String", "difficulty": "Medium", "tags": ["String", "Dynamic Programming", "Stack", "Greedy"], "similar_problems": [{"slug": "merge-strings-alternately", "title": "Merge Strings Alternately", "difficulty": "Easy"}]},
    {"number": 2696, "slug": "minimum-string-length-after-removing-substrings", "title": "Minimum String Length After Removing Substrings", "difficulty": "Easy", "tags": ["String", "Stack", "Simulation"], "similar_problems": []},
    {"number": 2736, "slug": "maximum-sum-queries", "title": "Maximum Sum Queries", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Stack", "Binary Indexed Tree", "Segment Tree", "Sorting", "Monotonic Stack"], "similar_problems": [{"slug": "most-beautiful-item-for-each-query", "title": "Most Beautiful Item for Each Query", "difficulty": "Medium"}]},
    {"number": 2751, "slug": "robot-collisions", "title": "Robot Collisions", "difficulty": "Hard", "tags": ["Array", "Stack", "Sorting", "Simulation"], "similar_problems": [{"slug": "asteroid-collision", "title": "Asteroid Collision", "difficulty": "Medium"}]},
    {"number": 2764, "slug": "is-array-a-preorder-of-some-binary-tree", "title": "Is Array a Preorder of Some ‌Binary Tree", "difficulty": "Medium", "tags": ["Stack", "Tree", "Depth-First Search", "Binary Tree"], "similar_problems": []},
    {"number": 2813, "slug": "maximum-elegance-of-a-k-length-subsequence", "title": "Maximum Elegance of a K-Length Subsequence", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Stack", "Greedy", "Sorting", "Heap (Priority Queue)"], "similar_problems": [{"slug": "ipo", "title": "IPO", "difficulty": "Hard"}]},
    {"number": 2816, "slug": "double-a-number-represented-as-a-linked-list", "title": "Double a Number Represented as a Linked List", "difficulty": "Medium", "tags": ["Linked List", "Math", "Stack"], "similar_problems": [{"slug": "add-two-numbers", "title": "Add Two Numbers", "difficulty": "Medium"}, {"slug": "plus-one-linked-list", "title": "Plus One Linked List", "difficulty": "Medium"}]},
    {"number": 2818, "slug": "apply-operations-to-maximize-score", "title": "Apply Operations to Maximize Score", "difficulty": "Hard", "tags": ["Array", "Math", "Stack", "Greedy", "Sorting", "Monotonic Stack", "Number Theory"], "similar_problems": [{"slug": "next-greater-element-iv", "title": "Next Greater Element IV", "difficulty": "Hard"}]},
    {"number": 2832, "slug": "maximal-range-that-each-element-is-maximum-in-it", "title": "Maximal Range That Each Element Is Maximum in It", "difficulty": "Medium", "tags": ["Array", "Stack", "Monotonic Stack"], "similar_problems": []},
    {"number": 2863, "slug": "maximum-length-of-semi-decreasing-subarrays", "title": "Maximum Length of Semi-Decreasing Subarrays", "difficulty": "Medium", "tags": ["Array", "Stack", "Sorting", "Monotonic Stack"], "similar_problems": []},
    {"number": 2865, "slug": "beautiful-towers-i", "title": "Beautiful Towers I", "difficulty": "Medium", "tags": ["Array", "Stack", "Monotonic Stack"], "similar_problems": [{"slug": "valid-mountain-array", "title": "Valid Mountain Array", "difficulty": "Easy"}, {"slug": "minimum-number-of-removals-to-make-mountain-array", "title": "Minimum Number of Removals to Make Mountain Array", "difficulty": "Hard"}, {"slug": "maximum-number-of-books-you-can-take", "title": "Maximum Number of Books You Can Take", "difficulty": "Hard"}]},
    {"number": 2866, "slug": "beautiful-towers-ii", "title": "Beautiful Towers II", "difficulty": "Medium", "tags": ["Array", "Stack", "Monotonic Stack"], "similar_problems": [{"slug": "minimum-number-of-removals-to-make-mountain-array", "title": "Minimum Number of Removals to Make Mountain Array", "difficulty": "Hard"}, {"slug": "maximum-number-of-books-you-can-take", "title": "Maximum Number of Books You Can Take", "difficulty": "Hard"}]},
    {"number": 2940, "slug": "find-building-where-alice-and-bob-can-meet", "title": "Find Building Where Alice and Bob Can Meet", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Stack", "Binary Indexed Tree", "Segment Tree", "Heap (Priority Queue)", "Monotonic Stack"], "similar_problems": [{"slug": "number-of-visible-people-in-a-queue", "title": "Number of Visible People in a Queue", "difficulty": "Hard"}, {"slug": "furthest-building-you-can-reach", "title": "Furthest Building You Can Reach", "difficulty": "Medium"}]},
    {"number": 2945, "slug": "find-maximum-non-decreasing-array-length", "title": "Find Maximum Non-decreasing Array Length", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Dynamic Programming", "Stack", "Queue", "Monotonic Stack", "Monotonic Queue"], "similar_problems": []},
    {"number": 3113, "slug": "find-the-number-of-subarrays-where-boundary-elements-are-maximum", "title": "Find the Number of Subarrays Where Boundary Elements Are Maximum", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Stack", "Monotonic Stack"], "similar_problems": [{"slug": "number-of-subarrays-with-bounded-maximum", "title": "Number of Subarrays with Bounded Maximum", "difficulty": "Medium"}, {"slug": "count-subarrays-with-fixed-bounds", "title": "Count Subarrays With Fixed Bounds", "difficulty": "Hard"}, {"slug": "count-subarrays-where-max-element-appears-at-least-k-times", "title": "Count Subarrays Where Max Element Appears at Least K Times", "difficulty": "Medium"}]},
    {"number": 3170, "slug": "lexicographically-minimum-string-after-removing-stars", "title": "Lexicographically Minimum String After Removing Stars", "difficulty": "Medium", "tags": ["Hash Table", "String", "Stack", "Greedy", "Heap (Priority Queue)"], "similar_problems": []},
    {"number": 3174, "slug": "clear-digits", "title": "Clear Digits", "difficulty": "Easy", "tags": ["String", "Stack", "Simulation"], "similar_problems": []},
    {"number": 3205, "slug": "maximum-array-hopping-score-i", "title": "Maximum Array Hopping Score I", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Stack", "Greedy", "Monotonic Stack"], "similar_problems": []},
    {"number": 3221, "slug": "maximum-array-hopping-score-ii", "title": "Maximum Array Hopping Score II", "difficulty": "Medium", "tags": ["Array", "Stack", "Greedy", "Monotonic Stack"], "similar_problems": []},
    {"number": 3229, "slug": "minimum-operations-to-make-array-equal-to-target", "title": "Minimum Operations to Make Array Equal to Target", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Stack", "Greedy", "Monotonic Stack"], "similar_problems": []},
    {"number": 3359, "slug": "find-sorted-submatrices-with-maximum-element-at-most-k", "title": "Find Sorted Submatrices With Maximum Element at Most K", "difficulty": "Hard", "tags": ["Array", "Stack", "Matrix", "Monotonic Stack"], "similar_problems": [{"slug": "maximal-rectangle", "title": "Maximal Rectangle", "difficulty": "Hard"}]},
    {"number": 3412, "slug": "find-mirror-score-of-a-string", "title": "Find Mirror Score of a String", "difficulty": "Medium", "tags": ["Hash Table", "String", "Stack", "Simulation"], "similar_problems": []},
    {"number": 3420, "slug": "count-non-decreasing-subarrays-after-k-operations", "title": "Count Non-Decreasing Subarrays After K Operations", "difficulty": "Hard", "tags": ["Array", "Stack", "Segment Tree", "Queue", "Sliding Window", "Monotonic Stack", "Monotonic Queue"], "similar_problems": [{"slug": "non-decreasing-array", "title": "Non-decreasing Array", "difficulty": "Medium"}]},
    {"number": 3430, "slug": "maximum-and-minimum-sums-of-at-most-size-k-subarrays", "title": "Maximum and Minimum Sums of at Most Size K Subarrays", "difficulty": "Hard", "tags": ["Array", "Math", "Stack", "Monotonic Stack"], "similar_problems": [{"slug": "next-greater-element-ii", "title": "Next Greater Element II", "difficulty": "Medium"}]},
    {"number": 3523, "slug": "make-array-non-decreasing", "title": "Make Array Non-decreasing", "difficulty": "Medium", "tags": ["Array", "Stack", "Greedy", "Monotonic Stack"], "similar_problems": []},
    {"number": 3542, "slug": "minimum-operations-to-convert-all-elements-to-zero", "title": "Minimum Operations to Convert All Elements to Zero", "difficulty": "Medium", "tags": ["Array", "Hash Table", "Stack", "Greedy", "Monotonic Stack"], "similar_problems": []},
    {"number": 3555, "slug": "smallest-subarray-to-sort-in-every-sliding-window", "title": "Smallest Subarray to Sort in Every Sliding Window", "difficulty": "Medium", "tags": ["Array", "Two Pointers", "Stack", "Greedy", "Sorting", "Monotonic Stack"], "similar_problems": [{"slug": "shortest-unsorted-continuous-subarray", "title": "Shortest Unsorted Continuous Subarray", "difficulty": "Medium"}]},
    {"number": 3561, "slug": "resulting-string-after-adjacent-removals", "title": "Resulting String After Adjacent Removals", "difficulty": "Medium", "tags": ["String", "Stack", "Simulation"], "similar_problems": []},
    {"number": 3638, "slug": "maximum-balanced-shipments", "title": "Maximum Balanced Shipments", "difficulty": "Medium", "tags": ["Array", "Dynamic Programming", "Stack", "Greedy", "Monotonic Stack"], "similar_problems": []}
]