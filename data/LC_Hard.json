[
    {"number": 4, "slug": "median-of-two-sorted-arrays", "title": "Median of Two Sorted Arrays", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Divide and Conquer"], "similar_problems": [{"slug": "median-of-a-row-wise-sorted-matrix", "title": "Median of a Row Wise Sorted Matrix", "difficulty": "Medium"}]},
    {"number": 10, "slug": "regular-expression-matching", "title": "Regular Expression Matching", "difficulty": "Hard", "tags": ["String", "Dynamic Programming", "Recursion"], "similar_problems": [{"slug": "wildcard-matching", "title": "Wildcard Matching", "difficulty": "Hard"}]},
    {"number": 23, "slug": "merge-k-sorted-lists", "title": "Merge k Sorted Lists", "difficulty": "Hard", "tags": ["Linked List", "Divide and Conquer", "Heap (Priority Queue)", "Merge Sort"], "similar_problems": [{"slug": "merge-two-sorted-lists", "title": "Merge Two Sorted Lists", "difficulty": "Easy"}, {"slug": "ugly-number-ii", "title": "Ugly Number II", "difficulty": "Medium"}, {"slug": "smallest-subarrays-with-maximum-bitwise-or", "title": "Smallest Subarrays With Maximum Bitwise OR", "difficulty": "Medium"}]},
    {"number": 25, "slug": "reverse-nodes-in-k-group", "title": "Reverse Nodes in k-Group", "difficulty": "Hard", "tags": ["Linked List", "Recursion"], "similar_problems": [{"slug": "swap-nodes-in-pairs", "title": "Swap Nodes in Pairs", "difficulty": "Medium"}, {"slug": "swapping-nodes-in-a-linked-list", "title": "Swapping Nodes in a Linked List", "difficulty": "Medium"}, {"slug": "reverse-nodes-in-even-length-groups", "title": "Reverse Nodes in Even Length Groups", "difficulty": "Medium"}]},
    {"number": 30, "slug": "substring-with-concatenation-of-all-words", "title": "Substring with Concatenation of All Words", "difficulty": "Hard", "tags": ["Hash Table", "String", "Sliding Window"], "similar_problems": [{"slug": "minimum-window-substring", "title": "Minimum Window Substring", "difficulty": "Hard"}]},
    {"number": 32, "slug": "longest-valid-parentheses", "title": "Longest Valid Parentheses", "difficulty": "Hard", "tags": ["String", "Dynamic Programming", "Stack"], "similar_problems": [{"slug": "valid-parentheses", "title": "Valid Parentheses", "difficulty": "Easy"}]},
    {"number": 37, "slug": "sudoku-solver", "title": "Sudoku Solver", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Backtracking", "Matrix"], "similar_problems": [{"slug": "valid-sudoku", "title": "Valid Sudoku", "difficulty": "Medium"}, {"slug": "unique-paths-iii", "title": "Unique Paths III", "difficulty": "Hard"}]},
    {"number": 41, "slug": "first-missing-positive", "title": "First Missing Positive", "difficulty": "Hard", "tags": ["Array", "Hash Table"], "similar_problems": [{"slug": "missing-number", "title": "Missing Number", "difficulty": "Easy"}, {"slug": "find-the-duplicate-number", "title": "Find the Duplicate Number", "difficulty": "Medium"}, {"slug": "find-all-numbers-disappeared-in-an-array", "title": "Find All Numbers Disappeared in an Array", "difficulty": "Easy"}, {"slug": "couples-holding-hands", "title": "Couples Holding Hands", "difficulty": "Hard"}, {"slug": "smallest-number-in-infinite-set", "title": "Smallest Number in Infinite Set", "difficulty": "Medium"}, {"slug": "maximum-number-of-integers-to-choose-from-a-range-i", "title": "Maximum Number of Integers to Choose From a Range I", "difficulty": "Medium"}, {"slug": "smallest-missing-non-negative-integer-after-operations", "title": "Smallest Missing Non-negative Integer After Operations", "difficulty": "Medium"}, {"slug": "maximum-number-of-integers-to-choose-from-a-range-ii", "title": "Maximum Number of Integers to Choose From a Range II", "difficulty": "Medium"}, {"slug": "smallest-missing-integer-greater-than-sequential-prefix-sum", "title": "Smallest Missing Integer Greater Than Sequential Prefix Sum", "difficulty": "Easy"}]},
    {"number": 42, "slug": "trapping-rain-water", "title": "Trapping Rain Water", "difficulty": "Hard", "tags": ["Array", "Two Pointers", "Dynamic Programming", "Stack", "Monotonic Stack"], "similar_problems": [{"slug": "container-with-most-water", "title": "Container With Most Water", "difficulty": "Medium"}, {"slug": "product-of-array-except-self", "title": "Product of Array Except Self", "difficulty": "Medium"}, {"slug": "trapping-rain-water-ii", "title": "Trapping Rain Water II", "difficulty": "Hard"}, {"slug": "pour-water", "title": "Pour Water", "difficulty": "Medium"}, {"slug": "maximum-value-of-an-ordered-triplet-ii", "title": "Maximum Value of an Ordered Triplet II", "difficulty": "Medium"}]},
    {"number": 44, "slug": "wildcard-matching", "title": "Wildcard Matching", "difficulty": "Hard", "tags": ["String", "Dynamic Programming", "Greedy", "Recursion"], "similar_problems": [{"slug": "regular-expression-matching", "title": "Regular Expression Matching", "difficulty": "Hard"}, {"slug": "substring-matching-pattern", "title": "Substring Matching Pattern", "difficulty": "Easy"}]},
    {"number": 51, "slug": "n-queens", "title": "N-Queens", "difficulty": "Hard", "tags": ["Array", "Backtracking"], "similar_problems": [{"slug": "n-queens-ii", "title": "N-Queens II", "difficulty": "Hard"}, {"slug": "grid-illumination", "title": "Grid Illumination", "difficulty": "Hard"}]},
    {"number": 52, "slug": "n-queens-ii", "title": "N-Queens II", "difficulty": "Hard", "tags": ["Backtracking"], "similar_problems": [{"slug": "n-queens", "title": "N-Queens", "difficulty": "Hard"}]},
    {"number": 60, "slug": "permutation-sequence", "title": "Permutation Sequence", "difficulty": "Hard", "tags": ["Math", "Recursion"], "similar_problems": [{"slug": "next-permutation", "title": "Next Permutation", "difficulty": "Medium"}, {"slug": "permutations", "title": "Permutations", "difficulty": "Medium"}]},
    {"number": 65, "slug": "valid-number", "title": "Valid Number", "difficulty": "Hard", "tags": ["String"], "similar_problems": [{"slug": "string-to-integer-atoi", "title": "String to Integer (atoi)", "difficulty": "Medium"}]},
    {"number": 68, "slug": "text-justification", "title": "Text Justification", "difficulty": "Hard", "tags": ["Array", "String", "Simulation"], "similar_problems": [{"slug": "rearrange-spaces-between-words", "title": "Rearrange Spaces Between Words", "difficulty": "Easy"}, {"slug": "divide-a-string-into-groups-of-size-k", "title": "Divide a String Into Groups of Size k", "difficulty": "Easy"}, {"slug": "split-message-based-on-limit", "title": "Split Message Based on Limit", "difficulty": "Hard"}]},
    {"number": 76, "slug": "minimum-window-substring", "title": "Minimum Window Substring", "difficulty": "Hard", "tags": ["Hash Table", "String", "Sliding Window"], "similar_problems": [{"slug": "substring-with-concatenation-of-all-words", "title": "Substring with Concatenation of All Words", "difficulty": "Hard"}, {"slug": "minimum-size-subarray-sum", "title": "Minimum Size Subarray Sum", "difficulty": "Medium"}, {"slug": "sliding-window-maximum", "title": "Sliding Window Maximum", "difficulty": "Hard"}, {"slug": "permutation-in-string", "title": "Permutation in String", "difficulty": "Medium"}, {"slug": "smallest-range-covering-elements-from-k-lists", "title": "Smallest Range Covering Elements from K Lists", "difficulty": "Hard"}, {"slug": "minimum-window-subsequence", "title": "Minimum Window Subsequence", "difficulty": "Hard"}, {"slug": "count-substrings-that-can-be-rearranged-to-contain-a-string-ii", "title": "Count Substrings That Can Be Rearranged to Contain a String II", "difficulty": "Hard"}, {"slug": "count-substrings-that-can-be-rearranged-to-contain-a-string-i", "title": "Count Substrings That Can Be Rearranged to Contain a String I", "difficulty": "Medium"}]},
    {"number": 84, "slug": "largest-rectangle-in-histogram", "title": "Largest Rectangle in Histogram", "difficulty": "Hard", "tags": ["Array", "Stack", "Monotonic Stack"], "similar_problems": [{"slug": "maximal-rectangle", "title": "Maximal Rectangle", "difficulty": "Hard"}, {"slug": "maximum-score-of-a-good-subarray", "title": "Maximum Score of a Good Subarray", "difficulty": "Hard"}]},
    {"number": 85, "slug": "maximal-rectangle", "title": "Maximal Rectangle", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Stack", "Matrix", "Monotonic Stack"], "similar_problems": [{"slug": "largest-rectangle-in-histogram", "title": "Largest Rectangle in Histogram", "difficulty": "Hard"}, {"slug": "maximal-square", "title": "Maximal Square", "difficulty": "Medium"}, {"slug": "find-sorted-submatrices-with-maximum-element-at-most-k", "title": "Find Sorted Submatrices With Maximum Element at Most K", "difficulty": "Hard"}]},
    {"number": 87, "slug": "scramble-string", "title": "Scramble String", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": []},
    {"number": 115, "slug": "distinct-subsequences", "title": "Distinct Subsequences", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "number-of-unique-good-subsequences", "title": "Number of Unique Good Subsequences", "difficulty": "Hard"}]},
    {"number": 123, "slug": "best-time-to-buy-and-sell-stock-iii", "title": "Best Time to Buy and Sell Stock III", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "best-time-to-buy-and-sell-stock", "title": "Best Time to Buy and Sell Stock", "difficulty": "Easy"}, {"slug": "best-time-to-buy-and-sell-stock-ii", "title": "Best Time to Buy and Sell Stock II", "difficulty": "Medium"}, {"slug": "best-time-to-buy-and-sell-stock-iv", "title": "Best Time to Buy and Sell Stock IV", "difficulty": "Hard"}, {"slug": "maximum-sum-of-3-non-overlapping-subarrays", "title": "Maximum Sum of 3 Non-Overlapping Subarrays", "difficulty": "Hard"}, {"slug": "maximum-profit-from-trading-stocks", "title": "Maximum Profit From Trading Stocks", "difficulty": "Medium"}, {"slug": "maximize-win-from-two-segments", "title": "Maximize Win From Two Segments", "difficulty": "Medium"}]},
    {"number": 124, "slug": "binary-tree-maximum-path-sum", "title": "Binary Tree Maximum Path Sum", "difficulty": "Hard", "tags": ["Dynamic Programming", "Tree", "Depth-First Search", "Binary Tree"], "similar_problems": [{"slug": "path-sum", "title": "Path Sum", "difficulty": "Easy"}, {"slug": "sum-root-to-leaf-numbers", "title": "Sum Root to Leaf Numbers", "difficulty": "Medium"}, {"slug": "path-sum-iv", "title": "Path Sum IV", "difficulty": "Medium"}, {"slug": "longest-univalue-path", "title": "Longest Univalue Path", "difficulty": "Medium"}, {"slug": "time-needed-to-inform-all-employees", "title": "Time Needed to Inform All Employees", "difficulty": "Medium"}, {"slug": "difference-between-maximum-and-minimum-price-sum", "title": "Difference Between Maximum and Minimum Price Sum", "difficulty": "Hard"}]},
    {"number": 126, "slug": "word-ladder-ii", "title": "Word Ladder II", "difficulty": "Hard", "tags": ["Hash Table", "String", "Backtracking", "Breadth-First Search"], "similar_problems": [{"slug": "word-ladder", "title": "Word Ladder", "difficulty": "Hard"}, {"slug": "groups-of-strings", "title": "Groups of Strings", "difficulty": "Hard"}]},
    {"number": 127, "slug": "word-ladder", "title": "Word Ladder", "difficulty": "Hard", "tags": ["Hash Table", "String", "Breadth-First Search"], "similar_problems": [{"slug": "word-ladder-ii", "title": "Word Ladder II", "difficulty": "Hard"}, {"slug": "minimum-genetic-mutation", "title": "Minimum Genetic Mutation", "difficulty": "Medium"}, {"slug": "words-within-two-edits-of-dictionary", "title": "Words Within Two Edits of Dictionary", "difficulty": "Medium"}]},
    {"number": 132, "slug": "palindrome-partitioning-ii", "title": "Palindrome Partitioning II", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "palindrome-partitioning", "title": "Palindrome Partitioning", "difficulty": "Medium"}, {"slug": "palindrome-partitioning-iv", "title": "Palindrome Partitioning IV", "difficulty": "Hard"}, {"slug": "maximum-number-of-non-overlapping-palindrome-substrings", "title": "Maximum Number of Non-overlapping Palindrome Substrings", "difficulty": "Hard"}, {"slug": "number-of-great-partitions", "title": "Number of Great Partitions", "difficulty": "Hard"}]},
    {"number": 135, "slug": "candy", "title": "Candy", "difficulty": "Hard", "tags": ["Array", "Greedy"], "similar_problems": [{"slug": "minimize-maximum-value-in-a-grid", "title": "Minimize Maximum Value in a Grid", "difficulty": "Hard"}, {"slug": "minimum-number-of-operations-to-satisfy-conditions", "title": "Minimum Number of Operations to Satisfy Conditions", "difficulty": "Medium"}, {"slug": "check-if-grid-satisfies-conditions", "title": "Check if Grid Satisfies Conditions", "difficulty": "Easy"}]},
    {"number": 140, "slug": "word-break-ii", "title": "Word Break II", "difficulty": "Hard", "tags": ["Array", "Hash Table", "String", "Dynamic Programming", "Backtracking", "Trie", "Memoization"], "similar_problems": [{"slug": "word-break", "title": "Word Break", "difficulty": "Medium"}, {"slug": "concatenated-words", "title": "Concatenated Words", "difficulty": "Hard"}]},
    {"number": 149, "slug": "max-points-on-a-line", "title": "Max Points on a Line", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Math", "Geometry"], "similar_problems": [{"slug": "line-reflection", "title": "Line Reflection", "difficulty": "Medium"}, {"slug": "minimum-number-of-lines-to-cover-points", "title": "Minimum Number of Lines to Cover Points", "difficulty": "Medium"}, {"slug": "minimum-lines-to-represent-a-line-chart", "title": "Minimum Lines to Represent a Line Chart", "difficulty": "Medium"}, {"slug": "count-special-subsequences", "title": "Count Special Subsequences", "difficulty": "Medium"}]},
    {"number": 154, "slug": "find-minimum-in-rotated-sorted-array-ii", "title": "Find Minimum in Rotated Sorted Array II", "difficulty": "Hard", "tags": ["Array", "Binary Search"], "similar_problems": [{"slug": "find-minimum-in-rotated-sorted-array", "title": "Find Minimum in Rotated Sorted Array", "difficulty": "Medium"}]},
    {"number": 158, "slug": "read-n-characters-given-read4-ii-call-multiple-times", "title": "Read N Characters Given read4 II - Call Multiple Times", "difficulty": "Hard", "tags": ["Array", "Simulation", "Interactive"], "similar_problems": [{"slug": "read-n-characters-given-read4", "title": "Read N Characters Given Read4", "difficulty": "Easy"}]},
    {"number": 174, "slug": "dungeon-game", "title": "Dungeon Game", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Matrix"], "similar_problems": [{"slug": "unique-paths", "title": "Unique Paths", "difficulty": "Medium"}, {"slug": "minimum-path-sum", "title": "Minimum Path Sum", "difficulty": "Medium"}, {"slug": "cherry-pickup", "title": "Cherry Pickup", "difficulty": "Hard"}, {"slug": "minimum-path-cost-in-a-grid", "title": "Minimum Path Cost in a Grid", "difficulty": "Medium"}, {"slug": "minimum-health-to-beat-game", "title": "Minimum Health to Beat Game", "difficulty": "Medium"}, {"slug": "paths-in-matrix-whose-sum-is-divisible-by-k", "title": "Paths in Matrix Whose Sum Is Divisible by K", "difficulty": "Hard"}, {"slug": "check-if-there-is-a-path-with-equal-number-of-0s-and-1s", "title": "Check if There is a Path With Equal Number of 0's And 1's", "difficulty": "Medium"}]},
    {"number": 185, "slug": "department-top-three-salaries", "title": "Department Top Three Salaries", "difficulty": "Hard", "tags": ["Database"], "similar_problems": []},
    {"number": 188, "slug": "best-time-to-buy-and-sell-stock-iv", "title": "Best Time to Buy and Sell Stock IV", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "best-time-to-buy-and-sell-stock", "title": "Best Time to Buy and Sell Stock", "difficulty": "Easy"}, {"slug": "best-time-to-buy-and-sell-stock-ii", "title": "Best Time to Buy and Sell Stock II", "difficulty": "Medium"}, {"slug": "best-time-to-buy-and-sell-stock-iii", "title": "Best Time to Buy and Sell Stock III", "difficulty": "Hard"}, {"slug": "maximum-profit-from-trading-stocks", "title": "Maximum Profit From Trading Stocks", "difficulty": "Medium"}]},
    {"number": 212, "slug": "word-search-ii", "title": "Word Search II", "difficulty": "Hard", "tags": ["Array", "String", "Backtracking", "Trie", "Matrix"], "similar_problems": [{"slug": "word-search", "title": "Word Search", "difficulty": "Medium"}, {"slug": "unique-paths-iii", "title": "Unique Paths III", "difficulty": "Hard"}, {"slug": "encrypt-and-decrypt-strings", "title": "Encrypt and Decrypt Strings", "difficulty": "Hard"}]},
    {"number": 214, "slug": "shortest-palindrome", "title": "Shortest Palindrome", "difficulty": "Hard", "tags": ["String", "Rolling Hash", "String Matching", "Hash Function"], "similar_problems": [{"slug": "longest-palindromic-substring", "title": "Longest Palindromic Substring", "difficulty": "Medium"}, {"slug": "find-the-index-of-the-first-occurrence-in-a-string", "title": "Find the Index of the First Occurrence in a String", "difficulty": "Easy"}, {"slug": "palindrome-pairs", "title": "Palindrome Pairs", "difficulty": "Hard"}, {"slug": "maximum-deletions-on-a-string", "title": "Maximum Deletions on a String", "difficulty": "Hard"}, {"slug": "smallest-palindromic-rearrangement-i", "title": "Smallest Palindromic Rearrangement I", "difficulty": "Medium"}]},
    {"number": 218, "slug": "the-skyline-problem", "title": "The Skyline Problem", "difficulty": "Hard", "tags": ["Array", "Divide and Conquer", "Binary Indexed Tree", "Segment Tree", "Line Sweep", "Heap (Priority Queue)", "Ordered Set"], "similar_problems": [{"slug": "falling-squares", "title": "Falling Squares", "difficulty": "Hard"}, {"slug": "shifting-letters-ii", "title": "Shifting Letters II", "difficulty": "Medium"}]},
    {"number": 220, "slug": "contains-duplicate-iii", "title": "Contains Duplicate III", "difficulty": "Hard", "tags": ["Array", "Sliding Window", "Sorting", "Bucket Sort", "Ordered Set"], "similar_problems": [{"slug": "contains-duplicate", "title": "Contains Duplicate", "difficulty": "Easy"}, {"slug": "contains-duplicate-ii", "title": "Contains Duplicate II", "difficulty": "Easy"}]},
    {"number": 224, "slug": "basic-calculator", "title": "Basic Calculator", "difficulty": "Hard", "tags": ["Math", "String", "Stack", "Recursion"], "similar_problems": [{"slug": "evaluate-reverse-polish-notation", "title": "Evaluate Reverse Polish Notation", "difficulty": "Medium"}, {"slug": "basic-calculator-ii", "title": "Basic Calculator II", "difficulty": "Medium"}, {"slug": "different-ways-to-add-parentheses", "title": "Different Ways to Add Parentheses", "difficulty": "Medium"}, {"slug": "expression-add-operators", "title": "Expression Add Operators", "difficulty": "Hard"}, {"slug": "basic-calculator-iii", "title": "Basic Calculator III", "difficulty": "Hard"}, {"slug": "the-score-of-students-solving-math-expression", "title": "The Score of Students Solving Math Expression", "difficulty": "Hard"}, {"slug": "minimize-result-by-adding-parentheses-to-expression", "title": "Minimize Result by Adding Parentheses to Expression", "difficulty": "Medium"}]},
    {"number": 233, "slug": "number-of-digit-one", "title": "Number of Digit One", "difficulty": "Hard", "tags": ["Math", "Dynamic Programming", "Recursion"], "similar_problems": [{"slug": "factorial-trailing-zeroes", "title": "Factorial Trailing Zeroes", "difficulty": "Medium"}, {"slug": "digit-count-in-range", "title": "Digit Count in Range", "difficulty": "Hard"}]},
    {"number": 239, "slug": "sliding-window-maximum", "title": "Sliding Window Maximum", "difficulty": "Hard", "tags": ["Array", "Queue", "Sliding Window", "Heap (Priority Queue)", "Monotonic Queue"], "similar_problems": [{"slug": "minimum-window-substring", "title": "Minimum Window Substring", "difficulty": "Hard"}, {"slug": "min-stack", "title": "Min Stack", "difficulty": "Medium"}, {"slug": "longest-substring-with-at-most-two-distinct-characters", "title": "Longest Substring with At Most Two Distinct Characters", "difficulty": "Medium"}, {"slug": "paint-house-ii", "title": "Paint House II", "difficulty": "Hard"}, {"slug": "jump-game-vi", "title": "Jump Game VI", "difficulty": "Medium"}, {"slug": "maximum-number-of-robots-within-budget", "title": "Maximum Number of Robots Within Budget", "difficulty": "Hard"}, {"slug": "maximum-tastiness-of-candy-basket", "title": "Maximum Tastiness of Candy Basket", "difficulty": "Medium"}, {"slug": "maximal-score-after-applying-k-operations", "title": "Maximal Score After Applying K Operations", "difficulty": "Medium"}]},
    {"number": 248, "slug": "strobogrammatic-number-iii", "title": "Strobogrammatic Number III", "difficulty": "Hard", "tags": ["Array", "String", "Recursion"], "similar_problems": [{"slug": "strobogrammatic-number", "title": "Strobogrammatic Number", "difficulty": "Easy"}, {"slug": "strobogrammatic-number-ii", "title": "Strobogrammatic Number II", "difficulty": "Medium"}]},
    {"number": 262, "slug": "trips-and-users", "title": "Trips and Users", "difficulty": "Hard", "tags": ["Database"], "similar_problems": [{"slug": "hopper-company-queries-i", "title": "Hopper Company Queries I", "difficulty": "Hard"}, {"slug": "hopper-company-queries-ii", "title": "Hopper Company Queries II", "difficulty": "Hard"}, {"slug": "hopper-company-queries-iii", "title": "Hopper Company Queries III", "difficulty": "Hard"}]},
    {"number": 265, "slug": "paint-house-ii", "title": "Paint House II", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "product-of-array-except-self", "title": "Product of Array Except Self", "difficulty": "Medium"}, {"slug": "sliding-window-maximum", "title": "Sliding Window Maximum", "difficulty": "Hard"}, {"slug": "paint-house", "title": "Paint House", "difficulty": "Medium"}, {"slug": "paint-fence", "title": "Paint Fence", "difficulty": "Medium"}]},
    {"number": 269, "slug": "alien-dictionary", "title": "Alien Dictionary", "difficulty": "Hard", "tags": ["Array", "String", "Depth-First Search", "Breadth-First Search", "Graph", "Topological Sort"], "similar_problems": [{"slug": "course-schedule-ii", "title": "Course Schedule II", "difficulty": "Medium"}]},
    {"number": 272, "slug": "closest-binary-search-tree-value-ii", "title": "Closest Binary Search Tree Value II", "difficulty": "Hard", "tags": ["Two Pointers", "Stack", "Tree", "Depth-First Search", "Binary Search Tree", "Heap (Priority Queue)", "Binary Tree"], "similar_problems": [{"slug": "binary-tree-inorder-traversal", "title": "Binary Tree Inorder Traversal", "difficulty": "Easy"}, {"slug": "closest-binary-search-tree-value", "title": "Closest Binary Search Tree Value", "difficulty": "Easy"}, {"slug": "closest-nodes-queries-in-a-binary-search-tree", "title": "Closest Nodes Queries in a Binary Search Tree", "difficulty": "Medium"}]},
    {"number": 273, "slug": "integer-to-english-words", "title": "Integer to English Words", "difficulty": "Hard", "tags": ["Math", "String", "Recursion"], "similar_problems": [{"slug": "integer-to-roman", "title": "Integer to Roman", "difficulty": "Medium"}]},
    {"number": 282, "slug": "expression-add-operators", "title": "Expression Add Operators", "difficulty": "Hard", "tags": ["Math", "String", "Backtracking"], "similar_problems": [{"slug": "evaluate-reverse-polish-notation", "title": "Evaluate Reverse Polish Notation", "difficulty": "Medium"}, {"slug": "basic-calculator", "title": "Basic Calculator", "difficulty": "Hard"}, {"slug": "basic-calculator-ii", "title": "Basic Calculator II", "difficulty": "Medium"}, {"slug": "different-ways-to-add-parentheses", "title": "Different Ways to Add Parentheses", "difficulty": "Medium"}, {"slug": "target-sum", "title": "Target Sum", "difficulty": "Medium"}]},
    {"number": 295, "slug": "find-median-from-data-stream", "title": "Find Median from Data Stream", "difficulty": "Hard", "tags": ["Two Pointers", "Design", "Sorting", "Heap (Priority Queue)", "Data Stream"], "similar_problems": [{"slug": "sliding-window-median", "title": "Sliding Window Median", "difficulty": "Hard"}, {"slug": "finding-mk-average", "title": "Finding MK Average", "difficulty": "Hard"}, {"slug": "sequentially-ordinal-rank-tracker", "title": "Sequentially Ordinal Rank Tracker", "difficulty": "Hard"}, {"slug": "minimum-operations-to-make-median-of-array-equal-to-k", "title": "Minimum Operations to Make Median of Array Equal to K", "difficulty": "Medium"}, {"slug": "minimum-operations-to-make-subarray-elements-equal", "title": "Minimum Operations to Make Subarray Elements Equal", "difficulty": "Medium"}, {"slug": "minimum-operations-to-make-elements-within-k-subarrays-equal", "title": "Minimum Operations to Make Elements Within K Subarrays Equal", "difficulty": "Hard"}]},
    {"number": 296, "slug": "best-meeting-point", "title": "Best Meeting Point", "difficulty": "Hard", "tags": ["Array", "Math", "Sorting", "Matrix"], "similar_problems": [{"slug": "shortest-distance-from-all-buildings", "title": "Shortest Distance from All Buildings", "difficulty": "Hard"}, {"slug": "minimum-moves-to-equal-array-elements-ii", "title": "Minimum Moves to Equal Array Elements II", "difficulty": "Medium"}]},
    {"number": 297, "slug": "serialize-and-deserialize-binary-tree", "title": "Serialize and Deserialize Binary Tree", "difficulty": "Hard", "tags": ["String", "Tree", "Depth-First Search", "Breadth-First Search", "Design", "Binary Tree"], "similar_problems": [{"slug": "encode-and-decode-strings", "title": "Encode and Decode Strings", "difficulty": "Medium"}, {"slug": "serialize-and-deserialize-bst", "title": "Serialize and Deserialize BST", "difficulty": "Medium"}, {"slug": "find-duplicate-subtrees", "title": "Find Duplicate Subtrees", "difficulty": "Medium"}, {"slug": "serialize-and-deserialize-n-ary-tree", "title": "Serialize and Deserialize N-ary Tree", "difficulty": "Hard"}]},
    {"number": 301, "slug": "remove-invalid-parentheses", "title": "Remove Invalid Parentheses", "difficulty": "Hard", "tags": ["String", "Backtracking", "Breadth-First Search"], "similar_problems": [{"slug": "valid-parentheses", "title": "Valid Parentheses", "difficulty": "Easy"}, {"slug": "minimum-number-of-swaps-to-make-the-string-balanced", "title": "Minimum Number of Swaps to Make the String Balanced", "difficulty": "Medium"}]},
    {"number": 302, "slug": "smallest-rectangle-enclosing-black-pixels", "title": "Smallest Rectangle Enclosing Black Pixels", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Depth-First Search", "Breadth-First Search", "Matrix"], "similar_problems": [{"slug": "find-the-minimum-area-to-cover-all-ones-ii", "title": "Find the Minimum Area to Cover All Ones II", "difficulty": "Hard"}, {"slug": "find-the-minimum-area-to-cover-all-ones-i", "title": "Find the Minimum Area to Cover All Ones I", "difficulty": "Medium"}]},
    {"number": 305, "slug": "number-of-islands-ii", "title": "Number of Islands II", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Union Find"], "similar_problems": [{"slug": "number-of-islands", "title": "Number of Islands", "difficulty": "Medium"}, {"slug": "process-restricted-friend-requests", "title": "Process Restricted Friend Requests", "difficulty": "Hard"}]},
    {"number": 312, "slug": "burst-balloons", "title": "Burst Balloons", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "minimum-cost-to-merge-stones", "title": "Minimum Cost to Merge Stones", "difficulty": "Hard"}]},
    {"number": 315, "slug": "count-of-smaller-numbers-after-self", "title": "Count of Smaller Numbers After Self", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Divide and Conquer", "Binary Indexed Tree", "Segment Tree", "Merge Sort", "Ordered Set"], "similar_problems": [{"slug": "count-of-range-sum", "title": "Count of Range Sum", "difficulty": "Hard"}, {"slug": "queue-reconstruction-by-height", "title": "Queue Reconstruction by Height", "difficulty": "Medium"}, {"slug": "reverse-pairs", "title": "Reverse Pairs", "difficulty": "Hard"}, {"slug": "how-many-numbers-are-smaller-than-the-current-number", "title": "How Many Numbers Are Smaller Than the Current Number", "difficulty": "Easy"}, {"slug": "count-good-triplets-in-an-array", "title": "Count Good Triplets in an Array", "difficulty": "Hard"}, {"slug": "count-the-number-of-k-big-indices", "title": "Count the Number of K-Big Indices", "difficulty": "Hard"}]},
    {"number": 317, "slug": "shortest-distance-from-all-buildings", "title": "Shortest Distance from All Buildings", "difficulty": "Hard", "tags": ["Array", "Breadth-First Search", "Matrix"], "similar_problems": [{"slug": "walls-and-gates", "title": "Walls and Gates", "difficulty": "Medium"}, {"slug": "best-meeting-point", "title": "Best Meeting Point", "difficulty": "Hard"}, {"slug": "as-far-from-land-as-possible", "title": "As Far from Land as Possible", "difficulty": "Medium"}]},
    {"number": 321, "slug": "create-maximum-number", "title": "Create Maximum Number", "difficulty": "Hard", "tags": ["Array", "Two Pointers", "Stack", "Greedy", "Monotonic Stack"], "similar_problems": [{"slug": "remove-k-digits", "title": "Remove K Digits", "difficulty": "Medium"}, {"slug": "maximum-swap", "title": "Maximum Swap", "difficulty": "Medium"}]},
    {"number": 327, "slug": "count-of-range-sum", "title": "Count of Range Sum", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Divide and Conquer", "Binary Indexed Tree", "Segment Tree", "Merge Sort", "Ordered Set"], "similar_problems": [{"slug": "count-of-smaller-numbers-after-self", "title": "Count of Smaller Numbers After Self", "difficulty": "Hard"}, {"slug": "reverse-pairs", "title": "Reverse Pairs", "difficulty": "Hard"}, {"slug": "count-the-number-of-fair-pairs", "title": "Count the Number of Fair Pairs", "difficulty": "Medium"}, {"slug": "find-the-number-of-copy-arrays", "title": "Find the Number of Copy Arrays", "difficulty": "Medium"}]},
    {"number": 329, "slug": "longest-increasing-path-in-a-matrix", "title": "Longest Increasing Path in a Matrix", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Depth-First Search", "Breadth-First Search", "Graph", "Topological Sort", "Memoization", "Matrix"], "similar_problems": [{"slug": "number-of-increasing-paths-in-a-grid", "title": "Number of Increasing Paths in a Grid", "difficulty": "Hard"}]},
    {"number": 330, "slug": "patching-array", "title": "Patching Array", "difficulty": "Hard", "tags": ["Array", "Greedy"], "similar_problems": [{"slug": "maximum-number-of-consecutive-values-you-can-make", "title": "Maximum Number of Consecutive Values You Can Make", "difficulty": "Medium"}]},
    {"number": 332, "slug": "reconstruct-itinerary", "title": "Reconstruct Itinerary", "difficulty": "Hard", "tags": ["Depth-First Search", "Graph", "Eulerian Circuit"], "similar_problems": [{"slug": "longest-common-subpath", "title": "Longest Common Subpath", "difficulty": "Hard"}, {"slug": "valid-arrangement-of-pairs", "title": "Valid Arrangement of Pairs", "difficulty": "Hard"}]},
    {"number": 335, "slug": "self-crossing", "title": "Self Crossing", "difficulty": "Hard", "tags": ["Array", "Math", "Geometry"], "similar_problems": []},
    {"number": 336, "slug": "palindrome-pairs", "title": "Palindrome Pairs", "difficulty": "Hard", "tags": ["Array", "Hash Table", "String", "Trie"], "similar_problems": [{"slug": "longest-palindromic-substring", "title": "Longest Palindromic Substring", "difficulty": "Medium"}, {"slug": "shortest-palindrome", "title": "Shortest Palindrome", "difficulty": "Hard"}, {"slug": "longest-palindrome-by-concatenating-two-letter-words", "title": "Longest Palindrome by Concatenating Two Letter Words", "difficulty": "Medium"}, {"slug": "find-maximum-number-of-string-pairs", "title": "Find Maximum Number of String Pairs", "difficulty": "Easy"}]},
    {"number": 352, "slug": "data-stream-as-disjoint-intervals", "title": "Data Stream as Disjoint Intervals", "difficulty": "Hard", "tags": ["Binary Search", "Design", "Ordered Set"], "similar_problems": [{"slug": "summary-ranges", "title": "Summary Ranges", "difficulty": "Easy"}, {"slug": "find-right-interval", "title": "Find Right Interval", "difficulty": "Medium"}, {"slug": "range-module", "title": "Range Module", "difficulty": "Hard"}, {"slug": "count-integers-in-intervals", "title": "Count Integers in Intervals", "difficulty": "Hard"}]},
    {"number": 354, "slug": "russian-doll-envelopes", "title": "Russian Doll Envelopes", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Dynamic Programming", "Sorting"], "similar_problems": [{"slug": "longest-increasing-subsequence", "title": "Longest Increasing Subsequence", "difficulty": "Medium"}, {"slug": "the-number-of-weak-characters-in-the-game", "title": "The Number of Weak Characters in the Game", "difficulty": "Medium"}, {"slug": "longest-non-decreasing-subarray-from-two-arrays", "title": "Longest Non-decreasing Subarray From Two Arrays", "difficulty": "Medium"}]},
    {"number": 358, "slug": "rearrange-string-k-distance-apart", "title": "Rearrange String k Distance Apart", "difficulty": "Hard", "tags": ["Hash Table", "String", "Greedy", "Sorting", "Heap (Priority Queue)", "Counting"], "similar_problems": [{"slug": "task-scheduler", "title": "Task Scheduler", "difficulty": "Medium"}, {"slug": "reorganize-string", "title": "Reorganize String", "difficulty": "Medium"}, {"slug": "construct-string-with-repeat-limit", "title": "Construct String With Repeat Limit", "difficulty": "Medium"}]},
    {"number": 363, "slug": "max-sum-of-rectangle-no-larger-than-k", "title": "Max Sum of Rectangle No Larger Than K", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Matrix", "Prefix Sum", "Ordered Set"], "similar_problems": []},
    {"number": 381, "slug": "insert-delete-getrandom-o1-duplicates-allowed", "title": "Insert Delete GetRandom O(1) - Duplicates allowed", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Math", "Design", "Randomized"], "similar_problems": [{"slug": "insert-delete-getrandom-o1", "title": "Insert Delete GetRandom O(1)", "difficulty": "Medium"}]},
    {"number": 391, "slug": "perfect-rectangle", "title": "Perfect Rectangle", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Math", "Geometry", "Line Sweep"], "similar_problems": []},
    {"number": 403, "slug": "frog-jump", "title": "Frog Jump", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "minimum-sideway-jumps", "title": "Minimum Sideway Jumps", "difficulty": "Medium"}, {"slug": "solving-questions-with-brainpower", "title": "Solving Questions With Brainpower", "difficulty": "Medium"}, {"slug": "maximum-number-of-jumps-to-reach-the-last-index", "title": "Maximum Number of Jumps to Reach the Last Index", "difficulty": "Medium"}]},
    {"number": 407, "slug": "trapping-rain-water-ii", "title": "Trapping Rain Water II", "difficulty": "Hard", "tags": ["Array", "Breadth-First Search", "Heap (Priority Queue)", "Matrix"], "similar_problems": [{"slug": "trapping-rain-water", "title": "Trapping Rain Water", "difficulty": "Hard"}, {"slug": "maximum-number-of-points-from-grid-queries", "title": "Maximum Number of Points From Grid Queries", "difficulty": "Hard"}]},
    {"number": 410, "slug": "split-array-largest-sum", "title": "Split Array Largest Sum", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Dynamic Programming", "Greedy", "Prefix Sum"], "similar_problems": [{"slug": "capacity-to-ship-packages-within-d-days", "title": "Capacity To Ship Packages Within D Days", "difficulty": "Medium"}, {"slug": "divide-chocolate", "title": "Divide Chocolate", "difficulty": "Hard"}, {"slug": "fair-distribution-of-cookies", "title": "Fair Distribution of Cookies", "difficulty": "Medium"}, {"slug": "subsequence-of-size-k-with-the-largest-even-sum", "title": "Subsequence of Size K With the Largest Even Sum", "difficulty": "Medium"}, {"slug": "maximum-total-beauty-of-the-gardens", "title": "Maximum Total Beauty of the Gardens", "difficulty": "Hard"}, {"slug": "number-of-ways-to-split-array", "title": "Number of Ways to Split Array", "difficulty": "Medium"}, {"slug": "minimum-cost-to-split-an-array", "title": "Minimum Cost to Split an Array", "difficulty": "Hard"}, {"slug": "distribute-elements-into-two-arrays-i", "title": "Distribute Elements Into Two Arrays I", "difficulty": "Easy"}, {"slug": "distribute-elements-into-two-arrays-ii", "title": "Distribute Elements Into Two Arrays II", "difficulty": "Hard"}]},
    {"number": 411, "slug": "minimum-unique-word-abbreviation", "title": "Minimum Unique Word Abbreviation", "difficulty": "Hard", "tags": ["Array", "String", "Backtracking", "Bit Manipulation"], "similar_problems": [{"slug": "generalized-abbreviation", "title": "Generalized Abbreviation", "difficulty": "Medium"}, {"slug": "valid-word-abbreviation", "title": "Valid Word Abbreviation", "difficulty": "Easy"}, {"slug": "word-abbreviation", "title": "Word Abbreviation", "difficulty": "Hard"}]},
    {"number": 420, "slug": "strong-password-checker", "title": "Strong Password Checker", "difficulty": "Hard", "tags": ["String", "Greedy", "Heap (Priority Queue)"], "similar_problems": [{"slug": "strong-password-checker-ii", "title": "Strong Password Checker II", "difficulty": "Easy"}]},
    {"number": 425, "slug": "word-squares", "title": "Word Squares", "difficulty": "Hard", "tags": ["Array", "String", "Backtracking", "Trie"], "similar_problems": [{"slug": "valid-word-square", "title": "Valid Word Square", "difficulty": "Easy"}]},
    {"number": 428, "slug": "serialize-and-deserialize-n-ary-tree", "title": "Serialize and Deserialize N-ary Tree", "difficulty": "Hard", "tags": ["String", "Tree", "Depth-First Search", "Breadth-First Search"], "similar_problems": [{"slug": "serialize-and-deserialize-binary-tree", "title": "Serialize and Deserialize Binary Tree", "difficulty": "Hard"}, {"slug": "serialize-and-deserialize-bst", "title": "Serialize and Deserialize BST", "difficulty": "Medium"}, {"slug": "encode-n-ary-tree-to-binary-tree", "title": "Encode N-ary Tree to Binary Tree", "difficulty": "Hard"}]},
    {"number": 431, "slug": "encode-n-ary-tree-to-binary-tree", "title": "Encode N-ary Tree to Binary Tree", "difficulty": "Hard", "tags": ["Tree", "Depth-First Search", "Breadth-First Search", "Design", "Binary Tree"], "similar_problems": [{"slug": "serialize-and-deserialize-n-ary-tree", "title": "Serialize and Deserialize N-ary Tree", "difficulty": "Hard"}]},
    {"number": 432, "slug": "all-oone-data-structure", "title": "All O`one Data Structure", "difficulty": "Hard", "tags": ["Hash Table", "Linked List", "Design", "Doubly-Linked List"], "similar_problems": []},
    {"number": 440, "slug": "k-th-smallest-in-lexicographical-order", "title": "K-th Smallest in Lexicographical Order", "difficulty": "Hard", "tags": ["Trie"], "similar_problems": [{"slug": "count-special-integers", "title": "Count Special Integers", "difficulty": "Hard"}]},
    {"number": 446, "slug": "arithmetic-slices-ii-subsequence", "title": "Arithmetic Slices II - Subsequence", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "arithmetic-slices", "title": "Arithmetic Slices", "difficulty": "Medium"}, {"slug": "destroy-sequential-targets", "title": "Destroy Sequential Targets", "difficulty": "Medium"}, {"slug": "count-palindromic-subsequences", "title": "Count Palindromic Subsequences", "difficulty": "Hard"}]},
    {"number": 458, "slug": "poor-pigs", "title": "Poor Pigs", "difficulty": "Hard", "tags": ["Math", "Dynamic Programming", "Combinatorics"], "similar_problems": []},
    {"number": 460, "slug": "lfu-cache", "title": "LFU Cache", "difficulty": "Hard", "tags": ["Hash Table", "Linked List", "Design", "Doubly-Linked List"], "similar_problems": [{"slug": "lru-cache", "title": "LRU Cache", "difficulty": "Medium"}, {"slug": "design-in-memory-file-system", "title": "Design In-Memory File System", "difficulty": "Hard"}]},
    {"number": 465, "slug": "optimal-account-balancing", "title": "Optimal Account Balancing", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Backtracking", "Bit Manipulation", "Bitmask"], "similar_problems": []},
    {"number": 466, "slug": "count-the-repetitions", "title": "Count The Repetitions", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": []},
    {"number": 471, "slug": "encode-string-with-shortest-length", "title": "Encode String with Shortest Length", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "decode-string", "title": "Decode String", "difficulty": "Medium"}, {"slug": "number-of-atoms", "title": "Number of Atoms", "difficulty": "Hard"}]},
    {"number": 472, "slug": "concatenated-words", "title": "Concatenated Words", "difficulty": "Hard", "tags": ["Array", "String", "Dynamic Programming", "Depth-First Search", "Trie", "Sorting"], "similar_problems": [{"slug": "word-break-ii", "title": "Word Break II", "difficulty": "Hard"}]},
    {"number": 479, "slug": "largest-palindrome-product", "title": "Largest Palindrome Product", "difficulty": "Hard", "tags": ["Math", "Enumeration"], "similar_problems": []},
    {"number": 480, "slug": "sliding-window-median", "title": "Sliding Window Median", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Sliding Window", "Heap (Priority Queue)"], "similar_problems": [{"slug": "find-median-from-data-stream", "title": "Find Median from Data Stream", "difficulty": "Hard"}, {"slug": "minimum-operations-to-make-median-of-array-equal-to-k", "title": "Minimum Operations to Make Median of Array Equal to K", "difficulty": "Medium"}]},
    {"number": 483, "slug": "smallest-good-base", "title": "Smallest Good Base", "difficulty": "Hard", "tags": ["Math", "Binary Search"], "similar_problems": []},
    {"number": 488, "slug": "zuma-game", "title": "Zuma Game", "difficulty": "Hard", "tags": ["String", "Dynamic Programming", "Stack", "Breadth-First Search", "Memoization"], "similar_problems": []},
    {"number": 489, "slug": "robot-room-cleaner", "title": "Robot Room Cleaner", "difficulty": "Hard", "tags": ["Backtracking", "Interactive"], "similar_problems": [{"slug": "walls-and-gates", "title": "Walls and Gates", "difficulty": "Medium"}, {"slug": "shortest-path-in-a-hidden-grid", "title": "Shortest Path in a Hidden Grid", "difficulty": "Medium"}, {"slug": "minimum-path-cost-in-a-hidden-grid", "title": "Minimum Path Cost in a Hidden Grid", "difficulty": "Medium"}, {"slug": "number-of-spaces-cleaning-robot-cleaned", "title": "Number of Spaces Cleaning Robot Cleaned", "difficulty": "Medium"}]},
    {"number": 493, "slug": "reverse-pairs", "title": "Reverse Pairs", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Divide and Conquer", "Binary Indexed Tree", "Segment Tree", "Merge Sort", "Ordered Set"], "similar_problems": [{"slug": "count-of-smaller-numbers-after-self", "title": "Count of Smaller Numbers After Self", "difficulty": "Hard"}, {"slug": "count-of-range-sum", "title": "Count of Range Sum", "difficulty": "Hard"}]},
    {"number": 499, "slug": "the-maze-iii", "title": "The Maze III", "difficulty": "Hard", "tags": ["Array", "String", "Depth-First Search", "Breadth-First Search", "Graph", "Heap (Priority Queue)", "Matrix", "Shortest Path"], "similar_problems": [{"slug": "the-maze", "title": "The Maze", "difficulty": "Medium"}, {"slug": "the-maze-ii", "title": "The Maze II", "difficulty": "Medium"}]},
    {"number": 502, "slug": "ipo", "title": "IPO", "difficulty": "Hard", "tags": ["Array", "Greedy", "Sorting", "Heap (Priority Queue)"], "similar_problems": [{"slug": "maximum-subsequence-score", "title": "Maximum Subsequence Score", "difficulty": "Medium"}, {"slug": "maximum-elegance-of-a-k-length-subsequence", "title": "Maximum Elegance of a K-Length Subsequence", "difficulty": "Hard"}]},
    {"number": 514, "slug": "freedom-trail", "title": "Freedom Trail", "difficulty": "Hard", "tags": ["String", "Dynamic Programming", "Depth-First Search", "Breadth-First Search"], "similar_problems": []},
    {"number": 517, "slug": "super-washing-machines", "title": "Super Washing Machines", "difficulty": "Hard", "tags": ["Array", "Greedy"], "similar_problems": []},
    {"number": 527, "slug": "word-abbreviation", "title": "Word Abbreviation", "difficulty": "Hard", "tags": ["Array", "String", "Greedy", "Trie", "Sorting"], "similar_problems": [{"slug": "valid-word-abbreviation", "title": "Valid Word Abbreviation", "difficulty": "Easy"}, {"slug": "minimum-unique-word-abbreviation", "title": "Minimum Unique Word Abbreviation", "difficulty": "Hard"}, {"slug": "check-if-a-string-is-an-acronym-of-words", "title": "Check if a String Is an Acronym of Words", "difficulty": "Easy"}]},
    {"number": 546, "slug": "remove-boxes", "title": "Remove Boxes", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Memoization"], "similar_problems": [{"slug": "strange-printer", "title": "Strange Printer", "difficulty": "Hard"}, {"slug": "number-of-unique-flavors-after-sharing-k-candies", "title": "Number of Unique Flavors After Sharing K Candies", "difficulty": "Medium"}]},
    {"number": 548, "slug": "split-array-with-equal-sum", "title": "Split Array with Equal Sum", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Prefix Sum"], "similar_problems": [{"slug": "fair-distribution-of-cookies", "title": "Fair Distribution of Cookies", "difficulty": "Medium"}, {"slug": "number-of-ways-to-split-a-string", "title": "Number of Ways to Split a String", "difficulty": "Medium"}]},
    {"number": 552, "slug": "student-attendance-record-ii", "title": "Student Attendance Record II", "difficulty": "Hard", "tags": ["Dynamic Programming"], "similar_problems": [{"slug": "student-attendance-record-i", "title": "Student Attendance Record I", "difficulty": "Easy"}]},
    {"number": 564, "slug": "find-the-closest-palindrome", "title": "Find the Closest Palindrome", "difficulty": "Hard", "tags": ["Math", "String"], "similar_problems": [{"slug": "find-palindrome-with-fixed-length", "title": "Find Palindrome With Fixed Length", "difficulty": "Medium"}, {"slug": "next-palindrome-using-same-digits", "title": "Next Palindrome Using Same Digits", "difficulty": "Hard"}, {"slug": "find-the-count-of-good-integers", "title": "Find the Count of Good Integers", "difficulty": "Hard"}, {"slug": "find-the-largest-palindrome-divisible-by-k", "title": "Find the Largest Palindrome Divisible by K", "difficulty": "Hard"}]},
    {"number": 568, "slug": "maximum-vacation-days", "title": "Maximum Vacation Days", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Matrix"], "similar_problems": [{"slug": "cheapest-flights-within-k-stops", "title": "Cheapest Flights Within K Stops", "difficulty": "Medium"}]},
    {"number": 569, "slug": "median-employee-salary", "title": "Median Employee Salary", "difficulty": "Hard", "tags": ["Database"], "similar_problems": [{"slug": "find-median-given-frequency-of-numbers", "title": "Find Median Given Frequency of Numbers", "difficulty": "Hard"}]},
    {"number": 571, "slug": "find-median-given-frequency-of-numbers", "title": "Find Median Given Frequency of Numbers", "difficulty": "Hard", "tags": ["Database"], "similar_problems": [{"slug": "median-employee-salary", "title": "Median Employee Salary", "difficulty": "Hard"}]},
    {"number": 579, "slug": "find-cumulative-salary-of-an-employee", "title": "Find Cumulative Salary of an Employee", "difficulty": "Hard", "tags": ["Database"], "similar_problems": []},
    {"number": 587, "slug": "erect-the-fence", "title": "Erect the Fence", "difficulty": "Hard", "tags": ["Array", "Math", "Geometry"], "similar_problems": [{"slug": "erect-the-fence-ii", "title": "Erect the Fence II", "difficulty": "Hard"}, {"slug": "sort-the-students-by-their-kth-score", "title": "Sort the Students by Their Kth Score", "difficulty": "Medium"}]},
    {"number": 588, "slug": "design-in-memory-file-system", "title": "Design In-Memory File System", "difficulty": "Hard", "tags": ["Hash Table", "String", "Design", "Trie", "Sorting"], "similar_problems": [{"slug": "lru-cache", "title": "LRU Cache", "difficulty": "Medium"}, {"slug": "lfu-cache", "title": "LFU Cache", "difficulty": "Hard"}, {"slug": "design-log-storage-system", "title": "Design Log Storage System", "difficulty": "Medium"}]},
    {"number": 591, "slug": "tag-validator", "title": "Tag Validator", "difficulty": "Hard", "tags": ["String", "Stack"], "similar_problems": [{"slug": "add-bold-tag-in-string", "title": "Add Bold Tag in String", "difficulty": "Medium"}]},
    {"number": 600, "slug": "non-negative-integers-without-consecutive-ones", "title": "Non-negative Integers without Consecutive Ones", "difficulty": "Hard", "tags": ["Dynamic Programming"], "similar_problems": [{"slug": "house-robber", "title": "House Robber", "difficulty": "Medium"}, {"slug": "house-robber-ii", "title": "House Robber II", "difficulty": "Medium"}, {"slug": "ones-and-zeroes", "title": "Ones and Zeroes", "difficulty": "Medium"}, {"slug": "generate-binary-strings-without-adjacent-zeros", "title": "Generate Binary Strings Without Adjacent Zeros", "difficulty": "Medium"}]},
    {"number": 601, "slug": "human-traffic-of-stadium", "title": "Human Traffic of Stadium", "difficulty": "Hard", "tags": ["Database"], "similar_problems": []},
    {"number": 615, "slug": "average-salary-departments-vs-company", "title": "Average Salary: Departments VS Company", "difficulty": "Hard", "tags": ["Database"], "similar_problems": [{"slug": "countries-you-can-safely-invest-in", "title": "Countries You Can Safely Invest In", "difficulty": "Medium"}]},
    {"number": 618, "slug": "students-report-by-geography", "title": "Students Report By Geography", "difficulty": "Hard", "tags": ["Database"], "similar_problems": []},
    {"number": 629, "slug": "k-inverse-pairs-array", "title": "K Inverse Pairs Array", "difficulty": "Hard", "tags": ["Dynamic Programming"], "similar_problems": [{"slug": "count-the-number-of-inversions", "title": "Count the Number of Inversions", "difficulty": "Hard"}]},
    {"number": 630, "slug": "course-schedule-iii", "title": "Course Schedule III", "difficulty": "Hard", "tags": ["Array", "Greedy", "Sorting", "Heap (Priority Queue)"], "similar_problems": [{"slug": "course-schedule", "title": "Course Schedule", "difficulty": "Medium"}, {"slug": "course-schedule-ii", "title": "Course Schedule II", "difficulty": "Medium"}, {"slug": "parallel-courses-iii", "title": "Parallel Courses III", "difficulty": "Hard"}]},
    {"number": 631, "slug": "design-excel-sum-formula", "title": "Design Excel Sum Formula", "difficulty": "Hard", "tags": ["Array", "Hash Table", "String", "Graph", "Design", "Topological Sort", "Matrix"], "similar_problems": []},
    {"number": 632, "slug": "smallest-range-covering-elements-from-k-lists", "title": "Smallest Range Covering Elements from K Lists", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Greedy", "Sliding Window", "Sorting", "Heap (Priority Queue)"], "similar_problems": [{"slug": "minimum-window-substring", "title": "Minimum Window Substring", "difficulty": "Hard"}]},
    {"number": 639, "slug": "decode-ways-ii", "title": "Decode Ways II", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "decode-ways", "title": "Decode Ways", "difficulty": "Medium"}, {"slug": "number-of-ways-to-separate-numbers", "title": "Number of Ways to Separate Numbers", "difficulty": "Hard"}, {"slug": "number-of-ways-to-divide-a-long-corridor", "title": "Number of Ways to Divide a Long Corridor", "difficulty": "Hard"}]},
    {"number": 642, "slug": "design-search-autocomplete-system", "title": "Design Search Autocomplete System", "difficulty": "Hard", "tags": ["String", "Depth-First Search", "Design", "Trie", "Sorting", "Heap (Priority Queue)", "Data Stream"], "similar_problems": [{"slug": "implement-trie-prefix-tree", "title": "Implement Trie (Prefix Tree)", "difficulty": "Medium"}]},
    {"number": 644, "slug": "maximum-average-subarray-ii", "title": "Maximum Average Subarray II", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Prefix Sum"], "similar_problems": [{"slug": "maximum-average-subarray-i", "title": "Maximum Average Subarray I", "difficulty": "Easy"}]},
    {"number": 656, "slug": "coin-path", "title": "Coin Path", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "house-robber", "title": "House Robber", "difficulty": "Medium"}, {"slug": "house-robber-ii", "title": "House Robber II", "difficulty": "Medium"}]},
    {"number": 660, "slug": "remove-9", "title": "Remove 9", "difficulty": "Hard", "tags": ["Math"], "similar_problems": []},
    {"number": 664, "slug": "strange-printer", "title": "Strange Printer", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "remove-boxes", "title": "Remove Boxes", "difficulty": "Hard"}, {"slug": "strange-printer-ii", "title": "Strange Printer II", "difficulty": "Hard"}]},
    {"number": 668, "slug": "kth-smallest-number-in-multiplication-table", "title": "Kth Smallest Number in Multiplication Table", "difficulty": "Hard", "tags": ["Math", "Binary Search"], "similar_problems": [{"slug": "kth-smallest-element-in-a-sorted-matrix", "title": "Kth Smallest Element in a Sorted Matrix", "difficulty": "Medium"}, {"slug": "find-k-th-smallest-pair-distance", "title": "Find K-th Smallest Pair Distance", "difficulty": "Hard"}, {"slug": "k-th-smallest-prime-fraction", "title": "K-th Smallest Prime Fraction", "difficulty": "Medium"}, {"slug": "minimum-time-to-eat-all-grains", "title": "Minimum Time to Eat All Grains", "difficulty": "Hard"}, {"slug": "kth-smallest-amount-with-single-denomination-combination", "title": "Kth Smallest Amount With Single Denomination Combination", "difficulty": "Hard"}]},
    {"number": 675, "slug": "cut-off-trees-for-golf-event", "title": "Cut Off Trees for Golf Event", "difficulty": "Hard", "tags": ["Array", "Breadth-First Search", "Heap (Priority Queue)", "Matrix"], "similar_problems": []},
    {"number": 679, "slug": "24-game", "title": "24 Game", "difficulty": "Hard", "tags": ["Array", "Math", "Backtracking"], "similar_problems": []},
    {"number": 683, "slug": "k-empty-slots", "title": "K Empty Slots", "difficulty": "Hard", "tags": ["Array", "Binary Indexed Tree", "Segment Tree", "Queue", "Sliding Window", "Heap (Priority Queue)", "Ordered Set", "Monotonic Queue"], "similar_problems": []},
    {"number": 685, "slug": "redundant-connection-ii", "title": "Redundant Connection II", "difficulty": "Hard", "tags": ["Depth-First Search", "Breadth-First Search", "Union Find", "Graph"], "similar_problems": [{"slug": "redundant-connection", "title": "Redundant Connection", "difficulty": "Medium"}]},
    {"number": 689, "slug": "maximum-sum-of-3-non-overlapping-subarrays", "title": "Maximum Sum of 3 Non-Overlapping Subarrays", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Sliding Window", "Prefix Sum"], "similar_problems": [{"slug": "best-time-to-buy-and-sell-stock-iii", "title": "Best Time to Buy and Sell Stock III", "difficulty": "Hard"}, {"slug": "sum-of-variable-length-subarrays", "title": "Sum of Variable Length Subarrays", "difficulty": "Easy"}, {"slug": "maximize-ysum-by-picking-a-triplet-of-distinct-xvalues", "title": "Maximize Y‑Sum by Picking a Triplet of Distinct X‑Values", "difficulty": "Medium"}]},
    {"number": 691, "slug": "stickers-to-spell-word", "title": "Stickers to Spell Word", "difficulty": "Hard", "tags": ["Array", "Hash Table", "String", "Dynamic Programming", "Backtracking", "Bit Manipulation", "Memoization", "Bitmask"], "similar_problems": [{"slug": "ransom-note", "title": "Ransom Note", "difficulty": "Easy"}]},
    {"number": 699, "slug": "falling-squares", "title": "Falling Squares", "difficulty": "Hard", "tags": ["Array", "Segment Tree", "Ordered Set"], "similar_problems": [{"slug": "the-skyline-problem", "title": "The Skyline Problem", "difficulty": "Hard"}]},
    {"number": 710, "slug": "random-pick-with-blacklist", "title": "Random Pick with Blacklist", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Math", "Binary Search", "Sorting", "Randomized"], "similar_problems": [{"slug": "random-pick-index", "title": "Random Pick Index", "difficulty": "Medium"}, {"slug": "random-pick-with-weight", "title": "Random Pick with Weight", "difficulty": "Medium"}, {"slug": "find-unique-binary-string", "title": "Find Unique Binary String", "difficulty": "Medium"}]},
    {"number": 711, "slug": "number-of-distinct-islands-ii", "title": "Number of Distinct Islands II", "difficulty": "Hard", "tags": ["Hash Table", "Depth-First Search", "Breadth-First Search", "Union Find", "Hash Function"], "similar_problems": [{"slug": "number-of-distinct-islands", "title": "Number of Distinct Islands", "difficulty": "Medium"}]},
    {"number": 715, "slug": "range-module", "title": "Range Module", "difficulty": "Hard", "tags": ["Design", "Segment Tree", "Ordered Set"], "similar_problems": [{"slug": "merge-intervals", "title": "Merge Intervals", "difficulty": "Medium"}, {"slug": "insert-interval", "title": "Insert Interval", "difficulty": "Medium"}, {"slug": "data-stream-as-disjoint-intervals", "title": "Data Stream as Disjoint Intervals", "difficulty": "Hard"}]},
    {"number": 716, "slug": "max-stack", "title": "Max Stack", "difficulty": "Hard", "tags": ["Linked List", "Stack", "Design", "Doubly-Linked List", "Ordered Set"], "similar_problems": [{"slug": "min-stack", "title": "Min Stack", "difficulty": "Medium"}]},
    {"number": 719, "slug": "find-k-th-smallest-pair-distance", "title": "Find K-th Smallest Pair Distance", "difficulty": "Hard", "tags": ["Array", "Two Pointers", "Binary Search", "Sorting"], "similar_problems": [{"slug": "find-k-pairs-with-smallest-sums", "title": "Find K Pairs with Smallest Sums", "difficulty": "Medium"}, {"slug": "kth-smallest-element-in-a-sorted-matrix", "title": "Kth Smallest Element in a Sorted Matrix", "difficulty": "Medium"}, {"slug": "find-k-closest-elements", "title": "Find K Closest Elements", "difficulty": "Medium"}, {"slug": "kth-smallest-number-in-multiplication-table", "title": "Kth Smallest Number in Multiplication Table", "difficulty": "Hard"}, {"slug": "k-th-smallest-prime-fraction", "title": "K-th Smallest Prime Fraction", "difficulty": "Medium"}, {"slug": "find-the-median-of-the-uniqueness-array", "title": "Find the Median of the Uniqueness Array", "difficulty": "Hard"}, {"slug": "maximize-score-of-numbers-in-ranges", "title": "Maximize Score of Numbers in Ranges", "difficulty": "Medium"}]},
    {"number": 726, "slug": "number-of-atoms", "title": "Number of Atoms", "difficulty": "Hard", "tags": ["Hash Table", "String", "Stack", "Sorting"], "similar_problems": [{"slug": "decode-string", "title": "Decode String", "difficulty": "Medium"}, {"slug": "encode-string-with-shortest-length", "title": "Encode String with Shortest Length", "difficulty": "Hard"}, {"slug": "parse-lisp-expression", "title": "Parse Lisp Expression", "difficulty": "Hard"}]},
    {"number": 727, "slug": "minimum-window-subsequence", "title": "Minimum Window Subsequence", "difficulty": "Hard", "tags": ["String", "Dynamic Programming", "Sliding Window"], "similar_problems": [{"slug": "minimum-window-substring", "title": "Minimum Window Substring", "difficulty": "Hard"}, {"slug": "longest-continuous-increasing-subsequence", "title": "Longest Continuous Increasing Subsequence", "difficulty": "Easy"}]},
    {"number": 730, "slug": "count-different-palindromic-subsequences", "title": "Count Different Palindromic Subsequences", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "longest-palindromic-subsequence", "title": "Longest Palindromic Subsequence", "difficulty": "Medium"}, {"slug": "count-palindromic-subsequences", "title": "Count Palindromic Subsequences", "difficulty": "Hard"}]},
    {"number": 732, "slug": "my-calendar-iii", "title": "My Calendar III", "difficulty": "Hard", "tags": ["Binary Search", "Design", "Segment Tree", "Prefix Sum", "Ordered Set"], "similar_problems": [{"slug": "my-calendar-i", "title": "My Calendar I", "difficulty": "Medium"}, {"slug": "my-calendar-ii", "title": "My Calendar II", "difficulty": "Medium"}, {"slug": "count-integers-in-intervals", "title": "Count Integers in Intervals", "difficulty": "Hard"}]},
    {"number": 736, "slug": "parse-lisp-expression", "title": "Parse Lisp Expression", "difficulty": "Hard", "tags": ["Hash Table", "String", "Stack", "Recursion"], "similar_problems": [{"slug": "ternary-expression-parser", "title": "Ternary Expression Parser", "difficulty": "Medium"}, {"slug": "number-of-atoms", "title": "Number of Atoms", "difficulty": "Hard"}, {"slug": "basic-calculator-iv", "title": "Basic Calculator IV", "difficulty": "Hard"}]},
    {"number": 741, "slug": "cherry-pickup", "title": "Cherry Pickup", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Matrix"], "similar_problems": [{"slug": "minimum-path-sum", "title": "Minimum Path Sum", "difficulty": "Medium"}, {"slug": "dungeon-game", "title": "Dungeon Game", "difficulty": "Hard"}, {"slug": "maximum-path-quality-of-a-graph", "title": "Maximum Path Quality of a Graph", "difficulty": "Hard"}, {"slug": "paths-in-matrix-whose-sum-is-divisible-by-k", "title": "Paths in Matrix Whose Sum Is Divisible by K", "difficulty": "Hard"}]},
    {"number": 745, "slug": "prefix-and-suffix-search", "title": "Prefix and Suffix Search", "difficulty": "Hard", "tags": ["Array", "Hash Table", "String", "Design", "Trie"], "similar_problems": [{"slug": "design-add-and-search-words-data-structure", "title": "Design Add and Search Words Data Structure", "difficulty": "Medium"}]},
    {"number": 749, "slug": "contain-virus", "title": "Contain Virus", "difficulty": "Hard", "tags": ["Array", "Depth-First Search", "Breadth-First Search", "Matrix", "Simulation"], "similar_problems": [{"slug": "count-the-number-of-infection-sequences", "title": "Count the Number of Infection Sequences", "difficulty": "Hard"}]},
    {"number": 753, "slug": "cracking-the-safe", "title": "Cracking the Safe", "difficulty": "Hard", "tags": ["Depth-First Search", "Graph", "Eulerian Circuit"], "similar_problems": []},
    {"number": 757, "slug": "set-intersection-size-at-least-two", "title": "Set Intersection Size At Least Two", "difficulty": "Hard", "tags": ["Array", "Greedy", "Sorting"], "similar_problems": []},
    {"number": 759, "slug": "employee-free-time", "title": "Employee Free Time", "difficulty": "Hard", "tags": ["Array", "Line Sweep", "Sorting", "Heap (Priority Queue)"], "similar_problems": [{"slug": "merge-intervals", "title": "Merge Intervals", "difficulty": "Medium"}, {"slug": "interval-list-intersections", "title": "Interval List Intersections", "difficulty": "Medium"}]},
    {"number": 761, "slug": "special-binary-string", "title": "Special Binary String", "difficulty": "Hard", "tags": ["String", "Recursion"], "similar_problems": [{"slug": "valid-parenthesis-string", "title": "Valid Parenthesis String", "difficulty": "Medium"}, {"slug": "number-of-good-binary-strings", "title": "Number of Good Binary Strings", "difficulty": "Medium"}]},
    {"number": 765, "slug": "couples-holding-hands", "title": "Couples Holding Hands", "difficulty": "Hard", "tags": ["Greedy", "Depth-First Search", "Breadth-First Search", "Union Find", "Graph"], "similar_problems": [{"slug": "first-missing-positive", "title": "First Missing Positive", "difficulty": "Hard"}, {"slug": "missing-number", "title": "Missing Number", "difficulty": "Easy"}, {"slug": "k-similar-strings", "title": "K-Similar Strings", "difficulty": "Hard"}]},
    {"number": 768, "slug": "max-chunks-to-make-sorted-ii", "title": "Max Chunks To Make Sorted II", "difficulty": "Hard", "tags": ["Array", "Stack", "Greedy", "Sorting", "Monotonic Stack"], "similar_problems": [{"slug": "max-chunks-to-make-sorted", "title": "Max Chunks To Make Sorted", "difficulty": "Medium"}]},
    {"number": 770, "slug": "basic-calculator-iv", "title": "Basic Calculator IV", "difficulty": "Hard", "tags": ["Hash Table", "Math", "String", "Stack", "Recursion"], "similar_problems": [{"slug": "parse-lisp-expression", "title": "Parse Lisp Expression", "difficulty": "Hard"}, {"slug": "basic-calculator-iii", "title": "Basic Calculator III", "difficulty": "Hard"}]},
    {"number": 772, "slug": "basic-calculator-iii", "title": "Basic Calculator III", "difficulty": "Hard", "tags": ["Math", "String", "Stack", "Recursion"], "similar_problems": [{"slug": "basic-calculator", "title": "Basic Calculator", "difficulty": "Hard"}, {"slug": "basic-calculator-ii", "title": "Basic Calculator II", "difficulty": "Medium"}, {"slug": "basic-calculator-iv", "title": "Basic Calculator IV", "difficulty": "Hard"}, {"slug": "build-binary-expression-tree-from-infix-expression", "title": "Build Binary Expression Tree From Infix Expression", "difficulty": "Hard"}]},
    {"number": 773, "slug": "sliding-puzzle", "title": "Sliding Puzzle", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Backtracking", "Breadth-First Search", "Memoization", "Matrix"], "similar_problems": []},
    {"number": 774, "slug": "minimize-max-distance-to-gas-station", "title": "Minimize Max Distance to Gas Station", "difficulty": "Hard", "tags": ["Array", "Binary Search"], "similar_problems": [{"slug": "koko-eating-bananas", "title": "Koko Eating Bananas", "difficulty": "Medium"}]},
    {"number": 778, "slug": "swim-in-rising-water", "title": "Swim in Rising Water", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Depth-First Search", "Breadth-First Search", "Union Find", "Heap (Priority Queue)", "Matrix"], "similar_problems": [{"slug": "path-with-minimum-effort", "title": "Path With Minimum Effort", "difficulty": "Medium"}]},
    {"number": 780, "slug": "reaching-points", "title": "Reaching Points", "difficulty": "Hard", "tags": ["Math"], "similar_problems": [{"slug": "number-of-ways-to-reach-a-position-after-exactly-k-steps", "title": "Number of Ways to Reach a Position After Exactly k Steps", "difficulty": "Medium"}, {"slug": "check-if-point-is-reachable", "title": "Check if Point Is Reachable", "difficulty": "Hard"}, {"slug": "determine-if-a-cell-is-reachable-at-a-given-time", "title": "Determine if a Cell Is Reachable at a Given Time", "difficulty": "Medium"}]},
    {"number": 782, "slug": "transform-to-chessboard", "title": "Transform to Chessboard", "difficulty": "Hard", "tags": ["Array", "Math", "Bit Manipulation", "Matrix"], "similar_problems": [{"slug": "minimum-moves-to-get-a-peaceful-board", "title": "Minimum Moves to Get a Peaceful Board", "difficulty": "Medium"}]},
    {"number": 793, "slug": "preimage-size-of-factorial-zeroes-function", "title": "Preimage Size of Factorial Zeroes Function", "difficulty": "Hard", "tags": ["Math", "Binary Search"], "similar_problems": [{"slug": "factorial-trailing-zeroes", "title": "Factorial Trailing Zeroes", "difficulty": "Medium"}]},
    {"number": 798, "slug": "smallest-rotation-with-highest-score", "title": "Smallest Rotation with Highest Score", "difficulty": "Hard", "tags": ["Array", "Prefix Sum"], "similar_problems": []},
    {"number": 801, "slug": "minimum-swaps-to-make-sequences-increasing", "title": "Minimum Swaps To Make Sequences Increasing", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "minimum-operations-to-make-the-array-k-increasing", "title": "Minimum Operations to Make the Array K-Increasing", "difficulty": "Hard"}, {"slug": "minimum-operations-to-maximize-last-elements-in-arrays", "title": "Minimum Operations to Maximize Last Elements in Arrays", "difficulty": "Medium"}]},
    {"number": 803, "slug": "bricks-falling-when-hit", "title": "Bricks Falling When Hit", "difficulty": "Hard", "tags": ["Array", "Union Find", "Matrix"], "similar_problems": [{"slug": "last-day-where-you-can-still-cross", "title": "Last Day Where You Can Still Cross", "difficulty": "Hard"}, {"slug": "number-of-ways-to-build-sturdy-brick-wall", "title": "Number of Ways to Build Sturdy Brick Wall", "difficulty": "Medium"}]},
    {"number": 805, "slug": "split-array-with-same-average", "title": "Split Array With Same Average", "difficulty": "Hard", "tags": ["Array", "Math", "Dynamic Programming", "Bit Manipulation", "Bitmask"], "similar_problems": [{"slug": "partition-array-into-two-arrays-to-minimize-sum-difference", "title": "Partition Array Into Two Arrays to Minimize Sum Difference", "difficulty": "Hard"}, {"slug": "minimum-average-difference", "title": "Minimum Average Difference", "difficulty": "Medium"}]},
    {"number": 810, "slug": "chalkboard-xor-game", "title": "Chalkboard XOR Game", "difficulty": "Hard", "tags": ["Array", "Math", "Bit Manipulation", "Brainteaser", "Game Theory"], "similar_problems": []},
    {"number": 815, "slug": "bus-routes", "title": "Bus Routes", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Breadth-First Search"], "similar_problems": [{"slug": "minimum-costs-using-the-train-line", "title": "Minimum Costs Using the Train Line", "difficulty": "Hard"}]},
    {"number": 818, "slug": "race-car", "title": "Race Car", "difficulty": "Hard", "tags": ["Dynamic Programming"], "similar_problems": []},
    {"number": 827, "slug": "making-a-large-island", "title": "Making A Large Island", "difficulty": "Hard", "tags": ["Array", "Depth-First Search", "Breadth-First Search", "Union Find", "Matrix"], "similar_problems": []},
    {"number": 828, "slug": "count-unique-characters-of-all-substrings-of-a-given-string", "title": "Count Unique Characters of All Substrings of a Given String", "difficulty": "Hard", "tags": ["Hash Table", "String", "Dynamic Programming"], "similar_problems": [{"slug": "total-appeal-of-a-string", "title": "Total Appeal of A String", "difficulty": "Hard"}]},
    {"number": 829, "slug": "consecutive-numbers-sum", "title": "Consecutive Numbers Sum", "difficulty": "Hard", "tags": ["Math", "Enumeration"], "similar_problems": []},
    {"number": 834, "slug": "sum-of-distances-in-tree", "title": "Sum of Distances in Tree", "difficulty": "Hard", "tags": ["Dynamic Programming", "Tree", "Depth-First Search", "Graph"], "similar_problems": [{"slug": "distribute-coins-in-binary-tree", "title": "Distribute Coins in Binary Tree", "difficulty": "Medium"}, {"slug": "count-nodes-with-the-highest-score", "title": "Count Nodes With the Highest Score", "difficulty": "Medium"}, {"slug": "collect-coins-in-a-tree", "title": "Collect Coins in a Tree", "difficulty": "Hard"}, {"slug": "maximum-score-after-applying-operations-on-a-tree", "title": "Maximum Score After Applying Operations on a Tree", "difficulty": "Medium"}, {"slug": "count-pairs-of-connectable-servers-in-a-weighted-tree-network", "title": "Count Pairs of Connectable Servers in a Weighted Tree Network", "difficulty": "Medium"}, {"slug": "time-taken-to-mark-all-nodes", "title": "Time Taken to Mark All Nodes", "difficulty": "Hard"}]},
    {"number": 839, "slug": "similar-string-groups", "title": "Similar String Groups", "difficulty": "Hard", "tags": ["Array", "Hash Table", "String", "Depth-First Search", "Breadth-First Search", "Union Find"], "similar_problems": [{"slug": "groups-of-strings", "title": "Groups of Strings", "difficulty": "Hard"}]},
    {"number": 843, "slug": "guess-the-word", "title": "Guess the Word", "difficulty": "Hard", "tags": ["Array", "Math", "String", "Interactive", "Game Theory"], "similar_problems": []},
    {"number": 847, "slug": "shortest-path-visiting-all-nodes", "title": "Shortest Path Visiting All Nodes", "difficulty": "Hard", "tags": ["Dynamic Programming", "Bit Manipulation", "Breadth-First Search", "Graph", "Bitmask"], "similar_problems": [{"slug": "find-the-minimum-cost-array-permutation", "title": "Find the Minimum Cost Array Permutation", "difficulty": "Hard"}]},
    {"number": 850, "slug": "rectangle-area-ii", "title": "Rectangle Area II", "difficulty": "Hard", "tags": ["Array", "Segment Tree", "Line Sweep", "Ordered Set"], "similar_problems": [{"slug": "separate-squares-ii", "title": "Separate Squares II", "difficulty": "Hard"}]},
    {"number": 854, "slug": "k-similar-strings", "title": "K-Similar Strings", "difficulty": "Hard", "tags": ["Hash Table", "String", "Breadth-First Search"], "similar_problems": [{"slug": "couples-holding-hands", "title": "Couples Holding Hands", "difficulty": "Hard"}]},
    {"number": 857, "slug": "minimum-cost-to-hire-k-workers", "title": "Minimum Cost to Hire K Workers", "difficulty": "Hard", "tags": ["Array", "Greedy", "Sorting", "Heap (Priority Queue)"], "similar_problems": [{"slug": "maximum-subsequence-score", "title": "Maximum Subsequence Score", "difficulty": "Medium"}]},
    {"number": 862, "slug": "shortest-subarray-with-sum-at-least-k", "title": "Shortest Subarray with Sum at Least K", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Queue", "Sliding Window", "Heap (Priority Queue)", "Prefix Sum", "Monotonic Queue"], "similar_problems": [{"slug": "shortest-subarray-with-or-at-least-k-ii", "title": "Shortest Subarray With OR at Least K II", "difficulty": "Medium"}, {"slug": "shortest-subarray-with-or-at-least-k-i", "title": "Shortest Subarray With OR at Least K I", "difficulty": "Easy"}]},
    {"number": 864, "slug": "shortest-path-to-get-all-keys", "title": "Shortest Path to Get All Keys", "difficulty": "Hard", "tags": ["Array", "Bit Manipulation", "Breadth-First Search", "Matrix"], "similar_problems": []},
    {"number": 871, "slug": "minimum-number-of-refueling-stops", "title": "Minimum Number of Refueling Stops", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Greedy", "Heap (Priority Queue)"], "similar_problems": []},
    {"number": 878, "slug": "nth-magical-number", "title": "Nth Magical Number", "difficulty": "Hard", "tags": ["Math", "Binary Search"], "similar_problems": []},
    {"number": 879, "slug": "profitable-schemes", "title": "Profitable Schemes", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": []},
    {"number": 882, "slug": "reachable-nodes-in-subdivided-graph", "title": "Reachable Nodes In Subdivided Graph", "difficulty": "Hard", "tags": ["Graph", "Heap (Priority Queue)", "Shortest Path"], "similar_problems": [{"slug": "find-all-people-with-secret", "title": "Find All People With Secret", "difficulty": "Hard"}, {"slug": "paths-in-maze-that-lead-to-same-room", "title": "Paths in Maze That Lead to Same Room", "difficulty": "Medium"}]},
    {"number": 887, "slug": "super-egg-drop", "title": "Super Egg Drop", "difficulty": "Hard", "tags": ["Math", "Binary Search", "Dynamic Programming"], "similar_problems": [{"slug": "egg-drop-with-2-eggs-and-n-floors", "title": "Egg Drop With 2 Eggs and N Floors", "difficulty": "Medium"}]},
    {"number": 891, "slug": "sum-of-subsequence-widths", "title": "Sum of Subsequence Widths", "difficulty": "Hard", "tags": ["Array", "Math", "Sorting"], "similar_problems": []},
    {"number": 895, "slug": "maximum-frequency-stack", "title": "Maximum Frequency Stack", "difficulty": "Hard", "tags": ["Hash Table", "Stack", "Design", "Ordered Set"], "similar_problems": []},
    {"number": 899, "slug": "orderly-queue", "title": "Orderly Queue", "difficulty": "Hard", "tags": ["Math", "String", "Sorting"], "similar_problems": []},
    {"number": 902, "slug": "numbers-at-most-n-given-digit-set", "title": "Numbers At Most N Given Digit Set", "difficulty": "Hard", "tags": ["Array", "Math", "String", "Binary Search", "Dynamic Programming"], "similar_problems": []},
    {"number": 903, "slug": "valid-permutations-for-di-sequence", "title": "Valid Permutations for DI Sequence", "difficulty": "Hard", "tags": ["String", "Dynamic Programming", "Prefix Sum"], "similar_problems": []},
    {"number": 906, "slug": "super-palindromes", "title": "Super Palindromes", "difficulty": "Hard", "tags": ["Math", "String", "Enumeration"], "similar_problems": []},
    {"number": 913, "slug": "cat-and-mouse", "title": "Cat and Mouse", "difficulty": "Hard", "tags": ["Math", "Dynamic Programming", "Graph", "Topological Sort", "Memoization", "Game Theory"], "similar_problems": [{"slug": "cat-and-mouse-ii", "title": "Cat and Mouse II", "difficulty": "Hard"}]},
    {"number": 920, "slug": "number-of-music-playlists", "title": "Number of Music Playlists", "difficulty": "Hard", "tags": ["Math", "Dynamic Programming", "Combinatorics"], "similar_problems": [{"slug": "count-the-number-of-good-subsequences", "title": "Count the Number of Good Subsequences", "difficulty": "Medium"}]},
    {"number": 924, "slug": "minimize-malware-spread", "title": "Minimize Malware Spread", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Depth-First Search", "Breadth-First Search", "Union Find", "Graph"], "similar_problems": []},
    {"number": 927, "slug": "three-equal-parts", "title": "Three Equal Parts", "difficulty": "Hard", "tags": ["Array", "Math"], "similar_problems": []},
    {"number": 928, "slug": "minimize-malware-spread-ii", "title": "Minimize Malware Spread II", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Depth-First Search", "Breadth-First Search", "Union Find", "Graph"], "similar_problems": []},
    {"number": 936, "slug": "stamping-the-sequence", "title": "Stamping The Sequence", "difficulty": "Hard", "tags": ["String", "Stack", "Greedy", "Queue"], "similar_problems": []},
    {"number": 940, "slug": "distinct-subsequences-ii", "title": "Distinct Subsequences II", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "number-of-unique-good-subsequences", "title": "Number of Unique Good Subsequences", "difficulty": "Hard"}, {"slug": "count-k-subsequences-of-a-string-with-maximum-beauty", "title": "Count K-Subsequences of a String With Maximum Beauty", "difficulty": "Hard"}]},
    {"number": 943, "slug": "find-the-shortest-superstring", "title": "Find the Shortest Superstring", "difficulty": "Hard", "tags": ["Array", "String", "Dynamic Programming", "Bit Manipulation", "Bitmask"], "similar_problems": [{"slug": "maximum-rows-covered-by-columns", "title": "Maximum Rows Covered by Columns", "difficulty": "Medium"}, {"slug": "find-the-minimum-cost-array-permutation", "title": "Find the Minimum Cost Array Permutation", "difficulty": "Hard"}, {"slug": "find-the-shortest-superstring-ii", "title": "Find the Shortest Superstring II", "difficulty": "Easy"}]},
    {"number": 952, "slug": "largest-component-size-by-common-factor", "title": "Largest Component Size by Common Factor", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Math", "Union Find", "Number Theory"], "similar_problems": [{"slug": "groups-of-strings", "title": "Groups of Strings", "difficulty": "Hard"}, {"slug": "distinct-prime-factors-of-product-of-array", "title": "Distinct Prime Factors of Product of Array", "difficulty": "Medium"}]},
    {"number": 956, "slug": "tallest-billboard", "title": "Tallest Billboard", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "partition-array-into-two-arrays-to-minimize-sum-difference", "title": "Partition Array Into Two Arrays to Minimize Sum Difference", "difficulty": "Hard"}]},
    {"number": 960, "slug": "delete-columns-to-make-sorted-iii", "title": "Delete Columns to Make Sorted III", "difficulty": "Hard", "tags": ["Array", "String", "Dynamic Programming"], "similar_problems": []},
    {"number": 964, "slug": "least-operators-to-express-number", "title": "Least Operators to Express Number", "difficulty": "Hard", "tags": ["Math", "Dynamic Programming", "Memoization"], "similar_problems": []},
    {"number": 968, "slug": "binary-tree-cameras", "title": "Binary Tree Cameras", "difficulty": "Hard", "tags": ["Dynamic Programming", "Tree", "Depth-First Search", "Binary Tree"], "similar_problems": [{"slug": "distribute-coins-in-binary-tree", "title": "Distribute Coins in Binary Tree", "difficulty": "Medium"}, {"slug": "choose-edges-to-maximize-score-in-a-tree", "title": "Choose Edges to Maximize Score in a Tree", "difficulty": "Medium"}]},
    {"number": 972, "slug": "equal-rational-numbers", "title": "Equal Rational Numbers", "difficulty": "Hard", "tags": ["Math", "String"], "similar_problems": []},
    {"number": 975, "slug": "odd-even-jump", "title": "Odd Even Jump", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Stack", "Sorting", "Monotonic Stack", "Ordered Set"], "similar_problems": []},
    {"number": 980, "slug": "unique-paths-iii", "title": "Unique Paths III", "difficulty": "Hard", "tags": ["Array", "Backtracking", "Bit Manipulation", "Matrix"], "similar_problems": [{"slug": "sudoku-solver", "title": "Sudoku Solver", "difficulty": "Hard"}, {"slug": "unique-paths-ii", "title": "Unique Paths II", "difficulty": "Medium"}, {"slug": "word-search-ii", "title": "Word Search II", "difficulty": "Hard"}]},
    {"number": 982, "slug": "triples-with-bitwise-and-equal-to-zero", "title": "Triples with Bitwise AND Equal To Zero", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Bit Manipulation"], "similar_problems": []},
    {"number": 987, "slug": "vertical-order-traversal-of-a-binary-tree", "title": "Vertical Order Traversal of a Binary Tree", "difficulty": "Hard", "tags": ["Hash Table", "Tree", "Depth-First Search", "Breadth-First Search", "Sorting", "Binary Tree"], "similar_problems": []},
    {"number": 992, "slug": "subarrays-with-k-different-integers", "title": "Subarrays with K Different Integers", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Sliding Window", "Counting"], "similar_problems": [{"slug": "longest-substring-without-repeating-characters", "title": "Longest Substring Without Repeating Characters", "difficulty": "Medium"}, {"slug": "longest-substring-with-at-most-two-distinct-characters", "title": "Longest Substring with At Most Two Distinct Characters", "difficulty": "Medium"}, {"slug": "longest-substring-with-at-most-k-distinct-characters", "title": "Longest Substring with At Most K Distinct Characters", "difficulty": "Medium"}, {"slug": "count-vowel-substrings-of-a-string", "title": "Count Vowel Substrings of a String", "difficulty": "Easy"}, {"slug": "number-of-unique-flavors-after-sharing-k-candies", "title": "Number of Unique Flavors After Sharing K Candies", "difficulty": "Medium"}, {"slug": "k-divisible-elements-subarrays", "title": "K Divisible Elements Subarrays", "difficulty": "Medium"}, {"slug": "count-complete-subarrays-in-an-array", "title": "Count Complete Subarrays in an Array", "difficulty": "Medium"}]},
    {"number": 995, "slug": "minimum-number-of-k-consecutive-bit-flips", "title": "Minimum Number of K Consecutive Bit Flips", "difficulty": "Hard", "tags": ["Array", "Bit Manipulation", "Queue", "Sliding Window", "Prefix Sum"], "similar_problems": [{"slug": "bulb-switcher", "title": "Bulb Switcher", "difficulty": "Medium"}, {"slug": "minimum-time-to-remove-all-cars-containing-illegal-goods", "title": "Minimum Time to Remove All Cars Containing Illegal Goods", "difficulty": "Hard"}, {"slug": "number-of-distinct-binary-strings-after-applying-operations", "title": "Number of Distinct Binary Strings After Applying Operations", "difficulty": "Medium"}, {"slug": "minimum-operations-to-make-binary-array-elements-equal-to-one-i", "title": "Minimum Operations to Make Binary Array Elements Equal to One I", "difficulty": "Medium"}, {"slug": "smallest-number-with-all-set-bits", "title": "Smallest Number With All Set Bits", "difficulty": "Easy"}]},
    {"number": 996, "slug": "number-of-squareful-arrays", "title": "Number of Squareful Arrays", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Math", "Dynamic Programming", "Backtracking", "Bit Manipulation", "Bitmask"], "similar_problems": [{"slug": "permutations-ii", "title": "Permutations II", "difficulty": "Medium"}]},
    {"number": 1000, "slug": "minimum-cost-to-merge-stones", "title": "Minimum Cost to Merge Stones", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Prefix Sum"], "similar_problems": [{"slug": "burst-balloons", "title": "Burst Balloons", "difficulty": "Hard"}, {"slug": "minimum-cost-to-connect-sticks", "title": "Minimum Cost to Connect Sticks", "difficulty": "Medium"}]},
    {"number": 1001, "slug": "grid-illumination", "title": "Grid Illumination", "difficulty": "Hard", "tags": ["Array", "Hash Table"], "similar_problems": [{"slug": "n-queens", "title": "N-Queens", "difficulty": "Hard"}]},
    {"number": 1012, "slug": "numbers-with-repeated-digits", "title": "Numbers With Repeated Digits", "difficulty": "Hard", "tags": ["Math", "Dynamic Programming"], "similar_problems": [{"slug": "count-the-number-of-powerful-integers", "title": "Count the Number of Powerful Integers", "difficulty": "Hard"}]},
    {"number": 1028, "slug": "recover-a-tree-from-preorder-traversal", "title": "Recover a Tree From Preorder Traversal", "difficulty": "Hard", "tags": ["String", "Tree", "Depth-First Search", "Binary Tree"], "similar_problems": []},
    {"number": 1032, "slug": "stream-of-characters", "title": "Stream of Characters", "difficulty": "Hard", "tags": ["Array", "String", "Design", "Trie", "Data Stream"], "similar_problems": []},
    {"number": 1036, "slug": "escape-a-large-maze", "title": "Escape a Large Maze", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Depth-First Search", "Breadth-First Search"], "similar_problems": []},
    {"number": 1044, "slug": "longest-duplicate-substring", "title": "Longest Duplicate Substring", "difficulty": "Hard", "tags": ["String", "Binary Search", "Sliding Window", "Rolling Hash", "Suffix Array", "Hash Function"], "similar_problems": []},
    {"number": 1063, "slug": "number-of-valid-subarrays", "title": "Number of Valid Subarrays", "difficulty": "Hard", "tags": ["Array", "Stack", "Monotonic Stack"], "similar_problems": [{"slug": "number-of-smooth-descent-periods-of-a-stock", "title": "Number of Smooth Descent Periods of a Stock", "difficulty": "Medium"}]},
    {"number": 1067, "slug": "digit-count-in-range", "title": "Digit Count in Range", "difficulty": "Hard", "tags": ["Math", "Dynamic Programming"], "similar_problems": [{"slug": "number-of-digit-one", "title": "Number of Digit One", "difficulty": "Hard"}, {"slug": "sum-of-numbers-with-units-digit-k", "title": "Sum of Numbers With Units Digit K", "difficulty": "Medium"}]},
    {"number": 1074, "slug": "number-of-submatrices-that-sum-to-target", "title": "Number of Submatrices That Sum to Target", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Matrix", "Prefix Sum"], "similar_problems": [{"slug": "disconnect-path-in-a-binary-matrix-by-at-most-one-flip", "title": "Disconnect Path in a Binary Matrix by at Most One Flip", "difficulty": "Medium"}]},
    {"number": 1088, "slug": "confusing-number-ii", "title": "Confusing Number II", "difficulty": "Hard", "tags": ["Math", "Backtracking"], "similar_problems": [{"slug": "confusing-number", "title": "Confusing Number", "difficulty": "Easy"}]},
    {"number": 1092, "slug": "shortest-common-supersequence", "title": "Shortest Common Supersequence ", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "longest-common-subsequence", "title": "Longest Common Subsequence", "difficulty": "Medium"}, {"slug": "shortest-string-that-contains-three-strings", "title": "Shortest String That Contains Three Strings", "difficulty": "Medium"}]},
    {"number": 1095, "slug": "find-in-mountain-array", "title": "Find in Mountain Array", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Interactive"], "similar_problems": [{"slug": "peak-index-in-a-mountain-array", "title": "Peak Index in a Mountain Array", "difficulty": "Medium"}, {"slug": "minimum-number-of-removals-to-make-mountain-array", "title": "Minimum Number of Removals to Make Mountain Array", "difficulty": "Hard"}, {"slug": "find-good-days-to-rob-the-bank", "title": "Find Good Days to Rob the Bank", "difficulty": "Medium"}, {"slug": "find-indices-of-stable-mountains", "title": "Find Indices of Stable Mountains", "difficulty": "Easy"}]},
    {"number": 1096, "slug": "brace-expansion-ii", "title": "Brace Expansion II", "difficulty": "Hard", "tags": ["String", "Backtracking", "Stack", "Breadth-First Search"], "similar_problems": [{"slug": "brace-expansion", "title": "Brace Expansion", "difficulty": "Medium"}]},
    {"number": 1097, "slug": "game-play-analysis-v", "title": "Game Play Analysis V", "difficulty": "Hard", "tags": ["Database"], "similar_problems": [{"slug": "game-play-analysis-iv", "title": "Game Play Analysis IV", "difficulty": "Medium"}]},
    {"number": 1106, "slug": "parsing-a-boolean-expression", "title": "Parsing A Boolean Expression", "difficulty": "Hard", "tags": ["String", "Stack", "Recursion"], "similar_problems": []},
    {"number": 1121, "slug": "divide-array-into-increasing-sequences", "title": "Divide Array Into Increasing Sequences", "difficulty": "Hard", "tags": ["Array", "Counting"], "similar_problems": []},
    {"number": 1125, "slug": "smallest-sufficient-team", "title": "Smallest Sufficient Team", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Bit Manipulation", "Bitmask"], "similar_problems": [{"slug": "the-number-of-good-subsets", "title": "The Number of Good Subsets", "difficulty": "Hard"}, {"slug": "minimum-number-of-work-sessions-to-finish-the-tasks", "title": "Minimum Number of Work Sessions to Finish the Tasks", "difficulty": "Medium"}, {"slug": "maximum-rows-covered-by-columns", "title": "Maximum Rows Covered by Columns", "difficulty": "Medium"}]},
    {"number": 1127, "slug": "user-purchase-platform", "title": "User Purchase Platform", "difficulty": "Hard", "tags": ["Database"], "similar_problems": []},
    {"number": 1147, "slug": "longest-chunked-palindrome-decomposition", "title": "Longest Chunked Palindrome Decomposition", "difficulty": "Hard", "tags": ["Two Pointers", "String", "Dynamic Programming", "Greedy", "Rolling Hash", "Hash Function"], "similar_problems": [{"slug": "palindrome-rearrangement-queries", "title": "Palindrome Rearrangement Queries", "difficulty": "Hard"}]},
    {"number": 1153, "slug": "string-transforms-into-another-string", "title": "String Transforms Into Another String", "difficulty": "Hard", "tags": ["Hash Table", "String", "Graph"], "similar_problems": []},
    {"number": 1157, "slug": "online-majority-element-in-subarray", "title": "Online Majority Element In Subarray", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Design", "Binary Indexed Tree", "Segment Tree"], "similar_problems": []},
    {"number": 1159, "slug": "market-analysis-ii", "title": "Market Analysis II", "difficulty": "Hard", "tags": ["Database"], "similar_problems": []},
    {"number": 1163, "slug": "last-substring-in-lexicographical-order", "title": "Last Substring in Lexicographical Order", "difficulty": "Hard", "tags": ["Two Pointers", "String"], "similar_problems": [{"slug": "find-the-lexicographically-largest-string-from-the-box-i", "title": "Find the Lexicographically Largest String From the Box I", "difficulty": "Medium"}]},
    {"number": 1168, "slug": "optimize-water-distribution-in-a-village", "title": "Optimize Water Distribution in a Village", "difficulty": "Hard", "tags": ["Union Find", "Graph", "Heap (Priority Queue)", "Minimum Spanning Tree"], "similar_problems": []},
    {"number": 1172, "slug": "dinner-plate-stacks", "title": "Dinner Plate Stacks", "difficulty": "Hard", "tags": ["Hash Table", "Stack", "Design", "Heap (Priority Queue)"], "similar_problems": []},
    {"number": 1178, "slug": "number-of-valid-words-for-each-puzzle", "title": "Number of Valid Words for Each Puzzle", "difficulty": "Hard", "tags": ["Array", "Hash Table", "String", "Bit Manipulation", "Trie"], "similar_problems": []},
    {"number": 1183, "slug": "maximum-number-of-ones", "title": "Maximum Number of Ones", "difficulty": "Hard", "tags": ["Math", "Greedy", "Sorting", "Heap (Priority Queue)"], "similar_problems": []},
    {"number": 1187, "slug": "make-array-strictly-increasing", "title": "Make Array Strictly Increasing", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Dynamic Programming", "Sorting"], "similar_problems": [{"slug": "make-array-non-decreasing-or-non-increasing", "title": "Make Array Non-decreasing or Non-increasing", "difficulty": "Hard"}]},
    {"number": 1192, "slug": "critical-connections-in-a-network", "title": "Critical Connections in a Network", "difficulty": "Hard", "tags": ["Depth-First Search", "Graph", "Biconnected Component"], "similar_problems": []},
    {"number": 1194, "slug": "tournament-winners", "title": "Tournament Winners", "difficulty": "Hard", "tags": ["Database"], "similar_problems": []},
    {"number": 1199, "slug": "minimum-time-to-build-blocks", "title": "Minimum Time to Build Blocks", "difficulty": "Hard", "tags": ["Array", "Math", "Greedy", "Heap (Priority Queue)"], "similar_problems": [{"slug": "find-time-required-to-eliminate-bacterial-strains", "title": "Find Time Required to Eliminate Bacterial Strains", "difficulty": "Hard"}]},
    {"number": 1203, "slug": "sort-items-by-groups-respecting-dependencies", "title": "Sort Items by Groups Respecting Dependencies", "difficulty": "Hard", "tags": ["Depth-First Search", "Breadth-First Search", "Graph", "Topological Sort"], "similar_problems": []},
    {"number": 1206, "slug": "design-skiplist", "title": "Design Skiplist", "difficulty": "Hard", "tags": ["Linked List", "Design"], "similar_problems": [{"slug": "design-hashset", "title": "Design HashSet", "difficulty": "Easy"}, {"slug": "design-hashmap", "title": "Design HashMap", "difficulty": "Easy"}, {"slug": "design-linked-list", "title": "Design Linked List", "difficulty": "Medium"}]},
    {"number": 1210, "slug": "minimum-moves-to-reach-target-with-rotations", "title": "Minimum Moves to Reach Target with Rotations", "difficulty": "Hard", "tags": ["Array", "Breadth-First Search", "Matrix"], "similar_problems": []},
    {"number": 1216, "slug": "valid-palindrome-iii", "title": "Valid Palindrome III", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "valid-palindrome-ii", "title": "Valid Palindrome II", "difficulty": "Easy"}, {"slug": "valid-palindrome-iv", "title": "Valid Palindrome IV", "difficulty": "Medium"}]},
    {"number": 1220, "slug": "count-vowels-permutation", "title": "Count Vowels Permutation", "difficulty": "Hard", "tags": ["Dynamic Programming"], "similar_problems": [{"slug": "number-of-strings-which-can-be-rearranged-to-contain-substring", "title": "Number of Strings Which Can Be Rearranged to Contain Substring", "difficulty": "Medium"}]},
    {"number": 1223, "slug": "dice-roll-simulation", "title": "Dice Roll Simulation", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "find-missing-observations", "title": "Find Missing Observations", "difficulty": "Medium"}, {"slug": "number-of-distinct-roll-sequences", "title": "Number of Distinct Roll Sequences", "difficulty": "Hard"}]},
    {"number": 1224, "slug": "maximum-equal-frequency", "title": "Maximum Equal Frequency", "difficulty": "Hard", "tags": ["Array", "Hash Table"], "similar_problems": [{"slug": "remove-letter-to-equalize-frequency", "title": "Remove Letter To Equalize Frequency", "difficulty": "Easy"}, {"slug": "count-submatrices-with-equal-frequency-of-x-and-y", "title": "Count Submatrices With Equal Frequency of X and Y", "difficulty": "Medium"}]},
    {"number": 1225, "slug": "report-contiguous-dates", "title": "Report Contiguous Dates", "difficulty": "Hard", "tags": ["Database"], "similar_problems": [{"slug": "find-the-start-and-end-number-of-continuous-ranges", "title": "Find the Start and End Number of Continuous Ranges", "difficulty": "Medium"}, {"slug": "find-the-missing-ids", "title": "Find the Missing IDs", "difficulty": "Medium"}, {"slug": "customers-with-strictly-increasing-purchases", "title": "Customers With Strictly Increasing Purchases", "difficulty": "Hard"}]},
    {"number": 1231, "slug": "divide-chocolate", "title": "Divide Chocolate", "difficulty": "Hard", "tags": ["Array", "Binary Search"], "similar_problems": [{"slug": "split-array-largest-sum", "title": "Split Array Largest Sum", "difficulty": "Hard"}, {"slug": "capacity-to-ship-packages-within-d-days", "title": "Capacity To Ship Packages Within D Days", "difficulty": "Medium"}]},
    {"number": 1235, "slug": "maximum-profit-in-job-scheduling", "title": "Maximum Profit in Job Scheduling", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Dynamic Programming", "Sorting"], "similar_problems": [{"slug": "maximum-earnings-from-taxi", "title": "Maximum Earnings From Taxi", "difficulty": "Medium"}, {"slug": "two-best-non-overlapping-events", "title": "Two Best Non-Overlapping Events", "difficulty": "Medium"}]},
    {"number": 1240, "slug": "tiling-a-rectangle-with-the-fewest-squares", "title": "Tiling a Rectangle with the Fewest Squares", "difficulty": "Hard", "tags": ["Backtracking"], "similar_problems": [{"slug": "selling-pieces-of-wood", "title": "Selling Pieces of Wood", "difficulty": "Hard"}]},
    {"number": 1246, "slug": "palindrome-removal", "title": "Palindrome Removal", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": []},
    {"number": 1250, "slug": "check-if-it-is-a-good-array", "title": "Check If It Is a Good Array", "difficulty": "Hard", "tags": ["Array", "Math", "Number Theory"], "similar_problems": []},
    {"number": 1255, "slug": "maximum-score-words-formed-by-letters", "title": "Maximum Score Words Formed by Letters", "difficulty": "Hard", "tags": ["Array", "String", "Dynamic Programming", "Backtracking", "Bit Manipulation", "Bitmask"], "similar_problems": [{"slug": "maximum-good-people-based-on-statements", "title": "Maximum Good People Based on Statements", "difficulty": "Hard"}]},
    {"number": 1259, "slug": "handshakes-that-dont-cross", "title": "Handshakes That Don't Cross", "difficulty": "Hard", "tags": ["Math", "Dynamic Programming"], "similar_problems": []},
    {"number": 1263, "slug": "minimum-moves-to-move-a-box-to-their-target-location", "title": "Minimum Moves to Move a Box to Their Target Location", "difficulty": "Hard", "tags": ["Array", "Breadth-First Search", "Heap (Priority Queue)", "Matrix"], "similar_problems": []},
    {"number": 1269, "slug": "number-of-ways-to-stay-in-the-same-place-after-some-steps", "title": "Number of Ways to Stay in the Same Place After Some Steps", "difficulty": "Hard", "tags": ["Dynamic Programming"], "similar_problems": [{"slug": "number-of-ways-to-reach-a-position-after-exactly-k-steps", "title": "Number of Ways to Reach a Position After Exactly k Steps", "difficulty": "Medium"}]},
    {"number": 1274, "slug": "number-of-ships-in-a-rectangle", "title": "Number of Ships in a Rectangle", "difficulty": "Hard", "tags": ["Array", "Divide and Conquer", "Interactive"], "similar_problems": []},
    {"number": 1278, "slug": "palindrome-partitioning-iii", "title": "Palindrome Partitioning III", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "palindrome-partitioning-iv", "title": "Palindrome Partitioning IV", "difficulty": "Hard"}, {"slug": "maximum-number-of-non-overlapping-palindrome-substrings", "title": "Maximum Number of Non-overlapping Palindrome Substrings", "difficulty": "Hard"}, {"slug": "minimum-changes-to-make-k-semi-palindromes", "title": "Minimum Changes to Make K Semi-palindromes", "difficulty": "Hard"}]},
    {"number": 1284, "slug": "minimum-number-of-flips-to-convert-binary-matrix-to-zero-matrix", "title": "Minimum Number of Flips to Convert Binary Matrix to Zero Matrix", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Bit Manipulation", "Breadth-First Search", "Matrix"], "similar_problems": [{"slug": "minimum-operations-to-remove-adjacent-ones-in-matrix", "title": "Minimum Operations to Remove Adjacent Ones in Matrix", "difficulty": "Hard"}, {"slug": "remove-all-ones-with-row-and-column-flips", "title": "Remove All Ones With Row and Column Flips", "difficulty": "Medium"}, {"slug": "remove-all-ones-with-row-and-column-flips-ii", "title": "Remove All Ones With Row and Column Flips II", "difficulty": "Medium"}]},
    {"number": 1289, "slug": "minimum-falling-path-sum-ii", "title": "Minimum Falling Path Sum II", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Matrix"], "similar_problems": [{"slug": "minimum-falling-path-sum", "title": "Minimum Falling Path Sum", "difficulty": "Medium"}]},
    {"number": 1293, "slug": "shortest-path-in-a-grid-with-obstacles-elimination", "title": "Shortest Path in a Grid with Obstacles Elimination", "difficulty": "Hard", "tags": ["Array", "Breadth-First Search", "Matrix"], "similar_problems": [{"slug": "shortest-path-to-get-food", "title": "Shortest Path to Get Food", "difficulty": "Medium"}, {"slug": "minimum-obstacle-removal-to-reach-corner", "title": "Minimum Obstacle Removal to Reach Corner", "difficulty": "Hard"}, {"slug": "find-a-safe-walk-through-a-grid", "title": "Find a Safe Walk Through a Grid", "difficulty": "Medium"}]},
    {"number": 1298, "slug": "maximum-candies-you-can-get-from-boxes", "title": "Maximum Candies You Can Get from Boxes", "difficulty": "Hard", "tags": ["Array", "Breadth-First Search", "Graph"], "similar_problems": []},
    {"number": 1301, "slug": "number-of-paths-with-max-score", "title": "Number of Paths with Max Score", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Matrix"], "similar_problems": []},
    {"number": 1307, "slug": "verbal-arithmetic-puzzle", "title": "Verbal Arithmetic Puzzle", "difficulty": "Hard", "tags": ["Array", "Math", "String", "Backtracking"], "similar_problems": []},
    {"number": 1312, "slug": "minimum-insertion-steps-to-make-a-string-palindrome", "title": "Minimum Insertion Steps to Make a String Palindrome", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "minimum-number-of-moves-to-make-palindrome", "title": "Minimum Number of Moves to Make Palindrome", "difficulty": "Hard"}]},
    {"number": 1316, "slug": "distinct-echo-substrings", "title": "Distinct Echo Substrings", "difficulty": "Hard", "tags": ["String", "Trie", "Rolling Hash", "Hash Function"], "similar_problems": [{"slug": "find-substring-with-given-hash-value", "title": "Find Substring With Given Hash Value", "difficulty": "Hard"}]},
    {"number": 1320, "slug": "minimum-distance-to-type-a-word-using-two-fingers", "title": "Minimum Distance to Type a Word Using Two Fingers", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "minimum-time-to-type-word-using-special-typewriter", "title": "Minimum Time to Type Word Using Special Typewriter", "difficulty": "Easy"}]},
    {"number": 1326, "slug": "minimum-number-of-taps-to-open-to-water-a-garden", "title": "Minimum Number of Taps to Open to Water a Garden", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Greedy"], "similar_problems": []},
    {"number": 1330, "slug": "reverse-subarray-to-maximize-array-value", "title": "Reverse Subarray To Maximize Array Value", "difficulty": "Hard", "tags": ["Array", "Math", "Greedy"], "similar_problems": []},
    {"number": 1335, "slug": "minimum-difficulty-of-a-job-schedule", "title": "Minimum Difficulty of a Job Schedule", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": []},
    {"number": 1336, "slug": "number-of-transactions-per-visit", "title": "Number of Transactions per Visit", "difficulty": "Hard", "tags": ["Database"], "similar_problems": [{"slug": "find-the-missing-ids", "title": "Find the Missing IDs", "difficulty": "Medium"}]},
    {"number": 1340, "slug": "jump-game-v", "title": "Jump Game V", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Sorting"], "similar_problems": [{"slug": "jump-game-vii", "title": "Jump Game VII", "difficulty": "Medium"}, {"slug": "jump-game-viii", "title": "Jump Game VIII", "difficulty": "Medium"}]},
    {"number": 1345, "slug": "jump-game-iv", "title": "Jump Game IV", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Breadth-First Search"], "similar_problems": [{"slug": "jump-game-vii", "title": "Jump Game VII", "difficulty": "Medium"}, {"slug": "jump-game-viii", "title": "Jump Game VIII", "difficulty": "Medium"}, {"slug": "maximum-number-of-jumps-to-reach-the-last-index", "title": "Maximum Number of Jumps to Reach the Last Index", "difficulty": "Medium"}]},
    {"number": 1349, "slug": "maximum-students-taking-exam", "title": "Maximum Students Taking Exam", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Bit Manipulation", "Matrix", "Bitmask"], "similar_problems": []},
    {"number": 1354, "slug": "construct-target-array-with-multiple-sums", "title": "Construct Target Array With Multiple Sums", "difficulty": "Hard", "tags": ["Array", "Heap (Priority Queue)"], "similar_problems": [{"slug": "minimum-amount-of-time-to-fill-cups", "title": "Minimum Amount of Time to Fill Cups", "difficulty": "Easy"}]},
    {"number": 1359, "slug": "count-all-valid-pickup-and-delivery-options", "title": "Count All Valid Pickup and Delivery Options", "difficulty": "Hard", "tags": ["Math", "Dynamic Programming", "Combinatorics"], "similar_problems": []},
    {"number": 1363, "slug": "largest-multiple-of-three", "title": "Largest Multiple of Three", "difficulty": "Hard", "tags": ["Array", "Math", "Dynamic Programming", "Greedy", "Sorting"], "similar_problems": []},
    {"number": 1368, "slug": "minimum-cost-to-make-at-least-one-valid-path-in-a-grid", "title": "Minimum Cost to Make at Least One Valid Path in a Grid", "difficulty": "Hard", "tags": ["Array", "Breadth-First Search", "Graph", "Heap (Priority Queue)", "Matrix", "Shortest Path"], "similar_problems": [{"slug": "minimum-weighted-subgraph-with-the-required-paths", "title": "Minimum Weighted Subgraph With the Required Paths", "difficulty": "Hard"}, {"slug": "disconnect-path-in-a-binary-matrix-by-at-most-one-flip", "title": "Disconnect Path in a Binary Matrix by at Most One Flip", "difficulty": "Medium"}]},
    {"number": 1369, "slug": "get-the-second-most-recent-activity", "title": "Get the Second Most Recent Activity", "difficulty": "Hard", "tags": ["Database"], "similar_problems": []},
    {"number": 1373, "slug": "maximum-sum-bst-in-binary-tree", "title": "Maximum Sum BST in Binary Tree", "difficulty": "Hard", "tags": ["Dynamic Programming", "Tree", "Depth-First Search", "Binary Search Tree", "Binary Tree"], "similar_problems": []},
    {"number": 1377, "slug": "frog-position-after-t-seconds", "title": "Frog Position After T Seconds", "difficulty": "Hard", "tags": ["Tree", "Depth-First Search", "Breadth-First Search", "Graph"], "similar_problems": [{"slug": "longest-special-path", "title": "Longest Special Path", "difficulty": "Hard"}]},
    {"number": 1383, "slug": "maximum-performance-of-a-team", "title": "Maximum Performance of a Team", "difficulty": "Hard", "tags": ["Array", "Greedy", "Sorting", "Heap (Priority Queue)"], "similar_problems": [{"slug": "maximum-fruits-harvested-after-at-most-k-steps", "title": "Maximum Fruits Harvested After at Most K Steps", "difficulty": "Hard"}]},
    {"number": 1384, "slug": "total-sales-amount-by-year", "title": "Total Sales Amount by Year", "difficulty": "Hard", "tags": ["Database"], "similar_problems": []},
    {"number": 1388, "slug": "pizza-with-3n-slices", "title": "Pizza With 3n Slices", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Greedy", "Heap (Priority Queue)"], "similar_problems": []},
    {"number": 1392, "slug": "longest-happy-prefix", "title": "Longest Happy Prefix", "difficulty": "Hard", "tags": ["String", "Rolling Hash", "String Matching", "Hash Function"], "similar_problems": [{"slug": "sum-of-scores-of-built-strings", "title": "Sum of Scores of Built Strings", "difficulty": "Hard"}, {"slug": "maximum-deletions-on-a-string", "title": "Maximum Deletions on a String", "difficulty": "Hard"}, {"slug": "minimum-time-to-revert-word-to-initial-state-ii", "title": "Minimum Time to Revert Word to Initial State II", "difficulty": "Hard"}, {"slug": "minimum-time-to-revert-word-to-initial-state-i", "title": "Minimum Time to Revert Word to Initial State I", "difficulty": "Medium"}]},
    {"number": 1397, "slug": "find-all-good-strings", "title": "Find All Good Strings", "difficulty": "Hard", "tags": ["String", "Dynamic Programming", "String Matching"], "similar_problems": []},
    {"number": 1402, "slug": "reducing-dishes", "title": "Reducing Dishes", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Greedy", "Sorting"], "similar_problems": []},
    {"number": 1406, "slug": "stone-game-iii", "title": "Stone Game III", "difficulty": "Hard", "tags": ["Array", "Math", "Dynamic Programming", "Game Theory"], "similar_problems": [{"slug": "stone-game-v", "title": "Stone Game V", "difficulty": "Hard"}, {"slug": "stone-game-vi", "title": "Stone Game VI", "difficulty": "Medium"}, {"slug": "stone-game-vii", "title": "Stone Game VII", "difficulty": "Medium"}, {"slug": "stone-game-viii", "title": "Stone Game VIII", "difficulty": "Hard"}, {"slug": "stone-game-ix", "title": "Stone Game IX", "difficulty": "Medium"}]},
    {"number": 1411, "slug": "number-of-ways-to-paint-n-3-grid", "title": "Number of Ways to Paint N × 3 Grid", "difficulty": "Hard", "tags": ["Dynamic Programming"], "similar_problems": [{"slug": "painting-a-grid-with-three-different-colors", "title": "Painting a Grid With Three Different Colors", "difficulty": "Hard"}]},
    {"number": 1412, "slug": "find-the-quiet-students-in-all-exams", "title": "Find the Quiet Students in All Exams", "difficulty": "Hard", "tags": ["Database"], "similar_problems": []},
    {"number": 1416, "slug": "restore-the-array", "title": "Restore The Array", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "number-of-ways-to-separate-numbers", "title": "Number of Ways to Separate Numbers", "difficulty": "Hard"}, {"slug": "number-of-beautiful-partitions", "title": "Number of Beautiful Partitions", "difficulty": "Hard"}]},
    {"number": 1420, "slug": "build-array-where-you-can-find-the-maximum-exactly-k-comparisons", "title": "Build Array Where You Can Find The Maximum Exactly K Comparisons", "difficulty": "Hard", "tags": ["Dynamic Programming", "Prefix Sum"], "similar_problems": []},
    {"number": 1425, "slug": "constrained-subsequence-sum", "title": "Constrained Subsequence Sum", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Queue", "Sliding Window", "Heap (Priority Queue)", "Monotonic Queue"], "similar_problems": [{"slug": "maximum-element-sum-of-a-complete-subset-of-indices", "title": "Maximum Element-Sum of a Complete Subset of Indices", "difficulty": "Hard"}]},
    {"number": 1434, "slug": "number-of-ways-to-wear-different-hats-to-each-other", "title": "Number of Ways to Wear Different Hats to Each Other", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Bit Manipulation", "Bitmask"], "similar_problems": [{"slug": "the-number-of-good-subsets", "title": "The Number of Good Subsets", "difficulty": "Hard"}]},
    {"number": 1439, "slug": "find-the-kth-smallest-sum-of-a-matrix-with-sorted-rows", "title": "Find the Kth Smallest Sum of a Matrix With Sorted Rows", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Heap (Priority Queue)", "Matrix"], "similar_problems": []},
    {"number": 1444, "slug": "number-of-ways-of-cutting-a-pizza", "title": "Number of Ways of Cutting a Pizza", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Memoization", "Matrix", "Prefix Sum"], "similar_problems": [{"slug": "selling-pieces-of-wood", "title": "Selling Pieces of Wood", "difficulty": "Hard"}]},
    {"number": 1449, "slug": "form-largest-integer-with-digits-that-add-up-to-target", "title": "Form Largest Integer With Digits That Add up to Target", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": []},
    {"number": 1453, "slug": "maximum-number-of-darts-inside-of-a-circular-dartboard", "title": "Maximum Number of Darts Inside of a Circular Dartboard", "difficulty": "Hard", "tags": ["Array", "Math", "Geometry"], "similar_problems": []},
    {"number": 1458, "slug": "max-dot-product-of-two-subsequences", "title": "Max Dot Product of Two Subsequences", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": []},
    {"number": 1463, "slug": "cherry-pickup-ii", "title": "Cherry Pickup II", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Matrix"], "similar_problems": []},
    {"number": 1467, "slug": "probability-of-a-two-boxes-having-the-same-number-of-distinct-balls", "title": "Probability of a Two Boxes Having The Same Number of Distinct Balls", "difficulty": "Hard", "tags": ["Array", "Math", "Dynamic Programming", "Backtracking", "Combinatorics", "Probability and Statistics"], "similar_problems": []},
    {"number": 1473, "slug": "paint-house-iii", "title": "Paint House III", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "number-of-distinct-roll-sequences", "title": "Number of Distinct Roll Sequences", "difficulty": "Hard"}, {"slug": "paint-house-iv", "title": "Paint House IV", "difficulty": "Medium"}]},
    {"number": 1478, "slug": "allocate-mailboxes", "title": "Allocate Mailboxes", "difficulty": "Hard", "tags": ["Array", "Math", "Dynamic Programming", "Sorting"], "similar_problems": []},
    {"number": 1479, "slug": "sales-by-day-of-the-week", "title": "Sales by Day of the Week", "difficulty": "Hard", "tags": ["Database"], "similar_problems": []},
    {"number": 1483, "slug": "kth-ancestor-of-a-tree-node", "title": "Kth Ancestor of a Tree Node", "difficulty": "Hard", "tags": ["Binary Search", "Dynamic Programming", "Tree", "Depth-First Search", "Breadth-First Search", "Design"], "similar_problems": [{"slug": "minimum-edge-weight-equilibrium-queries-in-a-tree", "title": "Minimum Edge Weight Equilibrium Queries in a Tree", "difficulty": "Hard"}]},
    {"number": 1489, "slug": "find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree", "title": "Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree", "difficulty": "Hard", "tags": ["Union Find", "Graph", "Sorting", "Minimum Spanning Tree", "Strongly Connected Component"], "similar_problems": []},
    {"number": 1494, "slug": "parallel-courses-ii", "title": "Parallel Courses II", "difficulty": "Hard", "tags": ["Dynamic Programming", "Bit Manipulation", "Graph", "Bitmask"], "similar_problems": [{"slug": "parallel-courses", "title": "Parallel Courses", "difficulty": "Medium"}]},
    {"number": 1499, "slug": "max-value-of-equation", "title": "Max Value of Equation", "difficulty": "Hard", "tags": ["Array", "Queue", "Sliding Window", "Heap (Priority Queue)", "Monotonic Queue"], "similar_problems": [{"slug": "count-pairs-in-two-arrays", "title": "Count Pairs in Two Arrays", "difficulty": "Medium"}]},
    {"number": 1505, "slug": "minimum-possible-integer-after-at-most-k-adjacent-swaps-on-digits", "title": "Minimum Possible Integer After at Most K Adjacent Swaps On Digits", "difficulty": "Hard", "tags": ["String", "Greedy", "Binary Indexed Tree", "Segment Tree"], "similar_problems": []},
    {"number": 1510, "slug": "stone-game-iv", "title": "Stone Game IV", "difficulty": "Hard", "tags": ["Math", "Dynamic Programming", "Game Theory"], "similar_problems": [{"slug": "stone-game-v", "title": "Stone Game V", "difficulty": "Hard"}, {"slug": "stone-game-vi", "title": "Stone Game VI", "difficulty": "Medium"}, {"slug": "stone-game-vii", "title": "Stone Game VII", "difficulty": "Medium"}, {"slug": "stone-game-viii", "title": "Stone Game VIII", "difficulty": "Hard"}, {"slug": "stone-game-ix", "title": "Stone Game IX", "difficulty": "Medium"}, {"slug": "stone-removal-game", "title": "Stone Removal Game", "difficulty": "Easy"}]},
    {"number": 1515, "slug": "best-position-for-a-service-centre", "title": "Best Position for a Service Centre", "difficulty": "Hard", "tags": ["Array", "Math", "Geometry", "Randomized"], "similar_problems": []},
    {"number": 1516, "slug": "move-sub-tree-of-n-ary-tree", "title": "Move Sub-Tree of N-Ary Tree", "difficulty": "Hard", "tags": ["Tree", "Depth-First Search"], "similar_problems": [{"slug": "find-root-of-n-ary-tree", "title": "Find Root of N-Ary Tree", "difficulty": "Medium"}]},
    {"number": 1520, "slug": "maximum-number-of-non-overlapping-substrings", "title": "Maximum Number of Non-Overlapping Substrings", "difficulty": "Hard", "tags": ["String", "Greedy"], "similar_problems": [{"slug": "maximum-number-of-non-overlapping-palindrome-substrings", "title": "Maximum Number of Non-overlapping Palindrome Substrings", "difficulty": "Hard"}]},
    {"number": 1521, "slug": "find-a-value-of-a-mysterious-function-closest-to-target", "title": "Find a Value of a Mysterious Function Closest to Target", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Bit Manipulation", "Segment Tree"], "similar_problems": []},
    {"number": 1526, "slug": "minimum-number-of-increments-on-subarrays-to-form-a-target-array", "title": "Minimum Number of Increments on Subarrays to Form a Target Array", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Stack", "Greedy", "Monotonic Stack"], "similar_problems": []},
    {"number": 1531, "slug": "string-compression-ii", "title": "String Compression II", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "string-compression-iii", "title": "String Compression III", "difficulty": "Medium"}]},
    {"number": 1537, "slug": "get-the-maximum-score", "title": "Get the Maximum Score", "difficulty": "Hard", "tags": ["Array", "Two Pointers", "Dynamic Programming", "Greedy"], "similar_problems": [{"slug": "maximum-score-of-a-node-sequence", "title": "Maximum Score of a Node Sequence", "difficulty": "Hard"}]},
    {"number": 1542, "slug": "find-longest-awesome-substring", "title": "Find Longest Awesome Substring", "difficulty": "Hard", "tags": ["Hash Table", "String", "Bit Manipulation"], "similar_problems": []},
    {"number": 1547, "slug": "minimum-cost-to-cut-a-stick", "title": "Minimum Cost to Cut a Stick", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Sorting"], "similar_problems": [{"slug": "number-of-ways-to-divide-a-long-corridor", "title": "Number of Ways to Divide a Long Corridor", "difficulty": "Hard"}, {"slug": "divide-an-array-into-subarrays-with-minimum-cost-ii", "title": "Divide an Array Into Subarrays With Minimum Cost II", "difficulty": "Hard"}]},
    {"number": 1548, "slug": "the-most-similar-path-in-a-graph", "title": "The Most Similar Path in a Graph", "difficulty": "Hard", "tags": ["Dynamic Programming", "Graph"], "similar_problems": []},
    {"number": 1553, "slug": "minimum-number-of-days-to-eat-n-oranges", "title": "Minimum Number of Days to Eat N Oranges", "difficulty": "Hard", "tags": ["Dynamic Programming", "Memoization"], "similar_problems": []},
    {"number": 1563, "slug": "stone-game-v", "title": "Stone Game V", "difficulty": "Hard", "tags": ["Array", "Math", "Dynamic Programming", "Game Theory"], "similar_problems": [{"slug": "stone-game", "title": "Stone Game", "difficulty": "Medium"}, {"slug": "stone-game-ii", "title": "Stone Game II", "difficulty": "Medium"}, {"slug": "stone-game-iii", "title": "Stone Game III", "difficulty": "Hard"}, {"slug": "stone-game-iv", "title": "Stone Game IV", "difficulty": "Hard"}, {"slug": "stone-game-vi", "title": "Stone Game VI", "difficulty": "Medium"}, {"slug": "stone-game-vii", "title": "Stone Game VII", "difficulty": "Medium"}, {"slug": "stone-game-viii", "title": "Stone Game VIII", "difficulty": "Hard"}, {"slug": "stone-game-ix", "title": "Stone Game IX", "difficulty": "Medium"}]},
    {"number": 1568, "slug": "minimum-number-of-days-to-disconnect-island", "title": "Minimum Number of Days to Disconnect Island", "difficulty": "Hard", "tags": ["Array", "Depth-First Search", "Breadth-First Search", "Matrix", "Strongly Connected Component"], "similar_problems": [{"slug": "disconnect-path-in-a-binary-matrix-by-at-most-one-flip", "title": "Disconnect Path in a Binary Matrix by at Most One Flip", "difficulty": "Medium"}, {"slug": "minimum-runes-to-add-to-cast-spell", "title": "Minimum Runes to Add to Cast Spell", "difficulty": "Hard"}]},
    {"number": 1569, "slug": "number-of-ways-to-reorder-array-to-get-same-bst", "title": "Number of Ways to Reorder Array to Get Same BST", "difficulty": "Hard", "tags": ["Array", "Math", "Divide and Conquer", "Dynamic Programming", "Tree", "Union Find", "Binary Search Tree", "Memoization", "Combinatorics", "Binary Tree"], "similar_problems": []},
    {"number": 1575, "slug": "count-all-possible-routes", "title": "Count All Possible Routes", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Memoization"], "similar_problems": []},
    {"number": 1579, "slug": "remove-max-number-of-edges-to-keep-graph-fully-traversable", "title": "Remove Max Number of Edges to Keep Graph Fully Traversable", "difficulty": "Hard", "tags": ["Union Find", "Graph"], "similar_problems": []},
    {"number": 1585, "slug": "check-if-string-is-transformable-with-substring-sort-operations", "title": "Check If String Is Transformable With Substring Sort Operations", "difficulty": "Hard", "tags": ["String", "Greedy", "Sorting"], "similar_problems": []},
    {"number": 1591, "slug": "strange-printer-ii", "title": "Strange Printer II", "difficulty": "Hard", "tags": ["Array", "Graph", "Topological Sort", "Matrix"], "similar_problems": [{"slug": "strange-printer", "title": "Strange Printer", "difficulty": "Hard"}, {"slug": "longest-cycle-in-a-graph", "title": "Longest Cycle in a Graph", "difficulty": "Hard"}, {"slug": "sort-array-by-moving-items-to-empty-space", "title": "Sort Array by Moving Items to Empty Space", "difficulty": "Hard"}]},
    {"number": 1595, "slug": "minimum-cost-to-connect-two-groups-of-points", "title": "Minimum Cost to Connect Two Groups of Points", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Bit Manipulation", "Matrix", "Bitmask"], "similar_problems": []},
    {"number": 1597, "slug": "build-binary-expression-tree-from-infix-expression", "title": "Build Binary Expression Tree From Infix Expression", "difficulty": "Hard", "tags": ["String", "Stack", "Tree", "Binary Tree"], "similar_problems": [{"slug": "basic-calculator-iii", "title": "Basic Calculator III", "difficulty": "Hard"}, {"slug": "check-if-two-expression-trees-are-equivalent", "title": "Check If Two Expression Trees are Equivalent", "difficulty": "Medium"}]},
    {"number": 1601, "slug": "maximum-number-of-achievable-transfer-requests", "title": "Maximum Number of Achievable Transfer Requests", "difficulty": "Hard", "tags": ["Array", "Backtracking", "Bit Manipulation", "Enumeration"], "similar_problems": []},
    {"number": 1606, "slug": "find-servers-that-handled-most-number-of-requests", "title": "Find Servers That Handled Most Number of Requests", "difficulty": "Hard", "tags": ["Array", "Greedy", "Heap (Priority Queue)", "Ordered Set"], "similar_problems": [{"slug": "meeting-rooms-iii", "title": "Meeting Rooms III", "difficulty": "Hard"}]},
    {"number": 1610, "slug": "maximum-number-of-visible-points", "title": "Maximum Number of Visible Points", "difficulty": "Hard", "tags": ["Array", "Math", "Geometry", "Sliding Window", "Sorting"], "similar_problems": []},
    {"number": 1611, "slug": "minimum-one-bit-operations-to-make-integers-zero", "title": "Minimum One Bit Operations to Make Integers Zero", "difficulty": "Hard", "tags": ["Dynamic Programming", "Bit Manipulation", "Memoization"], "similar_problems": [{"slug": "minimum-number-of-operations-to-make-array-continuous", "title": "Minimum Number of Operations to Make Array Continuous", "difficulty": "Hard"}, {"slug": "apply-bitwise-operations-to-make-strings-equal", "title": "Apply Bitwise Operations to Make Strings Equal", "difficulty": "Medium"}]},
    {"number": 1617, "slug": "count-subtrees-with-max-distance-between-cities", "title": "Count Subtrees With Max Distance Between Cities", "difficulty": "Hard", "tags": ["Dynamic Programming", "Bit Manipulation", "Tree", "Enumeration", "Bitmask"], "similar_problems": [{"slug": "tree-diameter", "title": "Tree Diameter", "difficulty": "Medium"}]},
    {"number": 1622, "slug": "fancy-sequence", "title": "Fancy Sequence", "difficulty": "Hard", "tags": ["Math", "Design", "Segment Tree"], "similar_problems": []},
    {"number": 1627, "slug": "graph-connectivity-with-threshold", "title": "Graph Connectivity With Threshold", "difficulty": "Hard", "tags": ["Array", "Math", "Union Find", "Number Theory"], "similar_problems": [{"slug": "greatest-common-divisor-traversal", "title": "Greatest Common Divisor Traversal", "difficulty": "Hard"}]},
    {"number": 1632, "slug": "rank-transform-of-a-matrix", "title": "Rank Transform of a Matrix", "difficulty": "Hard", "tags": ["Array", "Union Find", "Graph", "Topological Sort", "Sorting", "Matrix"], "similar_problems": [{"slug": "rank-transform-of-an-array", "title": "Rank Transform of an Array", "difficulty": "Easy"}, {"slug": "gcd-sort-of-an-array", "title": "GCD Sort of an Array", "difficulty": "Hard"}]},
    {"number": 1635, "slug": "hopper-company-queries-i", "title": "Hopper Company Queries I", "difficulty": "Hard", "tags": ["Database"], "similar_problems": [{"slug": "trips-and-users", "title": "Trips and Users", "difficulty": "Hard"}, {"slug": "hopper-company-queries-ii", "title": "Hopper Company Queries II", "difficulty": "Hard"}, {"slug": "hopper-company-queries-iii", "title": "Hopper Company Queries III", "difficulty": "Hard"}, {"slug": "number-of-times-a-driver-was-a-passenger", "title": "Number of Times a Driver Was a Passenger", "difficulty": "Medium"}]},
    {"number": 1639, "slug": "number-of-ways-to-form-a-target-string-given-a-dictionary", "title": "Number of Ways to Form a Target String Given a Dictionary", "difficulty": "Hard", "tags": ["Array", "String", "Dynamic Programming"], "similar_problems": []},
    {"number": 1643, "slug": "kth-smallest-instructions", "title": "Kth Smallest Instructions", "difficulty": "Hard", "tags": ["Array", "Math", "Dynamic Programming", "Combinatorics"], "similar_problems": []},
    {"number": 1645, "slug": "hopper-company-queries-ii", "title": "Hopper Company Queries II", "difficulty": "Hard", "tags": ["Database"], "similar_problems": [{"slug": "trips-and-users", "title": "Trips and Users", "difficulty": "Hard"}, {"slug": "hopper-company-queries-i", "title": "Hopper Company Queries I", "difficulty": "Hard"}, {"slug": "hopper-company-queries-iii", "title": "Hopper Company Queries III", "difficulty": "Hard"}, {"slug": "number-of-times-a-driver-was-a-passenger", "title": "Number of Times a Driver Was a Passenger", "difficulty": "Medium"}]},
    {"number": 1649, "slug": "create-sorted-array-through-instructions", "title": "Create Sorted Array through Instructions", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Divide and Conquer", "Binary Indexed Tree", "Segment Tree", "Merge Sort", "Ordered Set"], "similar_problems": [{"slug": "count-good-triplets-in-an-array", "title": "Count Good Triplets in an Array", "difficulty": "Hard"}, {"slug": "longest-substring-of-one-repeating-character", "title": "Longest Substring of One Repeating Character", "difficulty": "Hard"}, {"slug": "sort-array-by-moving-items-to-empty-space", "title": "Sort Array by Moving Items to Empty Space", "difficulty": "Hard"}]},
    {"number": 1651, "slug": "hopper-company-queries-iii", "title": "Hopper Company Queries III", "difficulty": "Hard", "tags": ["Database"], "similar_problems": [{"slug": "trips-and-users", "title": "Trips and Users", "difficulty": "Hard"}, {"slug": "hopper-company-queries-i", "title": "Hopper Company Queries I", "difficulty": "Hard"}, {"slug": "hopper-company-queries-ii", "title": "Hopper Company Queries II", "difficulty": "Hard"}, {"slug": "number-of-times-a-driver-was-a-passenger", "title": "Number of Times a Driver Was a Passenger", "difficulty": "Medium"}]},
    {"number": 1655, "slug": "distribute-repeating-integers", "title": "Distribute Repeating Integers", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Backtracking", "Bit Manipulation", "Bitmask"], "similar_problems": []},
    {"number": 1659, "slug": "maximize-grid-happiness", "title": "Maximize Grid Happiness", "difficulty": "Hard", "tags": ["Dynamic Programming", "Bit Manipulation", "Memoization", "Bitmask"], "similar_problems": []},
    {"number": 1665, "slug": "minimum-initial-energy-to-finish-tasks", "title": "Minimum Initial Energy to Finish Tasks", "difficulty": "Hard", "tags": ["Array", "Greedy", "Sorting"], "similar_problems": []},
    {"number": 1671, "slug": "minimum-number-of-removals-to-make-mountain-array", "title": "Minimum Number of Removals to Make Mountain Array", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Dynamic Programming", "Greedy"], "similar_problems": [{"slug": "longest-increasing-subsequence", "title": "Longest Increasing Subsequence", "difficulty": "Medium"}, {"slug": "longest-mountain-in-array", "title": "Longest Mountain in Array", "difficulty": "Medium"}, {"slug": "peak-index-in-a-mountain-array", "title": "Peak Index in a Mountain Array", "difficulty": "Medium"}, {"slug": "valid-mountain-array", "title": "Valid Mountain Array", "difficulty": "Easy"}, {"slug": "find-in-mountain-array", "title": "Find in Mountain Array", "difficulty": "Hard"}, {"slug": "beautiful-towers-ii", "title": "Beautiful Towers II", "difficulty": "Medium"}, {"slug": "beautiful-towers-i", "title": "Beautiful Towers I", "difficulty": "Medium"}]},
    {"number": 1675, "slug": "minimize-deviation-in-array", "title": "Minimize Deviation in Array", "difficulty": "Hard", "tags": ["Array", "Greedy", "Heap (Priority Queue)", "Ordered Set"], "similar_problems": []},
    {"number": 1681, "slug": "minimum-incompatibility", "title": "Minimum Incompatibility", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Bit Manipulation", "Bitmask"], "similar_problems": []},
    {"number": 1687, "slug": "delivering-boxes-from-storage-to-ports", "title": "Delivering Boxes from Storage to Ports", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Segment Tree", "Queue", "Heap (Priority Queue)", "Prefix Sum", "Monotonic Queue"], "similar_problems": []},
    {"number": 1691, "slug": "maximum-height-by-stacking-cuboids", "title": "Maximum Height by Stacking Cuboids ", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Sorting"], "similar_problems": [{"slug": "the-number-of-weak-characters-in-the-game", "title": "The Number of Weak Characters in the Game", "difficulty": "Medium"}, {"slug": "maximum-number-of-groups-entering-a-competition", "title": "Maximum Number of Groups Entering a Competition", "difficulty": "Medium"}]},
    {"number": 1692, "slug": "count-ways-to-distribute-candies", "title": "Count Ways to Distribute Candies", "difficulty": "Hard", "tags": ["Dynamic Programming"], "similar_problems": [{"slug": "distribute-candies-among-children-i", "title": "Distribute Candies Among Children I", "difficulty": "Easy"}, {"slug": "distribute-candies-among-children-ii", "title": "Distribute Candies Among Children II", "difficulty": "Medium"}]},
    {"number": 1697, "slug": "checking-existence-of-edge-length-limited-paths", "title": "Checking Existence of Edge Length Limited Paths", "difficulty": "Hard", "tags": ["Array", "Two Pointers", "Union Find", "Graph", "Sorting"], "similar_problems": [{"slug": "checking-existence-of-edge-length-limited-paths-ii", "title": "Checking Existence of Edge Length Limited Paths II", "difficulty": "Hard"}, {"slug": "number-of-good-paths", "title": "Number of Good Paths", "difficulty": "Hard"}, {"slug": "minimum-score-of-a-path-between-two-cities", "title": "Minimum Score of a Path Between Two Cities", "difficulty": "Medium"}]},
    {"number": 1703, "slug": "minimum-adjacent-swaps-for-k-consecutive-ones", "title": "Minimum Adjacent Swaps for K Consecutive Ones", "difficulty": "Hard", "tags": ["Array", "Greedy", "Sliding Window", "Prefix Sum"], "similar_problems": [{"slug": "minimum-swaps-to-group-all-1s-together", "title": "Minimum Swaps to Group All 1's Together", "difficulty": "Medium"}, {"slug": "minimum-number-of-operations-to-make-array-continuous", "title": "Minimum Number of Operations to Make Array Continuous", "difficulty": "Hard"}, {"slug": "minimum-adjacent-swaps-to-make-a-valid-array", "title": "Minimum Adjacent Swaps to Make a Valid Array", "difficulty": "Medium"}]},
    {"number": 1707, "slug": "maximum-xor-with-an-element-from-array", "title": "Maximum XOR With an Element From Array", "difficulty": "Hard", "tags": ["Array", "Bit Manipulation", "Trie"], "similar_problems": [{"slug": "maximum-xor-of-two-numbers-in-an-array", "title": "Maximum XOR of Two Numbers in an Array", "difficulty": "Medium"}, {"slug": "maximum-genetic-difference-query", "title": "Maximum Genetic Difference Query", "difficulty": "Hard"}, {"slug": "minimize-xor", "title": "Minimize XOR", "difficulty": "Medium"}, {"slug": "maximum-strong-pair-xor-i", "title": "Maximum Strong Pair XOR I", "difficulty": "Easy"}, {"slug": "maximum-strong-pair-xor-ii", "title": "Maximum Strong Pair XOR II", "difficulty": "Hard"}]},
    {"number": 1713, "slug": "minimum-operations-to-make-a-subsequence", "title": "Minimum Operations to Make a Subsequence", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Binary Search", "Greedy"], "similar_problems": [{"slug": "append-characters-to-string-to-make-subsequence", "title": "Append Characters to String to Make Subsequence", "difficulty": "Medium"}]},
    {"number": 1714, "slug": "sum-of-special-evenly-spaced-elements-in-array", "title": "Sum Of Special Evenly-Spaced Elements In Array", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": []},
    {"number": 1719, "slug": "number-of-ways-to-reconstruct-a-tree", "title": "Number Of Ways To Reconstruct A Tree", "difficulty": "Hard", "tags": ["Tree", "Graph"], "similar_problems": [{"slug": "create-binary-tree-from-descriptions", "title": "Create Binary Tree From Descriptions", "difficulty": "Medium"}, {"slug": "maximum-star-sum-of-a-graph", "title": "Maximum Star Sum of a Graph", "difficulty": "Medium"}]},
    {"number": 1723, "slug": "find-minimum-time-to-finish-all-jobs", "title": "Find Minimum Time to Finish All Jobs", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Backtracking", "Bit Manipulation", "Bitmask"], "similar_problems": [{"slug": "minimum-number-of-work-sessions-to-finish-the-tasks", "title": "Minimum Number of Work Sessions to Finish the Tasks", "difficulty": "Medium"}, {"slug": "find-minimum-time-to-finish-all-jobs-ii", "title": "Find Minimum Time to Finish All Jobs II", "difficulty": "Medium"}]},
    {"number": 1724, "slug": "checking-existence-of-edge-length-limited-paths-ii", "title": "Checking Existence of Edge Length Limited Paths II", "difficulty": "Hard", "tags": ["Union Find", "Graph", "Minimum Spanning Tree"], "similar_problems": [{"slug": "checking-existence-of-edge-length-limited-paths", "title": "Checking Existence of Edge Length Limited Paths", "difficulty": "Hard"}, {"slug": "number-of-good-paths", "title": "Number of Good Paths", "difficulty": "Hard"}, {"slug": "minimum-score-of-a-path-between-two-cities", "title": "Minimum Score of a Path Between Two Cities", "difficulty": "Medium"}]},
    {"number": 1728, "slug": "cat-and-mouse-ii", "title": "Cat and Mouse II", "difficulty": "Hard", "tags": ["Array", "Math", "Dynamic Programming", "Graph", "Topological Sort", "Memoization", "Matrix", "Game Theory"], "similar_problems": [{"slug": "escape-the-ghosts", "title": "Escape The Ghosts", "difficulty": "Medium"}, {"slug": "cat-and-mouse", "title": "Cat and Mouse", "difficulty": "Hard"}]},
    {"number": 1735, "slug": "count-ways-to-make-array-with-product", "title": "Count Ways to Make Array With Product", "difficulty": "Hard", "tags": ["Array", "Math", "Dynamic Programming", "Combinatorics", "Number Theory"], "similar_problems": [{"slug": "count-the-number-of-ideal-arrays", "title": "Count the Number of Ideal Arrays", "difficulty": "Hard"}, {"slug": "smallest-value-after-replacing-with-sum-of-prime-factors", "title": "Smallest Value After Replacing With Sum of Prime Factors", "difficulty": "Medium"}, {"slug": "closest-prime-numbers-in-range", "title": "Closest Prime Numbers in Range", "difficulty": "Medium"}]},
    {"number": 1739, "slug": "building-boxes", "title": "Building Boxes", "difficulty": "Hard", "tags": ["Math", "Binary Search", "Greedy"], "similar_problems": [{"slug": "block-placement-queries", "title": "Block Placement Queries", "difficulty": "Hard"}]},
    {"number": 1745, "slug": "palindrome-partitioning-iv", "title": "Palindrome Partitioning IV", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "palindrome-partitioning", "title": "Palindrome Partitioning", "difficulty": "Medium"}, {"slug": "palindrome-partitioning-ii", "title": "Palindrome Partitioning II", "difficulty": "Hard"}, {"slug": "palindrome-partitioning-iii", "title": "Palindrome Partitioning III", "difficulty": "Hard"}, {"slug": "maximum-number-of-non-overlapping-palindrome-substrings", "title": "Maximum Number of Non-overlapping Palindrome Substrings", "difficulty": "Hard"}]},
    {"number": 1751, "slug": "maximum-number-of-events-that-can-be-attended-ii", "title": "Maximum Number of Events That Can Be Attended II", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Dynamic Programming", "Sorting"], "similar_problems": [{"slug": "maximum-number-of-events-that-can-be-attended", "title": "Maximum Number of Events That Can Be Attended", "difficulty": "Medium"}, {"slug": "maximum-earnings-from-taxi", "title": "Maximum Earnings From Taxi", "difficulty": "Medium"}, {"slug": "two-best-non-overlapping-events", "title": "Two Best Non-Overlapping Events", "difficulty": "Medium"}, {"slug": "meeting-rooms-iii", "title": "Meeting Rooms III", "difficulty": "Hard"}]},
    {"number": 1755, "slug": "closest-subsequence-sum", "title": "Closest Subsequence Sum", "difficulty": "Hard", "tags": ["Array", "Two Pointers", "Dynamic Programming", "Bit Manipulation", "Sorting", "Bitmask"], "similar_problems": [{"slug": "minimize-the-difference-between-target-and-chosen-elements", "title": "Minimize the Difference Between Target and Chosen Elements", "difficulty": "Medium"}, {"slug": "partition-array-into-two-arrays-to-minimize-sum-difference", "title": "Partition Array Into Two Arrays to Minimize Sum Difference", "difficulty": "Hard"}, {"slug": "minimum-operations-to-form-subsequence-with-target-sum", "title": "Minimum Operations to Form Subsequence With Target Sum", "difficulty": "Hard"}, {"slug": "find-the-sum-of-subsequence-powers", "title": "Find the Sum of Subsequence Powers", "difficulty": "Hard"}]},
    {"number": 1761, "slug": "minimum-degree-of-a-connected-trio-in-a-graph", "title": "Minimum Degree of a Connected Trio in a Graph", "difficulty": "Hard", "tags": ["Graph", "Enumeration"], "similar_problems": [{"slug": "add-edges-to-make-degrees-of-all-nodes-even", "title": "Add Edges to Make Degrees of All Nodes Even", "difficulty": "Hard"}]},
    {"number": 1766, "slug": "tree-of-coprimes", "title": "Tree of Coprimes", "difficulty": "Hard", "tags": ["Array", "Math", "Tree", "Depth-First Search", "Number Theory"], "similar_problems": []},
    {"number": 1767, "slug": "find-the-subtasks-that-did-not-execute", "title": "Find the Subtasks That Did Not Execute", "difficulty": "Hard", "tags": ["Database"], "similar_problems": []},
    {"number": 1770, "slug": "maximum-score-from-performing-multiplication-operations", "title": "Maximum Score from Performing Multiplication Operations", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "maximum-points-you-can-obtain-from-cards", "title": "Maximum Points You Can Obtain from Cards", "difficulty": "Medium"}, {"slug": "stone-game-vii", "title": "Stone Game VII", "difficulty": "Medium"}, {"slug": "maximum-spending-after-buying-items", "title": "Maximum Spending After Buying Items", "difficulty": "Hard"}]},
    {"number": 1771, "slug": "maximize-palindrome-length-from-subsequences", "title": "Maximize Palindrome Length From Subsequences", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "longest-palindromic-subsequence", "title": "Longest Palindromic Subsequence", "difficulty": "Medium"}]},
    {"number": 1776, "slug": "car-fleet-ii", "title": "Car Fleet II", "difficulty": "Hard", "tags": ["Array", "Math", "Stack", "Heap (Priority Queue)", "Monotonic Stack"], "similar_problems": [{"slug": "car-fleet", "title": "Car Fleet", "difficulty": "Medium"}, {"slug": "count-collisions-on-a-road", "title": "Count Collisions on a Road", "difficulty": "Medium"}]},
    {"number": 1782, "slug": "count-pairs-of-nodes", "title": "Count Pairs Of Nodes", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Two Pointers", "Binary Search", "Graph", "Sorting", "Counting"], "similar_problems": []},
    {"number": 1787, "slug": "make-the-xor-of-all-segments-equal-to-zero", "title": "Make the XOR of All Segments Equal to Zero", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Bit Manipulation"], "similar_problems": [{"slug": "maximum-xor-score-subarray-queries", "title": "Maximum XOR Score Subarray Queries", "difficulty": "Hard"}]},
    {"number": 1788, "slug": "maximize-the-beauty-of-the-garden", "title": "Maximize the Beauty of the Garden", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Greedy", "Prefix Sum"], "similar_problems": []},
    {"number": 1793, "slug": "maximum-score-of-a-good-subarray", "title": "Maximum Score of a Good Subarray", "difficulty": "Hard", "tags": ["Array", "Two Pointers", "Binary Search", "Stack", "Monotonic Stack"], "similar_problems": [{"slug": "largest-rectangle-in-histogram", "title": "Largest Rectangle in Histogram", "difficulty": "Hard"}]},
    {"number": 1799, "slug": "maximize-score-after-n-operations", "title": "Maximize Score After N Operations", "difficulty": "Hard", "tags": ["Array", "Math", "Dynamic Programming", "Backtracking", "Bit Manipulation", "Number Theory", "Bitmask"], "similar_problems": []},
    {"number": 1803, "slug": "count-pairs-with-xor-in-a-range", "title": "Count Pairs With XOR in a Range", "difficulty": "Hard", "tags": ["Array", "Bit Manipulation", "Trie"], "similar_problems": [{"slug": "count-paths-with-the-given-xor-value", "title": "Count Paths With the Given XOR Value", "difficulty": "Medium"}]},
    {"number": 1808, "slug": "maximize-number-of-nice-divisors", "title": "Maximize Number of Nice Divisors", "difficulty": "Hard", "tags": ["Math", "Recursion", "Number Theory"], "similar_problems": [{"slug": "integer-break", "title": "Integer Break", "difficulty": "Medium"}]},
    {"number": 1815, "slug": "maximum-number-of-groups-getting-fresh-donuts", "title": "Maximum Number of Groups Getting Fresh Donuts", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Bit Manipulation", "Memoization", "Bitmask"], "similar_problems": []},
    {"number": 1819, "slug": "number-of-different-subsequences-gcds", "title": "Number of Different Subsequences GCDs", "difficulty": "Hard", "tags": ["Array", "Math", "Counting", "Number Theory"], "similar_problems": [{"slug": "find-greatest-common-divisor-of-array", "title": "Find Greatest Common Divisor of Array", "difficulty": "Easy"}]},
    {"number": 1825, "slug": "finding-mk-average", "title": "Finding MK Average", "difficulty": "Hard", "tags": ["Design", "Queue", "Heap (Priority Queue)", "Data Stream", "Ordered Set"], "similar_problems": [{"slug": "find-median-from-data-stream", "title": "Find Median from Data Stream", "difficulty": "Hard"}, {"slug": "kth-largest-element-in-a-stream", "title": "Kth Largest Element in a Stream", "difficulty": "Easy"}, {"slug": "sequentially-ordinal-rank-tracker", "title": "Sequentially Ordinal Rank Tracker", "difficulty": "Hard"}]},
    {"number": 1830, "slug": "minimum-number-of-operations-to-make-string-sorted", "title": "Minimum Number of Operations to Make String Sorted", "difficulty": "Hard", "tags": ["Math", "String", "Combinatorics"], "similar_problems": []},
    {"number": 1835, "slug": "find-xor-sum-of-all-pairs-bitwise-and", "title": "Find XOR Sum of All Pairs Bitwise AND", "difficulty": "Hard", "tags": ["Array", "Math", "Bit Manipulation"], "similar_problems": []},
    {"number": 1840, "slug": "maximum-building-height", "title": "Maximum Building Height", "difficulty": "Hard", "tags": ["Array", "Math", "Sorting"], "similar_problems": []},
    {"number": 1842, "slug": "next-palindrome-using-same-digits", "title": "Next Palindrome Using Same Digits", "difficulty": "Hard", "tags": ["Two Pointers", "String"], "similar_problems": [{"slug": "next-greater-element-iii", "title": "Next Greater Element III", "difficulty": "Medium"}, {"slug": "find-the-closest-palindrome", "title": "Find the Closest Palindrome", "difficulty": "Hard"}]},
    {"number": 1847, "slug": "closest-room", "title": "Closest Room", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Sorting", "Ordered Set"], "similar_problems": [{"slug": "most-beautiful-item-for-each-query", "title": "Most Beautiful Item for Each Query", "difficulty": "Medium"}, {"slug": "minimum-time-to-kill-all-monsters", "title": "Minimum Time to Kill All Monsters", "difficulty": "Hard"}]},
    {"number": 1851, "slug": "minimum-interval-to-include-each-query", "title": "Minimum Interval to Include Each Query", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Line Sweep", "Sorting", "Heap (Priority Queue)"], "similar_problems": [{"slug": "number-of-flowers-in-full-bloom", "title": "Number of Flowers in Full Bloom", "difficulty": "Hard"}]},
    {"number": 1857, "slug": "largest-color-value-in-a-directed-graph", "title": "Largest Color Value in a Directed Graph", "difficulty": "Hard", "tags": ["Hash Table", "Dynamic Programming", "Graph", "Topological Sort", "Memoization", "Counting"], "similar_problems": []},
    {"number": 1862, "slug": "sum-of-floored-pairs", "title": "Sum of Floored Pairs", "difficulty": "Hard", "tags": ["Array", "Math", "Binary Search", "Prefix Sum"], "similar_problems": []},
    {"number": 1866, "slug": "number-of-ways-to-rearrange-sticks-with-k-sticks-visible", "title": "Number of Ways to Rearrange Sticks With K Sticks Visible", "difficulty": "Hard", "tags": ["Math", "Dynamic Programming", "Combinatorics"], "similar_problems": []},
    {"number": 1872, "slug": "stone-game-viii", "title": "Stone Game VIII", "difficulty": "Hard", "tags": ["Array", "Math", "Dynamic Programming", "Prefix Sum", "Game Theory"], "similar_problems": [{"slug": "stone-game", "title": "Stone Game", "difficulty": "Medium"}, {"slug": "stone-game-ii", "title": "Stone Game II", "difficulty": "Medium"}, {"slug": "stone-game-iii", "title": "Stone Game III", "difficulty": "Hard"}, {"slug": "stone-game-iv", "title": "Stone Game IV", "difficulty": "Hard"}, {"slug": "stone-game-v", "title": "Stone Game V", "difficulty": "Hard"}, {"slug": "stone-game-vi", "title": "Stone Game VI", "difficulty": "Medium"}, {"slug": "stone-game-vii", "title": "Stone Game VII", "difficulty": "Medium"}, {"slug": "stone-game-viii", "title": "Stone Game VIII", "difficulty": "Hard"}, {"slug": "stone-game-ix", "title": "Stone Game IX", "difficulty": "Medium"}]},
    {"number": 1879, "slug": "minimum-xor-sum-of-two-arrays", "title": "Minimum XOR Sum of Two Arrays", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Bit Manipulation", "Bitmask"], "similar_problems": [{"slug": "fair-distribution-of-cookies", "title": "Fair Distribution of Cookies", "difficulty": "Medium"}, {"slug": "choose-numbers-from-two-arrays-in-range", "title": "Choose Numbers From Two Arrays in Range", "difficulty": "Hard"}, {"slug": "maximum-and-sum-of-array", "title": "Maximum AND Sum of Array", "difficulty": "Hard"}]},
    {"number": 1883, "slug": "minimum-skips-to-arrive-at-meeting-on-time", "title": "Minimum Skips to Arrive at Meeting On Time", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "minimum-speed-to-arrive-on-time", "title": "Minimum Speed to Arrive on Time", "difficulty": "Medium"}, {"slug": "minimum-time-to-finish-the-race", "title": "Minimum Time to Finish the Race", "difficulty": "Hard"}]},
    {"number": 1889, "slug": "minimum-space-wasted-from-packaging", "title": "Minimum Space Wasted From Packaging", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Sorting", "Prefix Sum"], "similar_problems": []},
    {"number": 1892, "slug": "page-recommendations-ii", "title": "Page Recommendations II", "difficulty": "Hard", "tags": ["Database"], "similar_problems": [{"slug": "page-recommendations", "title": "Page Recommendations", "difficulty": "Medium"}, {"slug": "strong-friendship", "title": "Strong Friendship", "difficulty": "Medium"}]},
    {"number": 1896, "slug": "minimum-cost-to-change-the-final-value-of-expression", "title": "Minimum Cost to Change the Final Value of Expression", "difficulty": "Hard", "tags": ["Math", "String", "Dynamic Programming", "Stack"], "similar_problems": []},
    {"number": 1900, "slug": "the-earliest-and-latest-rounds-where-players-compete", "title": "The Earliest and Latest Rounds Where Players Compete", "difficulty": "Hard", "tags": ["Dynamic Programming", "Memoization"], "similar_problems": []},
    {"number": 1912, "slug": "design-movie-rental-system", "title": "Design Movie Rental System", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Design", "Heap (Priority Queue)", "Ordered Set"], "similar_problems": []},
    {"number": 1916, "slug": "count-ways-to-build-rooms-in-an-ant-colony", "title": "Count Ways to Build Rooms in an Ant Colony", "difficulty": "Hard", "tags": ["Math", "Dynamic Programming", "Tree", "Graph", "Topological Sort", "Combinatorics"], "similar_problems": [{"slug": "count-anagrams", "title": "Count Anagrams", "difficulty": "Hard"}, {"slug": "count-the-number-of-good-subsequences", "title": "Count the Number of Good Subsequences", "difficulty": "Medium"}]},
    {"number": 1917, "slug": "leetcodify-friends-recommendations", "title": "Leetcodify Friends Recommendations", "difficulty": "Hard", "tags": ["Database"], "similar_problems": [{"slug": "leetcodify-similar-friends", "title": "Leetcodify Similar Friends", "difficulty": "Hard"}, {"slug": "strong-friendship", "title": "Strong Friendship", "difficulty": "Medium"}]},
    {"number": 1919, "slug": "leetcodify-similar-friends", "title": "Leetcodify Similar Friends", "difficulty": "Hard", "tags": ["Database"], "similar_problems": [{"slug": "leetcodify-friends-recommendations", "title": "Leetcodify Friends Recommendations", "difficulty": "Hard"}]},
    {"number": 1923, "slug": "longest-common-subpath", "title": "Longest Common Subpath", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Rolling Hash", "Suffix Array", "Hash Function"], "similar_problems": [{"slug": "reconstruct-itinerary", "title": "Reconstruct Itinerary", "difficulty": "Hard"}, {"slug": "maximum-length-of-repeated-subarray", "title": "Maximum Length of Repeated Subarray", "difficulty": "Medium"}]},
    {"number": 1924, "slug": "erect-the-fence-ii", "title": "Erect the Fence II", "difficulty": "Hard", "tags": ["Array", "Math", "Geometry"], "similar_problems": [{"slug": "erect-the-fence", "title": "Erect the Fence", "difficulty": "Hard"}]},
    {"number": 1928, "slug": "minimum-cost-to-reach-destination-in-time", "title": "Minimum Cost to Reach Destination in Time", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Graph"], "similar_problems": [{"slug": "maximum-cost-of-trip-with-k-highways", "title": "Maximum Cost of Trip With K Highways", "difficulty": "Hard"}, {"slug": "maximum-path-quality-of-a-graph", "title": "Maximum Path Quality of a Graph", "difficulty": "Hard"}, {"slug": "minimum-cost-to-reach-city-with-discounts", "title": "Minimum Cost to Reach City With Discounts", "difficulty": "Medium"}, {"slug": "find-minimum-time-to-reach-last-room-i", "title": "Find Minimum Time to Reach Last Room I", "difficulty": "Medium"}, {"slug": "find-minimum-time-to-reach-last-room-ii", "title": "Find Minimum Time to Reach Last Room II", "difficulty": "Medium"}, {"slug": "minimum-cost-path-with-edge-reversals", "title": "Minimum Cost Path with Edge Reversals", "difficulty": "Medium"}]},
    {"number": 1931, "slug": "painting-a-grid-with-three-different-colors", "title": "Painting a Grid With Three Different Colors", "difficulty": "Hard", "tags": ["Dynamic Programming"], "similar_problems": [{"slug": "number-of-ways-to-paint-n-3-grid", "title": "Number of Ways to Paint N × 3 Grid", "difficulty": "Hard"}]},
    {"number": 1932, "slug": "merge-bsts-to-create-single-bst", "title": "Merge BSTs to Create Single BST", "difficulty": "Hard", "tags": ["Hash Table", "Binary Search", "Tree", "Depth-First Search", "Binary Tree"], "similar_problems": []},
    {"number": 1938, "slug": "maximum-genetic-difference-query", "title": "Maximum Genetic Difference Query", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Bit Manipulation", "Depth-First Search", "Trie"], "similar_problems": [{"slug": "maximum-xor-with-an-element-from-array", "title": "Maximum XOR With an Element From Array", "difficulty": "Hard"}]},
    {"number": 1944, "slug": "number-of-visible-people-in-a-queue", "title": "Number of Visible People in a Queue", "difficulty": "Hard", "tags": ["Array", "Stack", "Monotonic Stack"], "similar_problems": [{"slug": "buildings-with-an-ocean-view", "title": "Buildings With an Ocean View", "difficulty": "Medium"}, {"slug": "sum-of-subarray-ranges", "title": "Sum of Subarray Ranges", "difficulty": "Medium"}, {"slug": "sum-of-total-strength-of-wizards", "title": "Sum of Total Strength of Wizards", "difficulty": "Hard"}, {"slug": "number-of-people-that-can-be-seen-in-a-grid", "title": "Number of People That Can Be Seen in a Grid", "difficulty": "Medium"}, {"slug": "find-building-where-alice-and-bob-can-meet", "title": "Find Building Where Alice and Bob Can Meet", "difficulty": "Hard"}]},
    {"number": 1948, "slug": "delete-duplicate-folders-in-system", "title": "Delete Duplicate Folders in System", "difficulty": "Hard", "tags": ["Array", "Hash Table", "String", "Trie", "Hash Function"], "similar_problems": [{"slug": "find-duplicate-file-in-system", "title": "Find Duplicate File in System", "difficulty": "Medium"}, {"slug": "find-duplicate-subtrees", "title": "Find Duplicate Subtrees", "difficulty": "Medium"}]},
    {"number": 1955, "slug": "count-number-of-special-subsequences", "title": "Count Number of Special Subsequences", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": []},
    {"number": 1956, "slug": "minimum-time-for-k-virus-variants-to-spread", "title": "Minimum Time For K Virus Variants to Spread", "difficulty": "Hard", "tags": ["Array", "Math", "Binary Search", "Geometry", "Enumeration"], "similar_problems": []},
    {"number": 1960, "slug": "maximum-product-of-the-length-of-two-palindromic-substrings", "title": "Maximum Product of the Length of Two Palindromic Substrings", "difficulty": "Hard", "tags": ["String", "Rolling Hash", "Hash Function"], "similar_problems": [{"slug": "maximum-product-of-the-length-of-two-palindromic-subsequences", "title": "Maximum Product of the Length of Two Palindromic Subsequences", "difficulty": "Medium"}, {"slug": "minimum-cost-to-make-array-equal", "title": "Minimum Cost to Make Array Equal", "difficulty": "Hard"}]},
    {"number": 1964, "slug": "find-the-longest-valid-obstacle-course-at-each-position", "title": "Find the Longest Valid Obstacle Course at Each Position", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Binary Indexed Tree"], "similar_problems": [{"slug": "longest-increasing-subsequence", "title": "Longest Increasing Subsequence", "difficulty": "Medium"}]},
    {"number": 1970, "slug": "last-day-where-you-can-still-cross", "title": "Last Day Where You Can Still Cross", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Depth-First Search", "Breadth-First Search", "Union Find", "Matrix"], "similar_problems": [{"slug": "bricks-falling-when-hit", "title": "Bricks Falling When Hit", "difficulty": "Hard"}, {"slug": "escape-the-spreading-fire", "title": "Escape the Spreading Fire", "difficulty": "Hard"}]},
    {"number": 1972, "slug": "first-and-last-call-on-the-same-day", "title": "First and Last Call On the Same Day", "difficulty": "Hard", "tags": ["Database"], "similar_problems": []},
    {"number": 1977, "slug": "number-of-ways-to-separate-numbers", "title": "Number of Ways to Separate Numbers", "difficulty": "Hard", "tags": ["String", "Dynamic Programming", "Suffix Array"], "similar_problems": [{"slug": "decode-ways", "title": "Decode Ways", "difficulty": "Medium"}, {"slug": "decode-ways-ii", "title": "Decode Ways II", "difficulty": "Hard"}, {"slug": "restore-the-array", "title": "Restore The Array", "difficulty": "Hard"}, {"slug": "number-of-beautiful-partitions", "title": "Number of Beautiful Partitions", "difficulty": "Hard"}]},
    {"number": 1982, "slug": "find-array-given-subset-sums", "title": "Find Array Given Subset Sums", "difficulty": "Hard", "tags": ["Array", "Divide and Conquer"], "similar_problems": [{"slug": "subsets", "title": "Subsets", "difficulty": "Medium"}, {"slug": "subsets-ii", "title": "Subsets II", "difficulty": "Medium"}, {"slug": "recover-the-original-array", "title": "Recover the Original Array", "difficulty": "Hard"}]},
    {"number": 1987, "slug": "number-of-unique-good-subsequences", "title": "Number of Unique Good Subsequences", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "distinct-subsequences", "title": "Distinct Subsequences", "difficulty": "Hard"}, {"slug": "distinct-subsequences-ii", "title": "Distinct Subsequences II", "difficulty": "Hard"}]},
    {"number": 1994, "slug": "the-number-of-good-subsets", "title": "The Number of Good Subsets", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Math", "Dynamic Programming", "Bit Manipulation", "Counting", "Number Theory", "Bitmask"], "similar_problems": [{"slug": "smallest-sufficient-team", "title": "Smallest Sufficient Team", "difficulty": "Hard"}, {"slug": "fair-distribution-of-cookies", "title": "Fair Distribution of Cookies", "difficulty": "Medium"}, {"slug": "number-of-ways-to-wear-different-hats-to-each-other", "title": "Number of Ways to Wear Different Hats to Each Other", "difficulty": "Hard"}]},
    {"number": 1998, "slug": "gcd-sort-of-an-array", "title": "GCD Sort of an Array", "difficulty": "Hard", "tags": ["Array", "Math", "Union Find", "Sorting", "Number Theory"], "similar_problems": [{"slug": "rank-transform-of-a-matrix", "title": "Rank Transform of a Matrix", "difficulty": "Hard"}]},
    {"number": 2003, "slug": "smallest-missing-genetic-value-in-each-subtree", "title": "Smallest Missing Genetic Value in Each Subtree", "difficulty": "Hard", "tags": ["Dynamic Programming", "Tree", "Depth-First Search", "Union Find"], "similar_problems": []},
    {"number": 2004, "slug": "the-number-of-seniors-and-juniors-to-join-the-company", "title": "The Number of Seniors and Juniors to Join the Company", "difficulty": "Hard", "tags": ["Database"], "similar_problems": [{"slug": "last-person-to-fit-in-the-bus", "title": "Last Person to Fit in the Bus", "difficulty": "Medium"}, {"slug": "the-number-of-seniors-and-juniors-to-join-the-company-ii", "title": "The Number of Seniors and Juniors to Join the Company II", "difficulty": "Hard"}]},
    {"number": 2005, "slug": "subtree-removal-game-with-fibonacci-tree", "title": "Subtree Removal Game with Fibonacci Tree", "difficulty": "Hard", "tags": ["Math", "Dynamic Programming", "Tree", "Binary Tree", "Game Theory"], "similar_problems": [{"slug": "game-of-nim", "title": "Game of Nim", "difficulty": "Medium"}]},
    {"number": 2009, "slug": "minimum-number-of-operations-to-make-array-continuous", "title": "Minimum Number of Operations to Make Array Continuous", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Binary Search", "Sliding Window"], "similar_problems": [{"slug": "longest-repeating-character-replacement", "title": "Longest Repeating Character Replacement", "difficulty": "Medium"}, {"slug": "continuous-subarray-sum", "title": "Continuous Subarray Sum", "difficulty": "Medium"}, {"slug": "moving-stones-until-consecutive-ii", "title": "Moving Stones Until Consecutive II", "difficulty": "Medium"}, {"slug": "minimum-one-bit-operations-to-make-integers-zero", "title": "Minimum One Bit Operations to Make Integers Zero", "difficulty": "Hard"}, {"slug": "minimum-adjacent-swaps-for-k-consecutive-ones", "title": "Minimum Adjacent Swaps for K Consecutive Ones", "difficulty": "Hard"}]},
    {"number": 2010, "slug": "the-number-of-seniors-and-juniors-to-join-the-company-ii", "title": "The Number of Seniors and Juniors to Join the Company II", "difficulty": "Hard", "tags": ["Database"], "similar_problems": [{"slug": "last-person-to-fit-in-the-bus", "title": "Last Person to Fit in the Bus", "difficulty": "Medium"}, {"slug": "the-number-of-seniors-and-juniors-to-join-the-company", "title": "The Number of Seniors and Juniors to Join the Company", "difficulty": "Hard"}]},
    {"number": 2014, "slug": "longest-subsequence-repeated-k-times", "title": "Longest Subsequence Repeated k Times", "difficulty": "Hard", "tags": ["String", "Backtracking", "Greedy", "Counting", "Enumeration"], "similar_problems": [{"slug": "longest-substring-with-at-least-k-repeating-characters", "title": "Longest Substring with At Least K Repeating Characters", "difficulty": "Medium"}]},
    {"number": 2019, "slug": "the-score-of-students-solving-math-expression", "title": "The Score of Students Solving Math Expression", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Math", "String", "Dynamic Programming", "Stack", "Memoization"], "similar_problems": [{"slug": "basic-calculator", "title": "Basic Calculator", "difficulty": "Hard"}, {"slug": "different-ways-to-add-parentheses", "title": "Different Ways to Add Parentheses", "difficulty": "Medium"}]},
    {"number": 2025, "slug": "maximum-number-of-ways-to-partition-an-array", "title": "Maximum Number of Ways to Partition an Array", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Counting", "Enumeration", "Prefix Sum"], "similar_problems": [{"slug": "partition-equal-subset-sum", "title": "Partition Equal Subset Sum", "difficulty": "Medium"}, {"slug": "partition-to-k-equal-sum-subsets", "title": "Partition to K Equal Sum Subsets", "difficulty": "Medium"}]},
    {"number": 2030, "slug": "smallest-k-length-subsequence-with-occurrences-of-a-letter", "title": "Smallest K-Length Subsequence With Occurrences of a Letter", "difficulty": "Hard", "tags": ["String", "Stack", "Greedy", "Monotonic Stack"], "similar_problems": [{"slug": "remove-duplicate-letters", "title": "Remove Duplicate Letters", "difficulty": "Medium"}, {"slug": "subarray-with-elements-greater-than-varying-threshold", "title": "Subarray With Elements Greater Than Varying Threshold", "difficulty": "Hard"}, {"slug": "find-the-lexicographically-smallest-valid-sequence", "title": "Find the Lexicographically Smallest Valid Sequence", "difficulty": "Medium"}]},
    {"number": 2035, "slug": "partition-array-into-two-arrays-to-minimize-sum-difference", "title": "Partition Array Into Two Arrays to Minimize Sum Difference", "difficulty": "Hard", "tags": ["Array", "Two Pointers", "Binary Search", "Dynamic Programming", "Bit Manipulation", "Ordered Set", "Bitmask"], "similar_problems": [{"slug": "partition-equal-subset-sum", "title": "Partition Equal Subset Sum", "difficulty": "Medium"}, {"slug": "split-array-with-same-average", "title": "Split Array With Same Average", "difficulty": "Hard"}, {"slug": "tallest-billboard", "title": "Tallest Billboard", "difficulty": "Hard"}, {"slug": "last-stone-weight-ii", "title": "Last Stone Weight II", "difficulty": "Medium"}, {"slug": "fair-distribution-of-cookies", "title": "Fair Distribution of Cookies", "difficulty": "Medium"}, {"slug": "closest-subsequence-sum", "title": "Closest Subsequence Sum", "difficulty": "Hard"}, {"slug": "number-of-ways-to-split-array", "title": "Number of Ways to Split Array", "difficulty": "Medium"}, {"slug": "minimum-sum-of-squared-difference", "title": "Minimum Sum of Squared Difference", "difficulty": "Medium"}, {"slug": "split-with-minimum-sum", "title": "Split With Minimum Sum", "difficulty": "Easy"}]},
    {"number": 2040, "slug": "kth-smallest-product-of-two-sorted-arrays", "title": "Kth Smallest Product of Two Sorted Arrays", "difficulty": "Hard", "tags": ["Array", "Binary Search"], "similar_problems": [{"slug": "find-k-pairs-with-smallest-sums", "title": "Find K Pairs with Smallest Sums", "difficulty": "Medium"}, {"slug": "k-diff-pairs-in-an-array", "title": "K-diff Pairs in an Array", "difficulty": "Medium"}, {"slug": "maximum-number-of-robots-within-budget", "title": "Maximum Number of Robots Within Budget", "difficulty": "Hard"}]},
    {"number": 2045, "slug": "second-minimum-time-to-reach-destination", "title": "Second Minimum Time to Reach Destination", "difficulty": "Hard", "tags": ["Breadth-First Search", "Graph", "Shortest Path"], "similar_problems": [{"slug": "network-delay-time", "title": "Network Delay Time", "difficulty": "Medium"}, {"slug": "find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance", "title": "Find the City With the Smallest Number of Neighbors at a Threshold Distance", "difficulty": "Medium"}, {"slug": "number-of-ways-to-arrive-at-destination", "title": "Number of Ways to Arrive at Destination", "difficulty": "Medium"}]},
    {"number": 2050, "slug": "parallel-courses-iii", "title": "Parallel Courses III", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Graph", "Topological Sort"], "similar_problems": [{"slug": "course-schedule-iii", "title": "Course Schedule III", "difficulty": "Hard"}, {"slug": "parallel-courses", "title": "Parallel Courses", "difficulty": "Medium"}, {"slug": "single-threaded-cpu", "title": "Single-Threaded CPU", "difficulty": "Medium"}, {"slug": "process-tasks-using-servers", "title": "Process Tasks Using Servers", "difficulty": "Medium"}, {"slug": "maximum-employees-to-be-invited-to-a-meeting", "title": "Maximum Employees to Be Invited to a Meeting", "difficulty": "Hard"}]},
    {"number": 2056, "slug": "number-of-valid-move-combinations-on-chessboard", "title": "Number of Valid Move Combinations On Chessboard", "difficulty": "Hard", "tags": ["Array", "String", "Backtracking", "Simulation"], "similar_problems": []},
    {"number": 2060, "slug": "check-if-an-original-string-exists-given-two-encoded-strings", "title": "Check if an Original String Exists Given Two Encoded Strings", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "valid-word-abbreviation", "title": "Valid Word Abbreviation", "difficulty": "Easy"}, {"slug": "check-if-two-string-arrays-are-equivalent", "title": "Check If Two String Arrays are Equivalent", "difficulty": "Easy"}]},
    {"number": 2065, "slug": "maximum-path-quality-of-a-graph", "title": "Maximum Path Quality of a Graph", "difficulty": "Hard", "tags": ["Array", "Backtracking", "Graph"], "similar_problems": [{"slug": "cherry-pickup", "title": "Cherry Pickup", "difficulty": "Hard"}, {"slug": "minimum-cost-to-reach-destination-in-time", "title": "Minimum Cost to Reach Destination in Time", "difficulty": "Hard"}]},
    {"number": 2071, "slug": "maximum-number-of-tasks-you-can-assign", "title": "Maximum Number of Tasks You Can Assign", "difficulty": "Hard", "tags": ["Array", "Two Pointers", "Binary Search", "Greedy", "Queue", "Sorting", "Monotonic Queue"], "similar_problems": [{"slug": "most-profit-assigning-work", "title": "Most Profit Assigning Work", "difficulty": "Medium"}, {"slug": "maximum-running-time-of-n-computers", "title": "Maximum Running Time of N Computers", "difficulty": "Hard"}, {"slug": "maximum-number-of-robots-within-budget", "title": "Maximum Number of Robots Within Budget", "difficulty": "Hard"}, {"slug": "maximum-matching-of-players-with-trainers", "title": "Maximum Matching of Players With Trainers", "difficulty": "Medium"}, {"slug": "maximize-the-minimum-powered-city", "title": "Maximize the Minimum Powered City", "difficulty": "Hard"}]},
    {"number": 2076, "slug": "process-restricted-friend-requests", "title": "Process Restricted Friend Requests", "difficulty": "Hard", "tags": ["Union Find", "Graph"], "similar_problems": [{"slug": "number-of-islands-ii", "title": "Number of Islands II", "difficulty": "Hard"}, {"slug": "smallest-string-with-swaps", "title": "Smallest String With Swaps", "difficulty": "Medium"}, {"slug": "maximum-employees-to-be-invited-to-a-meeting", "title": "Maximum Employees to Be Invited to a Meeting", "difficulty": "Hard"}]},
    {"number": 2081, "slug": "sum-of-k-mirror-numbers", "title": "Sum of k-Mirror Numbers", "difficulty": "Hard", "tags": ["Math", "Enumeration"], "similar_problems": [{"slug": "strobogrammatic-number-ii", "title": "Strobogrammatic Number II", "difficulty": "Medium"}, {"slug": "prime-palindrome", "title": "Prime Palindrome", "difficulty": "Medium"}]},
    {"number": 2088, "slug": "count-fertile-pyramids-in-a-land", "title": "Count Fertile Pyramids in a Land", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Matrix"], "similar_problems": [{"slug": "count-square-submatrices-with-all-ones", "title": "Count Square Submatrices with All Ones", "difficulty": "Medium"}, {"slug": "get-biggest-three-rhombus-sums-in-a-grid", "title": "Get Biggest Three Rhombus Sums in a Grid", "difficulty": "Medium"}]},
    {"number": 2092, "slug": "find-all-people-with-secret", "title": "Find All People With Secret", "difficulty": "Hard", "tags": ["Depth-First Search", "Breadth-First Search", "Union Find", "Graph", "Sorting"], "similar_problems": [{"slug": "reachable-nodes-in-subdivided-graph", "title": "Reachable Nodes In Subdivided Graph", "difficulty": "Hard"}]},
    {"number": 2097, "slug": "valid-arrangement-of-pairs", "title": "Valid Arrangement of Pairs", "difficulty": "Hard", "tags": ["Depth-First Search", "Graph", "Eulerian Circuit"], "similar_problems": [{"slug": "reconstruct-itinerary", "title": "Reconstruct Itinerary", "difficulty": "Hard"}, {"slug": "find-if-path-exists-in-graph", "title": "Find if Path Exists in Graph", "difficulty": "Easy"}]},
    {"number": 2102, "slug": "sequentially-ordinal-rank-tracker", "title": "Sequentially Ordinal Rank Tracker", "difficulty": "Hard", "tags": ["Design", "Heap (Priority Queue)", "Data Stream", "Ordered Set"], "similar_problems": [{"slug": "find-median-from-data-stream", "title": "Find Median from Data Stream", "difficulty": "Hard"}, {"slug": "kth-largest-element-in-a-stream", "title": "Kth Largest Element in a Stream", "difficulty": "Easy"}, {"slug": "finding-mk-average", "title": "Finding MK Average", "difficulty": "Hard"}]},
    {"number": 2106, "slug": "maximum-fruits-harvested-after-at-most-k-steps", "title": "Maximum Fruits Harvested After at Most K Steps", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Sliding Window", "Prefix Sum"], "similar_problems": [{"slug": "maximum-performance-of-a-team", "title": "Maximum Performance of a Team", "difficulty": "Hard"}]},
    {"number": 2111, "slug": "minimum-operations-to-make-the-array-k-increasing", "title": "Minimum Operations to Make the Array K-Increasing", "difficulty": "Hard", "tags": ["Array", "Binary Search"], "similar_problems": [{"slug": "longest-increasing-subsequence", "title": "Longest Increasing Subsequence", "difficulty": "Medium"}, {"slug": "minimum-swaps-to-make-sequences-increasing", "title": "Minimum Swaps To Make Sequences Increasing", "difficulty": "Hard"}]},
    {"number": 2117, "slug": "abbreviating-the-product-of-a-range", "title": "Abbreviating the Product of a Range", "difficulty": "Hard", "tags": ["Math"], "similar_problems": [{"slug": "factorial-trailing-zeroes", "title": "Factorial Trailing Zeroes", "difficulty": "Medium"}, {"slug": "maximum-trailing-zeros-in-a-cornered-path", "title": "Maximum Trailing Zeros in a Cornered Path", "difficulty": "Medium"}, {"slug": "find-all-good-indices", "title": "Find All Good Indices", "difficulty": "Medium"}]},
    {"number": 2118, "slug": "build-the-equation", "title": "Build the Equation", "difficulty": "Hard", "tags": ["Database"], "similar_problems": []},
    {"number": 2122, "slug": "recover-the-original-array", "title": "Recover the Original Array", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Two Pointers", "Sorting", "Enumeration"], "similar_problems": [{"slug": "find-array-given-subset-sums", "title": "Find Array Given Subset Sums", "difficulty": "Hard"}, {"slug": "find-original-array-from-doubled-array", "title": "Find Original Array From Doubled Array", "difficulty": "Medium"}]},
    {"number": 2123, "slug": "minimum-operations-to-remove-adjacent-ones-in-matrix", "title": "Minimum Operations to Remove Adjacent Ones in Matrix", "difficulty": "Hard", "tags": ["Array", "Graph", "Matrix"], "similar_problems": [{"slug": "set-matrix-zeroes", "title": "Set Matrix Zeroes", "difficulty": "Medium"}, {"slug": "01-matrix", "title": "01 Matrix", "difficulty": "Medium"}, {"slug": "minimum-number-of-flips-to-convert-binary-matrix-to-zero-matrix", "title": "Minimum Number of Flips to Convert Binary Matrix to Zero Matrix", "difficulty": "Hard"}, {"slug": "remove-all-ones-with-row-and-column-flips", "title": "Remove All Ones With Row and Column Flips", "difficulty": "Medium"}]},
    {"number": 2127, "slug": "maximum-employees-to-be-invited-to-a-meeting", "title": "Maximum Employees to Be Invited to a Meeting", "difficulty": "Hard", "tags": ["Depth-First Search", "Graph", "Topological Sort"], "similar_problems": [{"slug": "redundant-connection", "title": "Redundant Connection", "difficulty": "Medium"}, {"slug": "parallel-courses-iii", "title": "Parallel Courses III", "difficulty": "Hard"}, {"slug": "process-restricted-friend-requests", "title": "Process Restricted Friend Requests", "difficulty": "Hard"}]},
    {"number": 2132, "slug": "stamping-the-grid", "title": "Stamping the Grid", "difficulty": "Hard", "tags": ["Array", "Greedy", "Matrix", "Prefix Sum"], "similar_problems": [{"slug": "maximal-square", "title": "Maximal Square", "difficulty": "Medium"}, {"slug": "bomb-enemy", "title": "Bomb Enemy", "difficulty": "Medium"}, {"slug": "matrix-block-sum", "title": "Matrix Block Sum", "difficulty": "Medium"}]},
    {"number": 2136, "slug": "earliest-possible-day-of-full-bloom", "title": "Earliest Possible Day of Full Bloom", "difficulty": "Hard", "tags": ["Array", "Greedy", "Sorting"], "similar_problems": [{"slug": "minimum-number-of-days-to-make-m-bouquets", "title": "Minimum Number of Days to Make m Bouquets", "difficulty": "Medium"}]},
    {"number": 2141, "slug": "maximum-running-time-of-n-computers", "title": "Maximum Running Time of N Computers", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Greedy", "Sorting"], "similar_problems": [{"slug": "minimum-moves-to-equal-array-elements", "title": "Minimum Moves to Equal Array Elements", "difficulty": "Medium"}, {"slug": "sell-diminishing-valued-colored-balls", "title": "Sell Diminishing-Valued Colored Balls", "difficulty": "Medium"}, {"slug": "maximum-number-of-tasks-you-can-assign", "title": "Maximum Number of Tasks You Can Assign", "difficulty": "Hard"}, {"slug": "minimum-time-to-complete-trips", "title": "Minimum Time to Complete Trips", "difficulty": "Medium"}, {"slug": "minimum-amount-of-time-to-fill-cups", "title": "Minimum Amount of Time to Fill Cups", "difficulty": "Easy"}]},
    {"number": 2143, "slug": "choose-numbers-from-two-arrays-in-range", "title": "Choose Numbers From Two Arrays in Range", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "intersection-of-two-arrays", "title": "Intersection of Two Arrays", "difficulty": "Easy"}, {"slug": "intersection-of-two-arrays-ii", "title": "Intersection of Two Arrays II", "difficulty": "Easy"}, {"slug": "minimum-xor-sum-of-two-arrays", "title": "Minimum XOR Sum of Two Arrays", "difficulty": "Hard"}, {"slug": "minimize-product-sum-of-two-arrays", "title": "Minimize Product Sum of Two Arrays", "difficulty": "Medium"}]},
    {"number": 2147, "slug": "number-of-ways-to-divide-a-long-corridor", "title": "Number of Ways to Divide a Long Corridor", "difficulty": "Hard", "tags": ["Math", "String", "Dynamic Programming"], "similar_problems": [{"slug": "decode-ways-ii", "title": "Decode Ways II", "difficulty": "Hard"}, {"slug": "minimum-cost-to-cut-a-stick", "title": "Minimum Cost to Cut a Stick", "difficulty": "Hard"}, {"slug": "ways-to-split-array-into-three-subarrays", "title": "Ways to Split Array Into Three Subarrays", "difficulty": "Medium"}]},
    {"number": 2151, "slug": "maximum-good-people-based-on-statements", "title": "Maximum Good People Based on Statements", "difficulty": "Hard", "tags": ["Array", "Backtracking", "Bit Manipulation", "Enumeration"], "similar_problems": [{"slug": "maximum-score-words-formed-by-letters", "title": "Maximum Score Words Formed by Letters", "difficulty": "Hard"}]},
    {"number": 2153, "slug": "the-number-of-passengers-in-each-bus-ii", "title": "The Number of Passengers in Each Bus II", "difficulty": "Hard", "tags": ["Database"], "similar_problems": []},
    {"number": 2156, "slug": "find-substring-with-given-hash-value", "title": "Find Substring With Given Hash Value", "difficulty": "Hard", "tags": ["String", "Sliding Window", "Rolling Hash", "Hash Function"], "similar_problems": [{"slug": "distinct-echo-substrings", "title": "Distinct Echo Substrings", "difficulty": "Hard"}]},
    {"number": 2157, "slug": "groups-of-strings", "title": "Groups of Strings", "difficulty": "Hard", "tags": ["String", "Bit Manipulation", "Union Find"], "similar_problems": [{"slug": "word-ladder-ii", "title": "Word Ladder II", "difficulty": "Hard"}, {"slug": "similar-string-groups", "title": "Similar String Groups", "difficulty": "Hard"}, {"slug": "largest-component-size-by-common-factor", "title": "Largest Component Size by Common Factor", "difficulty": "Hard"}]},
    {"number": 2158, "slug": "amount-of-new-area-painted-each-day", "title": "Amount of New Area Painted Each Day", "difficulty": "Hard", "tags": ["Array", "Segment Tree", "Ordered Set"], "similar_problems": [{"slug": "merge-intervals", "title": "Merge Intervals", "difficulty": "Medium"}, {"slug": "describe-the-painting", "title": "Describe the Painting", "difficulty": "Medium"}, {"slug": "average-height-of-buildings-in-each-segment", "title": "Average Height of Buildings in Each Segment", "difficulty": "Medium"}]},
    {"number": 2163, "slug": "minimum-difference-in-sums-after-removal-of-elements", "title": "Minimum Difference in Sums After Removal of Elements", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Heap (Priority Queue)"], "similar_problems": [{"slug": "product-of-array-except-self", "title": "Product of Array Except Self", "difficulty": "Medium"}, {"slug": "find-subsequence-of-length-k-with-the-largest-sum", "title": "Find Subsequence of Length K With the Largest Sum", "difficulty": "Easy"}, {"slug": "find-minimum-cost-to-remove-array-elements", "title": "Find Minimum Cost to Remove Array Elements", "difficulty": "Medium"}]},
    {"number": 2167, "slug": "minimum-time-to-remove-all-cars-containing-illegal-goods", "title": "Minimum Time to Remove All Cars Containing Illegal Goods", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "minimum-number-of-k-consecutive-bit-flips", "title": "Minimum Number of K Consecutive Bit Flips", "difficulty": "Hard"}]},
    {"number": 2172, "slug": "maximum-and-sum-of-array", "title": "Maximum AND Sum of Array", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Bit Manipulation", "Bitmask"], "similar_problems": [{"slug": "minimum-xor-sum-of-two-arrays", "title": "Minimum XOR Sum of Two Arrays", "difficulty": "Hard"}]},
    {"number": 2173, "slug": "longest-winning-streak", "title": "Longest Winning Streak", "difficulty": "Hard", "tags": ["Database"], "similar_problems": []},
    {"number": 2179, "slug": "count-good-triplets-in-an-array", "title": "Count Good Triplets in an Array", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Divide and Conquer", "Binary Indexed Tree", "Segment Tree", "Merge Sort", "Ordered Set"], "similar_problems": [{"slug": "count-of-smaller-numbers-after-self", "title": "Count of Smaller Numbers After Self", "difficulty": "Hard"}, {"slug": "increasing-triplet-subsequence", "title": "Increasing Triplet Subsequence", "difficulty": "Medium"}, {"slug": "create-sorted-array-through-instructions", "title": "Create Sorted Array through Instructions", "difficulty": "Hard"}, {"slug": "number-of-good-paths", "title": "Number of Good Paths", "difficulty": "Hard"}, {"slug": "count-increasing-quadruplets", "title": "Count Increasing Quadruplets", "difficulty": "Hard"}]},
    {"number": 2183, "slug": "count-array-pairs-divisible-by-k", "title": "Count Array Pairs Divisible by K", "difficulty": "Hard", "tags": ["Array", "Math", "Number Theory"], "similar_problems": [{"slug": "number-of-single-divisor-triplets", "title": "Number of Single Divisor Triplets", "difficulty": "Medium"}, {"slug": "check-if-array-pairs-are-divisible-by-k", "title": "Check If Array Pairs Are Divisible by k", "difficulty": "Medium"}, {"slug": "find-the-number-of-good-pairs-ii", "title": "Find the Number of Good Pairs II", "difficulty": "Medium"}, {"slug": "find-the-number-of-good-pairs-i", "title": "Find the Number of Good Pairs I", "difficulty": "Easy"}]},
    {"number": 2188, "slug": "minimum-time-to-finish-the-race", "title": "Minimum Time to Finish the Race", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "minimum-skips-to-arrive-at-meeting-on-time", "title": "Minimum Skips to Arrive at Meeting On Time", "difficulty": "Hard"}]},
    {"number": 2193, "slug": "minimum-number-of-moves-to-make-palindrome", "title": "Minimum Number of Moves to Make Palindrome", "difficulty": "Hard", "tags": ["Two Pointers", "String", "Greedy", "Binary Indexed Tree"], "similar_problems": [{"slug": "minimum-insertion-steps-to-make-a-string-palindrome", "title": "Minimum Insertion Steps to Make a String Palindrome", "difficulty": "Hard"}, {"slug": "minimum-number-of-flips-to-make-binary-grid-palindromic-i", "title": "Minimum Number of Flips to Make Binary Grid Palindromic I", "difficulty": "Medium"}]},
    {"number": 2197, "slug": "replace-non-coprime-numbers-in-array", "title": "Replace Non-Coprime Numbers in Array", "difficulty": "Hard", "tags": ["Array", "Math", "Stack", "Number Theory"], "similar_problems": [{"slug": "remove-all-adjacent-duplicates-in-string-ii", "title": "Remove All Adjacent Duplicates in String II", "difficulty": "Medium"}, {"slug": "number-of-pairs-of-interchangeable-rectangles", "title": "Number of Pairs of Interchangeable Rectangles", "difficulty": "Medium"}, {"slug": "split-the-array-to-make-coprime-products", "title": "Split the Array to Make Coprime Products", "difficulty": "Hard"}]},
    {"number": 2199, "slug": "finding-the-topic-of-each-post", "title": "Finding the Topic of Each Post", "difficulty": "Hard", "tags": ["Database"], "similar_problems": [{"slug": "group-sold-products-by-the-date", "title": "Group Sold Products By The Date", "difficulty": "Easy"}]},
    {"number": 2203, "slug": "minimum-weighted-subgraph-with-the-required-paths", "title": "Minimum Weighted Subgraph With the Required Paths", "difficulty": "Hard", "tags": ["Graph", "Shortest Path"], "similar_problems": [{"slug": "minimum-cost-to-make-at-least-one-valid-path-in-a-grid", "title": "Minimum Cost to Make at Least One Valid Path in a Grid", "difficulty": "Hard"}, {"slug": "escape-the-spreading-fire", "title": "Escape the Spreading Fire", "difficulty": "Hard"}, {"slug": "disconnect-path-in-a-binary-matrix-by-at-most-one-flip", "title": "Disconnect Path in a Binary Matrix by at Most One Flip", "difficulty": "Medium"}]},
    {"number": 2204, "slug": "distance-to-a-cycle-in-undirected-graph", "title": "Distance to a Cycle in Undirected Graph", "difficulty": "Hard", "tags": ["Depth-First Search", "Breadth-First Search", "Union Find", "Graph"], "similar_problems": [{"slug": "paths-in-maze-that-lead-to-same-room", "title": "Paths in Maze That Lead to Same Room", "difficulty": "Medium"}]},
    {"number": 2209, "slug": "minimum-white-tiles-after-covering-with-carpets", "title": "Minimum White Tiles After Covering With Carpets", "difficulty": "Hard", "tags": ["String", "Dynamic Programming", "Prefix Sum"], "similar_problems": [{"slug": "edit-distance", "title": "Edit Distance", "difficulty": "Medium"}]},
    {"number": 2213, "slug": "longest-substring-of-one-repeating-character", "title": "Longest Substring of One Repeating Character", "difficulty": "Hard", "tags": ["Array", "String", "Segment Tree", "Ordered Set"], "similar_problems": [{"slug": "merge-intervals", "title": "Merge Intervals", "difficulty": "Medium"}, {"slug": "longest-repeating-character-replacement", "title": "Longest Repeating Character Replacement", "difficulty": "Medium"}, {"slug": "consecutive-characters", "title": "Consecutive Characters", "difficulty": "Easy"}, {"slug": "create-sorted-array-through-instructions", "title": "Create Sorted Array through Instructions", "difficulty": "Hard"}, {"slug": "longest-increasing-subsequence-ii", "title": "Longest Increasing Subsequence II", "difficulty": "Hard"}]},
    {"number": 2218, "slug": "maximum-value-of-k-coins-from-piles", "title": "Maximum Value of K Coins From Piles", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Prefix Sum"], "similar_problems": [{"slug": "coin-change", "title": "Coin Change", "difficulty": "Medium"}, {"slug": "coin-change-ii", "title": "Coin Change II", "difficulty": "Medium"}]},
    {"number": 2223, "slug": "sum-of-scores-of-built-strings", "title": "Sum of Scores of Built Strings", "difficulty": "Hard", "tags": ["String", "Binary Search", "Rolling Hash", "Suffix Array", "String Matching", "Hash Function"], "similar_problems": [{"slug": "longest-happy-prefix", "title": "Longest Happy Prefix", "difficulty": "Hard"}]},
    {"number": 2227, "slug": "encrypt-and-decrypt-strings", "title": "Encrypt and Decrypt Strings", "difficulty": "Hard", "tags": ["Array", "Hash Table", "String", "Design", "Trie"], "similar_problems": [{"slug": "implement-trie-prefix-tree", "title": "Implement Trie (Prefix Tree)", "difficulty": "Medium"}, {"slug": "word-search-ii", "title": "Word Search II", "difficulty": "Hard"}, {"slug": "implement-trie-ii-prefix-tree", "title": "Implement Trie II (Prefix Tree)", "difficulty": "Medium"}, {"slug": "find-the-sum-of-encrypted-integers", "title": "Find the Sum of Encrypted Integers", "difficulty": "Easy"}]},
    {"number": 2234, "slug": "maximum-total-beauty-of-the-gardens", "title": "Maximum Total Beauty of the Gardens", "difficulty": "Hard", "tags": ["Array", "Two Pointers", "Binary Search", "Greedy", "Sorting", "Enumeration", "Prefix Sum"], "similar_problems": [{"slug": "split-array-largest-sum", "title": "Split Array Largest Sum", "difficulty": "Hard"}]},
    {"number": 2242, "slug": "maximum-score-of-a-node-sequence", "title": "Maximum Score of a Node Sequence", "difficulty": "Hard", "tags": ["Array", "Graph", "Sorting", "Enumeration"], "similar_problems": [{"slug": "get-the-maximum-score", "title": "Get the Maximum Score", "difficulty": "Hard"}]},
    {"number": 2246, "slug": "longest-path-with-different-adjacent-characters", "title": "Longest Path With Different Adjacent Characters", "difficulty": "Hard", "tags": ["Array", "String", "Tree", "Depth-First Search", "Graph", "Topological Sort"], "similar_problems": [{"slug": "diameter-of-binary-tree", "title": "Diameter of Binary Tree", "difficulty": "Easy"}, {"slug": "longest-univalue-path", "title": "Longest Univalue Path", "difficulty": "Medium"}, {"slug": "choose-edges-to-maximize-score-in-a-tree", "title": "Choose Edges to Maximize Score in a Tree", "difficulty": "Medium"}]},
    {"number": 2247, "slug": "maximum-cost-of-trip-with-k-highways", "title": "Maximum Cost of Trip With K Highways", "difficulty": "Hard", "tags": ["Dynamic Programming", "Bit Manipulation", "Graph", "Bitmask"], "similar_problems": [{"slug": "minimum-cost-to-reach-destination-in-time", "title": "Minimum Cost to Reach Destination in Time", "difficulty": "Hard"}, {"slug": "minimum-cost-to-reach-city-with-discounts", "title": "Minimum Cost to Reach City With Discounts", "difficulty": "Medium"}]},
    {"number": 2251, "slug": "number-of-flowers-in-full-bloom", "title": "Number of Flowers in Full Bloom", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Binary Search", "Sorting", "Prefix Sum", "Ordered Set"], "similar_problems": [{"slug": "meeting-rooms-ii", "title": "Meeting Rooms II", "difficulty": "Medium"}, {"slug": "minimum-interval-to-include-each-query", "title": "Minimum Interval to Include Each Query", "difficulty": "Hard"}]},
    {"number": 2252, "slug": "dynamic-pivoting-of-a-table", "title": "Dynamic Pivoting of a Table", "difficulty": "Hard", "tags": ["Database"], "similar_problems": [{"slug": "products-price-for-each-store", "title": "Product's Price for Each Store", "difficulty": "Easy"}]},
    {"number": 2253, "slug": "dynamic-unpivoting-of-a-table", "title": "Dynamic Unpivoting of a Table", "difficulty": "Hard", "tags": ["Database"], "similar_problems": [{"slug": "rearrange-products-table", "title": "Rearrange Products Table", "difficulty": "Easy"}]},
    {"number": 2254, "slug": "design-video-sharing-platform", "title": "Design Video Sharing Platform", "difficulty": "Hard", "tags": ["Hash Table", "Stack", "Design", "Ordered Set"], "similar_problems": [{"slug": "tweet-counts-per-frequency", "title": "Tweet Counts Per Frequency", "difficulty": "Medium"}, {"slug": "design-browser-history", "title": "Design Browser History", "difficulty": "Medium"}, {"slug": "most-popular-video-creator", "title": "Most Popular Video Creator", "difficulty": "Medium"}]},
    {"number": 2258, "slug": "escape-the-spreading-fire", "title": "Escape the Spreading Fire", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Breadth-First Search", "Matrix"], "similar_problems": [{"slug": "rotting-oranges", "title": "Rotting Oranges", "difficulty": "Medium"}, {"slug": "last-day-where-you-can-still-cross", "title": "Last Day Where You Can Still Cross", "difficulty": "Hard"}, {"slug": "minimum-weighted-subgraph-with-the-required-paths", "title": "Minimum Weighted Subgraph With the Required Paths", "difficulty": "Hard"}, {"slug": "maximum-number-of-points-from-grid-queries", "title": "Maximum Number of Points From Grid Queries", "difficulty": "Hard"}]},
    {"number": 2262, "slug": "total-appeal-of-a-string", "title": "Total Appeal of A String", "difficulty": "Hard", "tags": ["Hash Table", "String", "Dynamic Programming"], "similar_problems": [{"slug": "count-unique-characters-of-all-substrings-of-a-given-string", "title": "Count Unique Characters of All Substrings of a Given String", "difficulty": "Hard"}, {"slug": "count-vowel-substrings-of-a-string", "title": "Count Vowel Substrings of a String", "difficulty": "Easy"}, {"slug": "vowels-of-all-substrings", "title": "Vowels of All Substrings", "difficulty": "Medium"}, {"slug": "find-the-median-of-the-uniqueness-array", "title": "Find the Median of the Uniqueness Array", "difficulty": "Hard"}]},
    {"number": 2263, "slug": "make-array-non-decreasing-or-non-increasing", "title": "Make Array Non-decreasing or Non-increasing", "difficulty": "Hard", "tags": ["Dynamic Programming", "Greedy"], "similar_problems": [{"slug": "non-decreasing-array", "title": "Non-decreasing Array", "difficulty": "Medium"}, {"slug": "make-array-strictly-increasing", "title": "Make Array Strictly Increasing", "difficulty": "Hard"}, {"slug": "minimum-operations-to-make-the-array-increasing", "title": "Minimum Operations to Make the Array Increasing", "difficulty": "Easy"}]},
    {"number": 2267, "slug": "check-if-there-is-a-valid-parentheses-string-path", "title": " Check if There Is a Valid Parentheses String Path", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Matrix"], "similar_problems": [{"slug": "check-if-there-is-a-valid-path-in-a-grid", "title": "Check if There is a Valid Path in a Grid", "difficulty": "Medium"}, {"slug": "check-if-a-parentheses-string-can-be-valid", "title": "Check if a Parentheses String Can Be Valid", "difficulty": "Medium"}]},
    {"number": 2272, "slug": "substring-with-largest-variance", "title": "Substring With Largest Variance", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "maximum-subarray", "title": "Maximum Subarray", "difficulty": "Medium"}]},
    {"number": 2276, "slug": "count-integers-in-intervals", "title": "Count Integers in Intervals", "difficulty": "Hard", "tags": ["Design", "Segment Tree", "Ordered Set"], "similar_problems": [{"slug": "merge-intervals", "title": "Merge Intervals", "difficulty": "Medium"}, {"slug": "insert-interval", "title": "Insert Interval", "difficulty": "Medium"}, {"slug": "data-stream-as-disjoint-intervals", "title": "Data Stream as Disjoint Intervals", "difficulty": "Hard"}, {"slug": "my-calendar-iii", "title": "My Calendar III", "difficulty": "Hard"}]},
    {"number": 2277, "slug": "closest-node-to-path-in-tree", "title": "Closest Node to Path in Tree", "difficulty": "Hard", "tags": ["Array", "Tree", "Depth-First Search", "Breadth-First Search"], "similar_problems": [{"slug": "count-number-of-possible-root-nodes", "title": "Count Number of Possible Root Nodes", "difficulty": "Hard"}, {"slug": "design-graph-with-shortest-path-calculator", "title": "Design Graph With Shortest Path Calculator", "difficulty": "Hard"}]},
    {"number": 2281, "slug": "sum-of-total-strength-of-wizards", "title": "Sum of Total Strength of Wizards", "difficulty": "Hard", "tags": ["Array", "Stack", "Monotonic Stack", "Prefix Sum"], "similar_problems": [{"slug": "next-greater-element-i", "title": "Next Greater Element I", "difficulty": "Easy"}, {"slug": "sum-of-subarray-minimums", "title": "Sum of Subarray Minimums", "difficulty": "Medium"}, {"slug": "number-of-visible-people-in-a-queue", "title": "Number of Visible People in a Queue", "difficulty": "Hard"}, {"slug": "sum-of-subarray-ranges", "title": "Sum of Subarray Ranges", "difficulty": "Medium"}]},
    {"number": 2286, "slug": "booking-concert-tickets-in-groups", "title": "Booking Concert Tickets in Groups", "difficulty": "Hard", "tags": ["Binary Search", "Design", "Binary Indexed Tree", "Segment Tree"], "similar_problems": [{"slug": "cinema-seat-allocation", "title": "Cinema Seat Allocation", "difficulty": "Medium"}, {"slug": "longest-increasing-subsequence-ii", "title": "Longest Increasing Subsequence II", "difficulty": "Hard"}]},
    {"number": 2290, "slug": "minimum-obstacle-removal-to-reach-corner", "title": "Minimum Obstacle Removal to Reach Corner", "difficulty": "Hard", "tags": ["Array", "Breadth-First Search", "Graph", "Heap (Priority Queue)", "Matrix", "Shortest Path"], "similar_problems": [{"slug": "shortest-path-in-a-grid-with-obstacles-elimination", "title": "Shortest Path in a Grid with Obstacles Elimination", "difficulty": "Hard"}]},
    {"number": 2296, "slug": "design-a-text-editor", "title": "Design a Text Editor", "difficulty": "Hard", "tags": ["Linked List", "String", "Stack", "Design", "Simulation", "Doubly-Linked List"], "similar_problems": []},
    {"number": 2301, "slug": "match-substring-after-replacement", "title": "Match Substring After Replacement", "difficulty": "Hard", "tags": ["Array", "Hash Table", "String", "String Matching"], "similar_problems": [{"slug": "design-add-and-search-words-data-structure", "title": "Design Add and Search Words Data Structure", "difficulty": "Medium"}, {"slug": "number-of-subarrays-that-match-a-pattern-ii", "title": "Number of Subarrays That Match a Pattern II", "difficulty": "Hard"}]},
    {"number": 2302, "slug": "count-subarrays-with-score-less-than-k", "title": "Count Subarrays With Score Less Than K", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Sliding Window", "Prefix Sum"], "similar_problems": [{"slug": "maximum-subarray", "title": "Maximum Subarray", "difficulty": "Medium"}, {"slug": "subarray-product-less-than-k", "title": "Subarray Product Less Than K", "difficulty": "Medium"}, {"slug": "binary-subarrays-with-sum", "title": "Binary Subarrays With Sum", "difficulty": "Medium"}]},
    {"number": 2306, "slug": "naming-a-company", "title": "Naming a Company", "difficulty": "Hard", "tags": ["Array", "Hash Table", "String", "Bit Manipulation", "Enumeration"], "similar_problems": []},
    {"number": 2307, "slug": "check-for-contradictions-in-equations", "title": "Check for Contradictions in Equations", "difficulty": "Hard", "tags": ["Array", "Depth-First Search", "Union Find", "Graph"], "similar_problems": [{"slug": "evaluate-division", "title": "Evaluate Division", "difficulty": "Medium"}]},
    {"number": 2312, "slug": "selling-pieces-of-wood", "title": "Selling Pieces of Wood", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Memoization"], "similar_problems": [{"slug": "tiling-a-rectangle-with-the-fewest-squares", "title": "Tiling a Rectangle with the Fewest Squares", "difficulty": "Hard"}, {"slug": "number-of-ways-of-cutting-a-pizza", "title": "Number of Ways of Cutting a Pizza", "difficulty": "Hard"}]},
    {"number": 2313, "slug": "minimum-flips-in-binary-tree-to-get-result", "title": "Minimum Flips in Binary Tree to Get Result", "difficulty": "Hard", "tags": ["Dynamic Programming", "Tree", "Depth-First Search", "Binary Tree"], "similar_problems": [{"slug": "check-if-two-expression-trees-are-equivalent", "title": "Check If Two Expression Trees are Equivalent", "difficulty": "Medium"}, {"slug": "design-an-expression-tree-with-evaluate-function", "title": "Design an Expression Tree With Evaluate Function", "difficulty": "Medium"}, {"slug": "evaluate-boolean-binary-tree", "title": "Evaluate Boolean Binary Tree", "difficulty": "Easy"}]},
    {"number": 2318, "slug": "number-of-distinct-roll-sequences", "title": "Number of Distinct Roll Sequences", "difficulty": "Hard", "tags": ["Dynamic Programming", "Memoization"], "similar_problems": [{"slug": "dice-roll-simulation", "title": "Dice Roll Simulation", "difficulty": "Hard"}, {"slug": "paint-house-iii", "title": "Paint House III", "difficulty": "Hard"}]},
    {"number": 2321, "slug": "maximum-score-of-spliced-array", "title": "Maximum Score Of Spliced Array", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "maximum-subarray", "title": "Maximum Subarray", "difficulty": "Medium"}]},
    {"number": 2322, "slug": "minimum-score-after-removals-on-a-tree", "title": "Minimum Score After Removals on a Tree", "difficulty": "Hard", "tags": ["Array", "Bit Manipulation", "Tree", "Depth-First Search"], "similar_problems": []},
    {"number": 2328, "slug": "number-of-increasing-paths-in-a-grid", "title": "Number of Increasing Paths in a Grid", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Depth-First Search", "Breadth-First Search", "Graph", "Topological Sort", "Memoization", "Matrix"], "similar_problems": [{"slug": "longest-increasing-path-in-a-matrix", "title": "Longest Increasing Path in a Matrix", "difficulty": "Hard"}, {"slug": "all-paths-from-source-to-target", "title": "All Paths From Source to Target", "difficulty": "Medium"}, {"slug": "maximum-strictly-increasing-cells-in-a-matrix", "title": "Maximum Strictly Increasing Cells in a Matrix", "difficulty": "Hard"}]},
    {"number": 2334, "slug": "subarray-with-elements-greater-than-varying-threshold", "title": "Subarray With Elements Greater Than Varying Threshold", "difficulty": "Hard", "tags": ["Array", "Stack", "Union Find", "Monotonic Stack"], "similar_problems": [{"slug": "maximum-subarray-min-product", "title": "Maximum Subarray Min-Product", "difficulty": "Medium"}, {"slug": "smallest-k-length-subsequence-with-occurrences-of-a-letter", "title": "Smallest K-Length Subsequence With Occurrences of a Letter", "difficulty": "Hard"}, {"slug": "k-divisible-elements-subarrays", "title": "K Divisible Elements Subarrays", "difficulty": "Medium"}]},
    {"number": 2338, "slug": "count-the-number-of-ideal-arrays", "title": "Count the Number of Ideal Arrays", "difficulty": "Hard", "tags": ["Math", "Dynamic Programming", "Combinatorics", "Number Theory"], "similar_problems": [{"slug": "count-ways-to-make-array-with-product", "title": "Count Ways to Make Array With Product", "difficulty": "Hard"}, {"slug": "count-the-number-of-beautiful-subarrays", "title": "Count the Number of Beautiful Subarrays", "difficulty": "Medium"}]},
    {"number": 2344, "slug": "minimum-deletions-to-make-array-divisible", "title": "Minimum Deletions to Make Array Divisible", "difficulty": "Hard", "tags": ["Array", "Math", "Sorting", "Heap (Priority Queue)", "Number Theory"], "similar_problems": [{"slug": "check-if-array-pairs-are-divisible-by-k", "title": "Check If Array Pairs Are Divisible by k", "difficulty": "Medium"}]},
    {"number": 2350, "slug": "shortest-impossible-sequence-of-rolls", "title": "Shortest Impossible Sequence of Rolls", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Greedy"], "similar_problems": []},
    {"number": 2354, "slug": "number-of-excellent-pairs", "title": "Number of Excellent Pairs", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Binary Search", "Bit Manipulation"], "similar_problems": [{"slug": "two-sum", "title": "Two Sum", "difficulty": "Easy"}]},
    {"number": 2355, "slug": "maximum-number-of-books-you-can-take", "title": "Maximum Number of Books You Can Take", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Stack", "Monotonic Stack"], "similar_problems": [{"slug": "longest-increasing-subsequence", "title": "Longest Increasing Subsequence", "difficulty": "Medium"}, {"slug": "maximum-ascending-subarray-sum", "title": "Maximum Ascending Subarray Sum", "difficulty": "Easy"}, {"slug": "beautiful-towers-ii", "title": "Beautiful Towers II", "difficulty": "Medium"}, {"slug": "beautiful-towers-i", "title": "Beautiful Towers I", "difficulty": "Medium"}]},
    {"number": 2360, "slug": "longest-cycle-in-a-graph", "title": "Longest Cycle in a Graph", "difficulty": "Hard", "tags": ["Depth-First Search", "Breadth-First Search", "Graph", "Topological Sort"], "similar_problems": [{"slug": "strange-printer-ii", "title": "Strange Printer II", "difficulty": "Hard"}, {"slug": "minimum-number-of-operations-to-sort-a-binary-tree-by-level", "title": "Minimum Number of Operations to Sort a Binary Tree by Level", "difficulty": "Medium"}, {"slug": "shortest-cycle-in-a-graph", "title": "Shortest Cycle in a Graph", "difficulty": "Hard"}]},
    {"number": 2361, "slug": "minimum-costs-using-the-train-line", "title": "Minimum Costs Using the Train Line", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "bus-routes", "title": "Bus Routes", "difficulty": "Hard"}, {"slug": "distance-between-bus-stops", "title": "Distance Between Bus Stops", "difficulty": "Easy"}]},
    {"number": 2362, "slug": "generate-the-invoice", "title": "Generate the Invoice", "difficulty": "Hard", "tags": ["Database"], "similar_problems": []},
    {"number": 2366, "slug": "minimum-replacements-to-sort-the-array", "title": "Minimum Replacements to Sort the Array", "difficulty": "Hard", "tags": ["Array", "Math", "Greedy"], "similar_problems": [{"slug": "minimum-operations-to-make-the-array-increasing", "title": "Minimum Operations to Make the Array Increasing", "difficulty": "Easy"}]},
    {"number": 2371, "slug": "minimize-maximum-value-in-a-grid", "title": "Minimize Maximum Value in a Grid", "difficulty": "Hard", "tags": ["Array", "Union Find", "Graph", "Topological Sort", "Sorting", "Matrix"], "similar_problems": [{"slug": "candy", "title": "Candy", "difficulty": "Hard"}]},
    {"number": 2376, "slug": "count-special-integers", "title": "Count Special Integers", "difficulty": "Hard", "tags": ["Math", "Dynamic Programming"], "similar_problems": [{"slug": "count-numbers-with-unique-digits", "title": "Count Numbers with Unique Digits", "difficulty": "Medium"}, {"slug": "k-th-smallest-in-lexicographical-order", "title": "K-th Smallest in Lexicographical Order", "difficulty": "Hard"}]},
    {"number": 2382, "slug": "maximum-segment-sum-after-removals", "title": "Maximum Segment Sum After Removals", "difficulty": "Hard", "tags": ["Array", "Union Find", "Prefix Sum", "Ordered Set"], "similar_problems": []},
    {"number": 2386, "slug": "find-the-k-sum-of-an-array", "title": "Find the K-Sum of an Array", "difficulty": "Hard", "tags": ["Array", "Sorting", "Heap (Priority Queue)"], "similar_problems": []},
    {"number": 2392, "slug": "build-a-matrix-with-conditions", "title": "Build a Matrix With Conditions", "difficulty": "Hard", "tags": ["Array", "Graph", "Topological Sort", "Matrix"], "similar_problems": [{"slug": "course-schedule", "title": "Course Schedule", "difficulty": "Medium"}, {"slug": "course-schedule-ii", "title": "Course Schedule II", "difficulty": "Medium"}, {"slug": "find-eventual-safe-states", "title": "Find Eventual Safe States", "difficulty": "Medium"}, {"slug": "loud-and-rich", "title": "Loud and Rich", "difficulty": "Medium"}]},
    {"number": 2398, "slug": "maximum-number-of-robots-within-budget", "title": "Maximum Number of Robots Within Budget", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Queue", "Sliding Window", "Heap (Priority Queue)", "Prefix Sum", "Monotonic Queue"], "similar_problems": [{"slug": "sliding-window-maximum", "title": "Sliding Window Maximum", "difficulty": "Hard"}, {"slug": "kth-smallest-product-of-two-sorted-arrays", "title": "Kth Smallest Product of Two Sorted Arrays", "difficulty": "Hard"}, {"slug": "maximum-number-of-tasks-you-can-assign", "title": "Maximum Number of Tasks You Can Assign", "difficulty": "Hard"}, {"slug": "minimized-maximum-of-products-distributed-to-any-store", "title": "Minimized Maximum of Products Distributed to Any Store", "difficulty": "Medium"}, {"slug": "minimum-time-to-complete-trips", "title": "Minimum Time to Complete Trips", "difficulty": "Medium"}]},
    {"number": 2402, "slug": "meeting-rooms-iii", "title": "Meeting Rooms III", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Sorting", "Heap (Priority Queue)", "Simulation"], "similar_problems": [{"slug": "meeting-rooms", "title": "Meeting Rooms", "difficulty": "Easy"}, {"slug": "meeting-rooms-ii", "title": "Meeting Rooms II", "difficulty": "Medium"}, {"slug": "maximum-number-of-events-that-can-be-attended", "title": "Maximum Number of Events That Can Be Attended", "difficulty": "Medium"}, {"slug": "find-servers-that-handled-most-number-of-requests", "title": "Find Servers That Handled Most Number of Requests", "difficulty": "Hard"}, {"slug": "maximum-number-of-events-that-can-be-attended-ii", "title": "Maximum Number of Events That Can Be Attended II", "difficulty": "Hard"}]},
    {"number": 2403, "slug": "minimum-time-to-kill-all-monsters", "title": "Minimum Time to Kill All Monsters", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Bit Manipulation", "Bitmask"], "similar_problems": [{"slug": "closest-room", "title": "Closest Room", "difficulty": "Hard"}, {"slug": "eliminate-maximum-number-of-monsters", "title": "Eliminate Maximum Number of Monsters", "difficulty": "Medium"}, {"slug": "number-of-ways-to-build-sturdy-brick-wall", "title": "Number of Ways to Build Sturdy Brick Wall", "difficulty": "Medium"}]},
    {"number": 2407, "slug": "longest-increasing-subsequence-ii", "title": "Longest Increasing Subsequence II", "difficulty": "Hard", "tags": ["Array", "Divide and Conquer", "Dynamic Programming", "Binary Indexed Tree", "Segment Tree", "Queue", "Monotonic Queue"], "similar_problems": [{"slug": "longest-increasing-subsequence", "title": "Longest Increasing Subsequence", "difficulty": "Medium"}, {"slug": "number-of-longest-increasing-subsequence", "title": "Number of Longest Increasing Subsequence", "difficulty": "Medium"}, {"slug": "longest-continuous-increasing-subsequence", "title": "Longest Continuous Increasing Subsequence", "difficulty": "Easy"}, {"slug": "longest-substring-of-one-repeating-character", "title": "Longest Substring of One Repeating Character", "difficulty": "Hard"}, {"slug": "booking-concert-tickets-in-groups", "title": "Booking Concert Tickets in Groups", "difficulty": "Hard"}, {"slug": "longest-subsequence-with-decreasing-adjacent-difference", "title": "Longest Subsequence With Decreasing Adjacent Difference", "difficulty": "Medium"}]},
    {"number": 2412, "slug": "minimum-money-required-before-transactions", "title": "Minimum Money Required Before Transactions", "difficulty": "Hard", "tags": ["Array", "Greedy", "Sorting"], "similar_problems": []},
    {"number": 2416, "slug": "sum-of-prefix-scores-of-strings", "title": "Sum of Prefix Scores of Strings", "difficulty": "Hard", "tags": ["Array", "String", "Trie", "Counting"], "similar_problems": [{"slug": "design-add-and-search-words-data-structure", "title": "Design Add and Search Words Data Structure", "difficulty": "Medium"}, {"slug": "maximum-xor-of-two-numbers-in-an-array", "title": "Maximum XOR of Two Numbers in an Array", "difficulty": "Medium"}, {"slug": "map-sum-pairs", "title": "Map Sum Pairs", "difficulty": "Medium"}]},
    {"number": 2421, "slug": "number-of-good-paths", "title": "Number of Good Paths", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Tree", "Union Find", "Graph", "Sorting"], "similar_problems": [{"slug": "checking-existence-of-edge-length-limited-paths", "title": "Checking Existence of Edge Length Limited Paths", "difficulty": "Hard"}, {"slug": "checking-existence-of-edge-length-limited-paths-ii", "title": "Checking Existence of Edge Length Limited Paths II", "difficulty": "Hard"}, {"slug": "longest-nice-substring", "title": "Longest Nice Substring", "difficulty": "Easy"}, {"slug": "count-good-triplets-in-an-array", "title": "Count Good Triplets in an Array", "difficulty": "Hard"}, {"slug": "count-pairs-of-similar-strings", "title": "Count Pairs Of Similar Strings", "difficulty": "Easy"}]},
    {"number": 2426, "slug": "number-of-pairs-satisfying-inequality", "title": "Number of Pairs Satisfying Inequality", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Divide and Conquer", "Binary Indexed Tree", "Segment Tree", "Merge Sort", "Ordered Set"], "similar_problems": [{"slug": "k-diff-pairs-in-an-array", "title": "K-diff Pairs in an Array", "difficulty": "Medium"}, {"slug": "count-nice-pairs-in-an-array", "title": "Count Nice Pairs in an Array", "difficulty": "Medium"}, {"slug": "count-number-of-bad-pairs", "title": "Count Number of Bad Pairs", "difficulty": "Medium"}, {"slug": "maximum-balanced-subsequence-sum", "title": "Maximum Balanced Subsequence Sum", "difficulty": "Hard"}]},
    {"number": 2430, "slug": "maximum-deletions-on-a-string", "title": "Maximum Deletions on a String", "difficulty": "Hard", "tags": ["String", "Dynamic Programming", "Rolling Hash", "String Matching", "Hash Function"], "similar_problems": [{"slug": "shortest-palindrome", "title": "Shortest Palindrome", "difficulty": "Hard"}, {"slug": "longest-happy-prefix", "title": "Longest Happy Prefix", "difficulty": "Hard"}, {"slug": "remove-all-occurrences-of-a-substring", "title": "Remove All Occurrences of a Substring", "difficulty": "Medium"}]},
    {"number": 2435, "slug": "paths-in-matrix-whose-sum-is-divisible-by-k", "title": "Paths in Matrix Whose Sum Is Divisible by K", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Matrix"], "similar_problems": [{"slug": "unique-paths", "title": "Unique Paths", "difficulty": "Medium"}, {"slug": "unique-paths-ii", "title": "Unique Paths II", "difficulty": "Medium"}, {"slug": "minimum-path-sum", "title": "Minimum Path Sum", "difficulty": "Medium"}, {"slug": "dungeon-game", "title": "Dungeon Game", "difficulty": "Hard"}, {"slug": "cherry-pickup", "title": "Cherry Pickup", "difficulty": "Hard"}, {"slug": "shortest-path-in-binary-matrix", "title": "Shortest Path in Binary Matrix", "difficulty": "Medium"}, {"slug": "minimum-cost-homecoming-of-a-robot-in-a-grid", "title": "Minimum Cost Homecoming of a Robot in a Grid", "difficulty": "Medium"}, {"slug": "check-if-there-is-a-path-with-equal-number-of-0s-and-1s", "title": "Check if There is a Path With Equal Number of 0's And 1's", "difficulty": "Medium"}]},
    {"number": 2440, "slug": "create-components-with-same-value", "title": "Create Components With Same Value", "difficulty": "Hard", "tags": ["Array", "Math", "Tree", "Depth-First Search", "Enumeration"], "similar_problems": [{"slug": "equal-tree-partition", "title": "Equal Tree Partition", "difficulty": "Medium"}, {"slug": "maximum-number-of-k-divisible-components", "title": "Maximum Number of K-Divisible Components", "difficulty": "Hard"}]},
    {"number": 2444, "slug": "count-subarrays-with-fixed-bounds", "title": "Count Subarrays With Fixed Bounds", "difficulty": "Hard", "tags": ["Array", "Queue", "Sliding Window", "Monotonic Queue"], "similar_problems": [{"slug": "count-number-of-nice-subarrays", "title": "Count Number of Nice Subarrays", "difficulty": "Medium"}, {"slug": "longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit", "title": "Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit", "difficulty": "Medium"}, {"slug": "find-the-number-of-subarrays-where-boundary-elements-are-maximum", "title": "Find the Number of Subarrays Where Boundary Elements Are Maximum", "difficulty": "Hard"}]},
    {"number": 2448, "slug": "minimum-cost-to-make-array-equal", "title": "Minimum Cost to Make Array Equal", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Greedy", "Sorting", "Prefix Sum"], "similar_problems": [{"slug": "minimum-moves-to-equal-array-elements-ii", "title": "Minimum Moves to Equal Array Elements II", "difficulty": "Medium"}, {"slug": "maximum-product-of-the-length-of-two-palindromic-substrings", "title": "Maximum Product of the Length of Two Palindromic Substrings", "difficulty": "Hard"}, {"slug": "minimum-amount-of-time-to-fill-cups", "title": "Minimum Amount of Time to Fill Cups", "difficulty": "Easy"}, {"slug": "minimum-operations-to-make-all-array-elements-equal", "title": "Minimum Operations to Make All Array Elements Equal", "difficulty": "Medium"}, {"slug": "minimum-cost-to-make-array-equalindromic", "title": "Minimum Cost to Make Array Equalindromic", "difficulty": "Medium"}]},
    {"number": 2449, "slug": "minimum-number-of-operations-to-make-arrays-similar", "title": "Minimum Number of Operations to Make Arrays Similar", "difficulty": "Hard", "tags": ["Array", "Greedy", "Sorting"], "similar_problems": [{"slug": "minimum-operations-to-make-array-equal", "title": "Minimum Operations to Make Array Equal", "difficulty": "Medium"}, {"slug": "minimum-operations-to-make-array-equal-ii", "title": "Minimum Operations to Make Array Equal II", "difficulty": "Medium"}, {"slug": "rearranging-fruits", "title": "Rearranging Fruits", "difficulty": "Hard"}]},
    {"number": 2454, "slug": "next-greater-element-iv", "title": "Next Greater Element IV", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Stack", "Sorting", "Heap (Priority Queue)", "Monotonic Stack"], "similar_problems": [{"slug": "next-greater-element-i", "title": "Next Greater Element I", "difficulty": "Easy"}, {"slug": "replace-elements-with-greatest-element-on-right-side", "title": "Replace Elements with Greatest Element on Right Side", "difficulty": "Easy"}, {"slug": "apply-operations-to-maximize-score", "title": "Apply Operations to Maximize Score", "difficulty": "Hard"}]},
    {"number": 2458, "slug": "height-of-binary-tree-after-subtree-removal-queries", "title": "Height of Binary Tree After Subtree Removal Queries", "difficulty": "Hard", "tags": ["Array", "Tree", "Depth-First Search", "Breadth-First Search", "Binary Tree"], "similar_problems": [{"slug": "maximum-depth-of-binary-tree", "title": "Maximum Depth of Binary Tree", "difficulty": "Easy"}]},
    {"number": 2459, "slug": "sort-array-by-moving-items-to-empty-space", "title": "Sort Array by Moving Items to Empty Space", "difficulty": "Hard", "tags": ["Array", "Greedy", "Sorting"], "similar_problems": [{"slug": "course-schedule-ii", "title": "Course Schedule II", "difficulty": "Medium"}, {"slug": "strange-printer-ii", "title": "Strange Printer II", "difficulty": "Hard"}, {"slug": "create-sorted-array-through-instructions", "title": "Create Sorted Array through Instructions", "difficulty": "Hard"}]},
    {"number": 2463, "slug": "minimum-total-distance-traveled", "title": "Minimum Total Distance Traveled", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Sorting"], "similar_problems": [{"slug": "capacity-to-ship-packages-within-d-days", "title": "Capacity To Ship Packages Within D Days", "difficulty": "Medium"}, {"slug": "number-of-ways-to-earn-points", "title": "Number of Ways to Earn Points", "difficulty": "Hard"}]},
    {"number": 2468, "slug": "split-message-based-on-limit", "title": "Split Message Based on Limit", "difficulty": "Hard", "tags": ["String", "Binary Search", "Enumeration"], "similar_problems": [{"slug": "text-justification", "title": "Text Justification", "difficulty": "Hard"}, {"slug": "search-a-2d-matrix", "title": "Search a 2D Matrix", "difficulty": "Medium"}, {"slug": "sentence-screen-fitting", "title": "Sentence Screen Fitting", "difficulty": "Medium"}]},
    {"number": 2472, "slug": "maximum-number-of-non-overlapping-palindrome-substrings", "title": "Maximum Number of Non-overlapping Palindrome Substrings", "difficulty": "Hard", "tags": ["Two Pointers", "String", "Dynamic Programming", "Greedy"], "similar_problems": [{"slug": "longest-palindromic-substring", "title": "Longest Palindromic Substring", "difficulty": "Medium"}, {"slug": "palindrome-partitioning", "title": "Palindrome Partitioning", "difficulty": "Medium"}, {"slug": "palindrome-partitioning-ii", "title": "Palindrome Partitioning II", "difficulty": "Hard"}, {"slug": "palindrome-partitioning-iii", "title": "Palindrome Partitioning III", "difficulty": "Hard"}, {"slug": "maximum-number-of-non-overlapping-substrings", "title": "Maximum Number of Non-Overlapping Substrings", "difficulty": "Hard"}, {"slug": "palindrome-partitioning-iv", "title": "Palindrome Partitioning IV", "difficulty": "Hard"}]},
    {"number": 2474, "slug": "customers-with-strictly-increasing-purchases", "title": "Customers With Strictly Increasing Purchases", "difficulty": "Hard", "tags": ["Database"], "similar_problems": [{"slug": "report-contiguous-dates", "title": "Report Contiguous Dates", "difficulty": "Hard"}, {"slug": "find-the-start-and-end-number-of-continuous-ranges", "title": "Find the Start and End Number of Continuous Ranges", "difficulty": "Medium"}]},
    {"number": 2478, "slug": "number-of-beautiful-partitions", "title": "Number of Beautiful Partitions", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "restore-the-array", "title": "Restore The Array", "difficulty": "Hard"}, {"slug": "number-of-ways-to-separate-numbers", "title": "Number of Ways to Separate Numbers", "difficulty": "Hard"}]},
    {"number": 2479, "slug": "maximum-xor-of-two-non-overlapping-subtrees", "title": "Maximum XOR of Two Non-Overlapping Subtrees", "difficulty": "Hard", "tags": ["Tree", "Depth-First Search", "Graph", "Trie"], "similar_problems": []},
    {"number": 2484, "slug": "count-palindromic-subsequences", "title": "Count Palindromic Subsequences", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "arithmetic-slices-ii-subsequence", "title": "Arithmetic Slices II - Subsequence", "difficulty": "Hard"}, {"slug": "count-different-palindromic-subsequences", "title": "Count Different Palindromic Subsequences", "difficulty": "Hard"}, {"slug": "unique-length-3-palindromic-subsequences", "title": "Unique Length-3 Palindromic Subsequences", "difficulty": "Medium"}]},
    {"number": 2488, "slug": "count-subarrays-with-median-k", "title": "Count Subarrays With Median K", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Prefix Sum"], "similar_problems": [{"slug": "number-of-subarrays-with-bounded-maximum", "title": "Number of Subarrays with Bounded Maximum", "difficulty": "Medium"}, {"slug": "number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold", "title": "Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold", "difficulty": "Medium"}, {"slug": "sum-of-imbalance-numbers-of-all-subarrays", "title": "Sum of Imbalance Numbers of All Subarrays", "difficulty": "Hard"}]},
    {"number": 2493, "slug": "divide-nodes-into-the-maximum-number-of-groups", "title": "Divide Nodes Into the Maximum Number of Groups", "difficulty": "Hard", "tags": ["Depth-First Search", "Breadth-First Search", "Union Find", "Graph"], "similar_problems": [{"slug": "binary-tree-level-order-traversal", "title": "Binary Tree Level Order Traversal", "difficulty": "Medium"}, {"slug": "is-graph-bipartite", "title": "Is Graph Bipartite?", "difficulty": "Medium"}, {"slug": "shortest-cycle-in-a-graph", "title": "Shortest Cycle in a Graph", "difficulty": "Hard"}]},
    {"number": 2494, "slug": "merge-overlapping-events-in-the-same-hall", "title": "Merge Overlapping Events in the Same Hall", "difficulty": "Hard", "tags": ["Database"], "similar_problems": []},
    {"number": 2499, "slug": "minimum-total-cost-to-make-arrays-unequal", "title": "Minimum Total Cost to Make Arrays Unequal", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Greedy", "Counting"], "similar_problems": []},
    {"number": 2503, "slug": "maximum-number-of-points-from-grid-queries", "title": "Maximum Number of Points From Grid Queries", "difficulty": "Hard", "tags": ["Array", "Two Pointers", "Breadth-First Search", "Union Find", "Sorting", "Heap (Priority Queue)", "Matrix"], "similar_problems": [{"slug": "trapping-rain-water-ii", "title": "Trapping Rain Water II", "difficulty": "Hard"}, {"slug": "escape-the-spreading-fire", "title": "Escape the Spreading Fire", "difficulty": "Hard"}]},
    {"number": 2508, "slug": "add-edges-to-make-degrees-of-all-nodes-even", "title": "Add Edges to Make Degrees of All Nodes Even", "difficulty": "Hard", "tags": ["Hash Table", "Graph"], "similar_problems": [{"slug": "minimum-degree-of-a-connected-trio-in-a-graph", "title": "Minimum Degree of a Connected Trio in a Graph", "difficulty": "Hard"}]},
    {"number": 2509, "slug": "cycle-length-queries-in-a-tree", "title": "Cycle Length Queries in a Tree", "difficulty": "Hard", "tags": ["Array", "Tree", "Binary Tree"], "similar_problems": [{"slug": "populating-next-right-pointers-in-each-node", "title": "Populating Next Right Pointers in Each Node", "difficulty": "Medium"}, {"slug": "lowest-common-ancestor-of-a-binary-tree", "title": "Lowest Common Ancestor of a Binary Tree", "difficulty": "Medium"}, {"slug": "path-in-zigzag-labelled-binary-tree", "title": "Path In Zigzag Labelled Binary Tree", "difficulty": "Medium"}]},
    {"number": 2514, "slug": "count-anagrams", "title": "Count Anagrams", "difficulty": "Hard", "tags": ["Hash Table", "Math", "String", "Combinatorics", "Counting"], "similar_problems": [{"slug": "group-anagrams", "title": "Group Anagrams", "difficulty": "Medium"}, {"slug": "count-ways-to-build-rooms-in-an-ant-colony", "title": "Count Ways to Build Rooms in an Ant Colony", "difficulty": "Hard"}]},
    {"number": 2518, "slug": "number-of-great-partitions", "title": "Number of Great Partitions", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "palindrome-partitioning-ii", "title": "Palindrome Partitioning II", "difficulty": "Hard"}, {"slug": "partition-equal-subset-sum", "title": "Partition Equal Subset Sum", "difficulty": "Medium"}, {"slug": "find-the-punishment-number-of-an-integer", "title": "Find the Punishment Number of an Integer", "difficulty": "Medium"}, {"slug": "count-partitions-with-max-min-difference-at-most-k", "title": "Count Partitions With Max-Min Difference at Most K", "difficulty": "Medium"}]},
    {"number": 2519, "slug": "count-the-number-of-k-big-indices", "title": "Count the Number of K-Big Indices", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Divide and Conquer", "Binary Indexed Tree", "Segment Tree", "Merge Sort", "Ordered Set"], "similar_problems": [{"slug": "count-of-smaller-numbers-after-self", "title": "Count of Smaller Numbers After Self", "difficulty": "Hard"}, {"slug": "find-all-good-indices", "title": "Find All Good Indices", "difficulty": "Medium"}]},
    {"number": 2524, "slug": "maximum-frequency-score-of-a-subarray", "title": "Maximum Frequency Score of a Subarray", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Math", "Stack", "Sliding Window"], "similar_problems": []},
    {"number": 2528, "slug": "maximize-the-minimum-powered-city", "title": "Maximize the Minimum Powered City", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Greedy", "Queue", "Sliding Window", "Prefix Sum"], "similar_problems": [{"slug": "maximum-number-of-tasks-you-can-assign", "title": "Maximum Number of Tasks You Can Assign", "difficulty": "Hard"}]},
    {"number": 2532, "slug": "time-to-cross-a-bridge", "title": "Time to Cross a Bridge", "difficulty": "Hard", "tags": ["Array", "Heap (Priority Queue)", "Simulation"], "similar_problems": [{"slug": "the-latest-time-to-catch-a-bus", "title": "The Latest Time to Catch a Bus", "difficulty": "Medium"}, {"slug": "total-cost-to-hire-k-workers", "title": "Total Cost to Hire K Workers", "difficulty": "Medium"}]},
    {"number": 2534, "slug": "time-taken-to-cross-the-door", "title": "Time Taken to Cross the Door", "difficulty": "Hard", "tags": ["Array", "Queue", "Simulation"], "similar_problems": [{"slug": "the-latest-time-to-catch-a-bus", "title": "The Latest Time to Catch a Bus", "difficulty": "Medium"}]},
    {"number": 2538, "slug": "difference-between-maximum-and-minimum-price-sum", "title": "Difference Between Maximum and Minimum Price Sum", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Tree", "Depth-First Search"], "similar_problems": [{"slug": "binary-tree-maximum-path-sum", "title": "Binary Tree Maximum Path Sum", "difficulty": "Hard"}]},
    {"number": 2543, "slug": "check-if-point-is-reachable", "title": "Check if Point Is Reachable", "difficulty": "Hard", "tags": ["Math", "Number Theory"], "similar_problems": [{"slug": "reaching-points", "title": "Reaching Points", "difficulty": "Hard"}, {"slug": "check-if-the-rectangle-corner-is-reachable", "title": "Check if the Rectangle Corner Is Reachable", "difficulty": "Hard"}]},
    {"number": 2547, "slug": "minimum-cost-to-split-an-array", "title": "Minimum Cost to Split an Array", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Dynamic Programming", "Counting"], "similar_problems": [{"slug": "coin-change", "title": "Coin Change", "difficulty": "Medium"}, {"slug": "split-array-largest-sum", "title": "Split Array Largest Sum", "difficulty": "Hard"}, {"slug": "divide-an-array-into-subarrays-with-minimum-cost-ii", "title": "Divide an Array Into Subarrays With Minimum Cost II", "difficulty": "Hard"}, {"slug": "minimum-sum-of-values-by-dividing-array", "title": "Minimum Sum of Values by Dividing Array", "difficulty": "Hard"}, {"slug": "minimum-cost-to-divide-array-into-subarrays", "title": "Minimum Cost to Divide Array Into Subarrays", "difficulty": "Hard"}]},
    {"number": 2551, "slug": "put-marbles-in-bags", "title": "Put Marbles in Bags", "difficulty": "Hard", "tags": ["Array", "Greedy", "Sorting", "Heap (Priority Queue)"], "similar_problems": []},
    {"number": 2552, "slug": "count-increasing-quadruplets", "title": "Count Increasing Quadruplets", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Binary Indexed Tree", "Enumeration", "Prefix Sum"], "similar_problems": [{"slug": "increasing-triplet-subsequence", "title": "Increasing Triplet Subsequence", "difficulty": "Medium"}, {"slug": "count-special-quadruplets", "title": "Count Special Quadruplets", "difficulty": "Easy"}, {"slug": "count-good-triplets-in-an-array", "title": "Count Good Triplets in an Array", "difficulty": "Hard"}]},
    {"number": 2561, "slug": "rearranging-fruits", "title": "Rearranging Fruits", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Greedy", "Sort"], "similar_problems": [{"slug": "the-latest-time-to-catch-a-bus", "title": "The Latest Time to Catch a Bus", "difficulty": "Medium"}, {"slug": "minimum-number-of-operations-to-make-arrays-similar", "title": "Minimum Number of Operations to Make Arrays Similar", "difficulty": "Hard"}]},
    {"number": 2565, "slug": "subsequence-with-the-minimum-score", "title": "Subsequence With the Minimum Score", "difficulty": "Hard", "tags": ["Two Pointers", "String", "Binary Search"], "similar_problems": [{"slug": "longest-common-subsequence", "title": "Longest Common Subsequence", "difficulty": "Medium"}]},
    {"number": 2569, "slug": "handling-sum-queries-after-update", "title": "Handling Sum Queries After Update", "difficulty": "Hard", "tags": ["Array", "Segment Tree"], "similar_problems": []},
    {"number": 2573, "slug": "find-the-string-with-lcp", "title": "Find the String with LCP", "difficulty": "Hard", "tags": ["Array", "String", "Dynamic Programming", "Greedy", "Union Find", "Matrix"], "similar_problems": []},
    {"number": 2577, "slug": "minimum-time-to-visit-a-cell-in-a-grid", "title": "Minimum Time to Visit a Cell In a Grid", "difficulty": "Hard", "tags": ["Array", "Breadth-First Search", "Graph", "Heap (Priority Queue)", "Matrix", "Shortest Path"], "similar_problems": [{"slug": "find-minimum-time-to-reach-last-room-i", "title": "Find Minimum Time to Reach Last Room I", "difficulty": "Medium"}, {"slug": "find-minimum-time-to-reach-last-room-ii", "title": "Find Minimum Time to Reach Last Room II", "difficulty": "Medium"}]},
    {"number": 2581, "slug": "count-number-of-possible-root-nodes", "title": "Count Number of Possible Root Nodes", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Dynamic Programming", "Tree", "Depth-First Search"], "similar_problems": [{"slug": "closest-node-to-path-in-tree", "title": "Closest Node to Path in Tree", "difficulty": "Hard"}]},
    {"number": 2584, "slug": "split-the-array-to-make-coprime-products", "title": "Split the Array to Make Coprime Products", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Math", "Number Theory"], "similar_problems": [{"slug": "replace-non-coprime-numbers-in-array", "title": "Replace Non-Coprime Numbers in Array", "difficulty": "Hard"}]},
    {"number": 2585, "slug": "number-of-ways-to-earn-points", "title": "Number of Ways to Earn Points", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "coin-change-ii", "title": "Coin Change II", "difficulty": "Medium"}, {"slug": "minimum-total-distance-traveled", "title": "Minimum Total Distance Traveled", "difficulty": "Hard"}]},
    {"number": 2589, "slug": "minimum-time-to-complete-all-tasks", "title": "Minimum Time to Complete All Tasks", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Stack", "Greedy", "Sorting"], "similar_problems": [{"slug": "single-threaded-cpu", "title": "Single-Threaded CPU", "difficulty": "Medium"}]},
    {"number": 2603, "slug": "collect-coins-in-a-tree", "title": "Collect Coins in a Tree", "difficulty": "Hard", "tags": ["Array", "Tree", "Graph", "Topological Sort"], "similar_problems": [{"slug": "minimum-height-trees", "title": "Minimum Height Trees", "difficulty": "Medium"}, {"slug": "sum-of-distances-in-tree", "title": "Sum of Distances in Tree", "difficulty": "Hard"}, {"slug": "maximum-score-after-applying-operations-on-a-tree", "title": "Maximum Score After Applying Operations on a Tree", "difficulty": "Medium"}, {"slug": "find-number-of-coins-to-place-in-tree-nodes", "title": "Find Number of Coins to Place in Tree Nodes", "difficulty": "Hard"}]},
    {"number": 2604, "slug": "minimum-time-to-eat-all-grains", "title": "Minimum Time to Eat All Grains", "difficulty": "Hard", "tags": ["Array", "Two Pointers", "Binary Search", "Sorting"], "similar_problems": [{"slug": "kth-smallest-number-in-multiplication-table", "title": "Kth Smallest Number in Multiplication Table", "difficulty": "Hard"}]},
    {"number": 2608, "slug": "shortest-cycle-in-a-graph", "title": "Shortest Cycle in a Graph", "difficulty": "Hard", "tags": ["Breadth-First Search", "Graph"], "similar_problems": [{"slug": "redundant-connection", "title": "Redundant Connection", "difficulty": "Medium"}, {"slug": "longest-cycle-in-a-graph", "title": "Longest Cycle in a Graph", "difficulty": "Hard"}, {"slug": "divide-nodes-into-the-maximum-number-of-groups", "title": "Divide Nodes Into the Maximum Number of Groups", "difficulty": "Hard"}]},
    {"number": 2612, "slug": "minimum-reverse-operations", "title": "Minimum Reverse Operations", "difficulty": "Hard", "tags": ["Array", "Breadth-First Search", "Ordered Set"], "similar_problems": []},
    {"number": 2613, "slug": "beautiful-pairs", "title": "Beautiful Pairs", "difficulty": "Hard", "tags": ["Array", "Math", "Divide and Conquer", "Geometry", "Sorting", "Ordered Set"], "similar_problems": []},
    {"number": 2617, "slug": "minimum-number-of-visited-cells-in-a-grid", "title": "Minimum Number of Visited Cells in a Grid", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Stack", "Breadth-First Search", "Union Find", "Heap (Priority Queue)", "Matrix", "Monotonic Stack"], "similar_problems": [{"slug": "jump-game-ii", "title": "Jump Game II", "difficulty": "Medium"}, {"slug": "jump-game", "title": "Jump Game", "difficulty": "Medium"}]},
    {"number": 2630, "slug": "memoize-ii", "title": "Memoize II", "difficulty": "Hard", "tags": [], "similar_problems": [{"slug": "memoize", "title": "Memoize", "difficulty": "Medium"}, {"slug": "curry", "title": "Curry", "difficulty": "Medium"}]},
    {"number": 2642, "slug": "design-graph-with-shortest-path-calculator", "title": "Design Graph With Shortest Path Calculator", "difficulty": "Hard", "tags": ["Graph", "Design", "Heap (Priority Queue)", "Shortest Path"], "similar_problems": [{"slug": "number-of-restricted-paths-from-first-to-last-node", "title": "Number of Restricted Paths From First to Last Node", "difficulty": "Medium"}, {"slug": "closest-node-to-path-in-tree", "title": "Closest Node to Path in Tree", "difficulty": "Hard"}]},
    {"number": 2646, "slug": "minimize-the-total-price-of-the-trips", "title": "Minimize the Total Price of the Trips", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Tree", "Depth-First Search", "Graph"], "similar_problems": []},
    {"number": 2647, "slug": "color-the-triangle-red", "title": "Color the Triangle Red", "difficulty": "Hard", "tags": ["Array", "Math"], "similar_problems": []},
    {"number": 2650, "slug": "design-cancellable-function", "title": "Design Cancellable Function", "difficulty": "Hard", "tags": [], "similar_problems": [{"slug": "generate-fibonacci-sequence", "title": "Generate Fibonacci Sequence", "difficulty": "Easy"}, {"slug": "nested-array-generator", "title": "Nested Array Generator", "difficulty": "Medium"}]},
    {"number": 2659, "slug": "make-array-empty", "title": "Make Array Empty", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Greedy", "Binary Indexed Tree", "Segment Tree", "Sorting", "Ordered Set"], "similar_problems": []},
    {"number": 2663, "slug": "lexicographically-smallest-beautiful-string", "title": "Lexicographically Smallest Beautiful String", "difficulty": "Hard", "tags": ["String", "Greedy"], "similar_problems": [{"slug": "smallest-string-with-swaps", "title": "Smallest String With Swaps", "difficulty": "Medium"}, {"slug": "find-palindrome-with-fixed-length", "title": "Find Palindrome With Fixed Length", "difficulty": "Medium"}]},
    {"number": 2675, "slug": "array-of-objects-to-matrix", "title": "Array of Objects to Matrix", "difficulty": "Hard", "tags": [], "similar_problems": [{"slug": "json-deep-equal", "title": "JSON Deep Equal", "difficulty": "Medium"}, {"slug": "convert-object-to-json-string", "title": "Convert Object to JSON String", "difficulty": "Medium"}]},
    {"number": 2681, "slug": "power-of-heroes", "title": "Power of Heroes", "difficulty": "Hard", "tags": ["Array", "Math", "Dynamic Programming", "Sorting", "Prefix Sum"], "similar_problems": []},
    {"number": 2691, "slug": "immutability-helper", "title": "Immutability Helper", "difficulty": "Hard", "tags": [], "similar_problems": [{"slug": "infinite-method-object", "title": "Infinite Method Object", "difficulty": "Easy"}, {"slug": "make-object-immutable", "title": "Make Object Immutable", "difficulty": "Medium"}]},
    {"number": 2699, "slug": "modify-graph-edge-weights", "title": "Modify Graph Edge Weights", "difficulty": "Hard", "tags": ["Graph", "Heap (Priority Queue)", "Shortest Path"], "similar_problems": []},
    {"number": 2701, "slug": "consecutive-transactions-with-increasing-amounts", "title": "Consecutive Transactions with Increasing Amounts", "difficulty": "Hard", "tags": ["Database"], "similar_problems": []},
    {"number": 2702, "slug": "minimum-operations-to-make-numbers-non-positive", "title": "Minimum Operations to Make Numbers Non-positive", "difficulty": "Hard", "tags": ["Array", "Binary Search"], "similar_problems": []},
    {"number": 2709, "slug": "greatest-common-divisor-traversal", "title": "Greatest Common Divisor Traversal", "difficulty": "Hard", "tags": ["Array", "Math", "Union Find", "Number Theory"], "similar_problems": [{"slug": "graph-connectivity-with-threshold", "title": "Graph Connectivity With Threshold", "difficulty": "Hard"}]},
    {"number": 2713, "slug": "maximum-strictly-increasing-cells-in-a-matrix", "title": "Maximum Strictly Increasing Cells in a Matrix", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Binary Search", "Dynamic Programming", "Memoization", "Sorting", "Matrix", "Ordered Set"], "similar_problems": [{"slug": "number-of-increasing-paths-in-a-grid", "title": "Number of Increasing Paths in a Grid", "difficulty": "Hard"}]},
    {"number": 2714, "slug": "find-shortest-path-with-k-hops", "title": "Find Shortest Path with K Hops", "difficulty": "Hard", "tags": ["Graph", "Heap (Priority Queue)", "Shortest Path"], "similar_problems": []},
    {"number": 2719, "slug": "count-of-integers", "title": "Count of Integers", "difficulty": "Hard", "tags": ["Math", "String", "Dynamic Programming"], "similar_problems": [{"slug": "count-numbers-with-non-decreasing-digits", "title": "Count Numbers with Non-Decreasing Digits ", "difficulty": "Hard"}]},
    {"number": 2720, "slug": "popularity-percentage", "title": "Popularity Percentage", "difficulty": "Hard", "tags": ["Database"], "similar_problems": []},
    {"number": 2732, "slug": "find-a-good-subset-of-the-matrix", "title": "Find a Good Subset of the Matrix", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Bit Manipulation", "Matrix"], "similar_problems": []},
    {"number": 2736, "slug": "maximum-sum-queries", "title": "Maximum Sum Queries", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Stack", "Binary Indexed Tree", "Segment Tree", "Sorting", "Monotonic Stack"], "similar_problems": [{"slug": "most-beautiful-item-for-each-query", "title": "Most Beautiful Item for Each Query", "difficulty": "Medium"}]},
    {"number": 2742, "slug": "painting-the-walls", "title": "Painting the Walls", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": []},
    {"number": 2751, "slug": "robot-collisions", "title": "Robot Collisions", "difficulty": "Hard", "tags": ["Array", "Stack", "Sorting", "Simulation"], "similar_problems": [{"slug": "asteroid-collision", "title": "Asteroid Collision", "difficulty": "Medium"}]},
    {"number": 2752, "slug": "customers-with-maximum-number-of-transactions-on-consecutive-days", "title": "Customers with Maximum Number of Transactions on Consecutive Days", "difficulty": "Hard", "tags": ["Database"], "similar_problems": []},
    {"number": 2753, "slug": "count-houses-in-a-circular-street-ii", "title": "Count Houses in a Circular Street II", "difficulty": "Hard", "tags": [], "similar_problems": []},
    {"number": 2756, "slug": "query-batching", "title": "Query Batching", "difficulty": "Hard", "tags": [], "similar_problems": []},
    {"number": 2759, "slug": "convert-json-string-to-object", "title": "Convert JSON String to Object", "difficulty": "Hard", "tags": [], "similar_problems": []},
    {"number": 2763, "slug": "sum-of-imbalance-numbers-of-all-subarrays", "title": "Sum of Imbalance Numbers of All Subarrays", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Ordered Set"], "similar_problems": [{"slug": "count-subarrays-with-median-k", "title": "Count Subarrays With Median K", "difficulty": "Hard"}]},
    {"number": 2781, "slug": "length-of-the-longest-valid-substring", "title": "Length of the Longest Valid Substring", "difficulty": "Hard", "tags": ["Array", "Hash Table", "String", "Sliding Window"], "similar_problems": []},
    {"number": 2790, "slug": "maximum-number-of-groups-with-increasing-length", "title": "Maximum Number of Groups With Increasing Length", "difficulty": "Hard", "tags": ["Array", "Math", "Binary Search", "Greedy", "Sorting"], "similar_problems": [{"slug": "group-the-people-given-the-group-size-they-belong-to", "title": "Group the People Given the Group Size They Belong To", "difficulty": "Medium"}]},
    {"number": 2791, "slug": "count-paths-that-can-form-a-palindrome-in-a-tree", "title": "Count Paths That Can Form a Palindrome in a Tree", "difficulty": "Hard", "tags": ["Dynamic Programming", "Bit Manipulation", "Tree", "Depth-First Search", "Bitmask"], "similar_problems": [{"slug": "count-valid-paths-in-a-tree", "title": "Count Valid Paths in a Tree", "difficulty": "Hard"}]},
    {"number": 2792, "slug": "count-nodes-that-are-great-enough", "title": "Count Nodes That Are Great Enough", "difficulty": "Hard", "tags": ["Divide and Conquer", "Tree", "Depth-First Search", "Binary Tree"], "similar_problems": []},
    {"number": 2793, "slug": "status-of-flight-tickets", "title": "Status of Flight Tickets", "difficulty": "Hard", "tags": [], "similar_problems": []},
    {"number": 2801, "slug": "count-stepping-numbers-in-range", "title": "Count Stepping Numbers in Range", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "stepping-numbers", "title": "Stepping Numbers", "difficulty": "Medium"}]},
    {"number": 2809, "slug": "minimum-time-to-make-array-sum-at-most-x", "title": "Minimum Time to Make Array Sum At Most x", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Sorting"], "similar_problems": []},
    {"number": 2813, "slug": "maximum-elegance-of-a-k-length-subsequence", "title": "Maximum Elegance of a K-Length Subsequence", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Stack", "Greedy", "Sorting", "Heap (Priority Queue)"], "similar_problems": [{"slug": "ipo", "title": "IPO", "difficulty": "Hard"}]},
    {"number": 2814, "slug": "minimum-time-takes-to-reach-destination-without-drowning", "title": "Minimum Time Takes to Reach Destination Without Drowning", "difficulty": "Hard", "tags": ["Array", "Breadth-First Search", "Matrix"], "similar_problems": []},
    {"number": 2818, "slug": "apply-operations-to-maximize-score", "title": "Apply Operations to Maximize Score", "difficulty": "Hard", "tags": ["Array", "Math", "Stack", "Greedy", "Sorting", "Monotonic Stack", "Number Theory"], "similar_problems": [{"slug": "next-greater-element-iv", "title": "Next Greater Element IV", "difficulty": "Hard"}]},
    {"number": 2819, "slug": "minimum-relative-loss-after-buying-chocolates", "title": "Minimum Relative Loss After Buying Chocolates", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Sorting", "Prefix Sum"], "similar_problems": []},
    {"number": 2827, "slug": "number-of-beautiful-integers-in-the-range", "title": "Number of Beautiful Integers in the Range", "difficulty": "Hard", "tags": ["Math", "Dynamic Programming"], "similar_problems": [{"slug": "count-numbers-with-non-decreasing-digits", "title": "Count Numbers with Non-Decreasing Digits ", "difficulty": "Hard"}]},
    {"number": 2835, "slug": "minimum-operations-to-form-subsequence-with-target-sum", "title": "Minimum Operations to Form Subsequence With Target Sum", "difficulty": "Hard", "tags": ["Array", "Greedy", "Bit Manipulation"], "similar_problems": [{"slug": "number-of-subsequences-that-satisfy-the-given-sum-condition", "title": "Number of Subsequences That Satisfy the Given Sum Condition", "difficulty": "Medium"}, {"slug": "closest-subsequence-sum", "title": "Closest Subsequence Sum", "difficulty": "Hard"}]},
    {"number": 2836, "slug": "maximize-value-of-function-in-a-ball-passing-game", "title": "Maximize Value of Function in a Ball Passing Game", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Bit Manipulation"], "similar_problems": [{"slug": "jump-game-vi", "title": "Jump Game VI", "difficulty": "Medium"}]},
    {"number": 2842, "slug": "count-k-subsequences-of-a-string-with-maximum-beauty", "title": "Count K-Subsequences of a String With Maximum Beauty", "difficulty": "Hard", "tags": ["Hash Table", "Math", "String", "Greedy", "Combinatorics"], "similar_problems": [{"slug": "distinct-subsequences-ii", "title": "Distinct Subsequences II", "difficulty": "Hard"}]},
    {"number": 2846, "slug": "minimum-edge-weight-equilibrium-queries-in-a-tree", "title": "Minimum Edge Weight Equilibrium Queries in a Tree", "difficulty": "Hard", "tags": ["Array", "Tree", "Graph", "Strongly Connected Component"], "similar_problems": [{"slug": "kth-ancestor-of-a-tree-node", "title": "Kth Ancestor of a Tree Node", "difficulty": "Hard"}, {"slug": "minimum-runes-to-add-to-cast-spell", "title": "Minimum Runes to Add to Cast Spell", "difficulty": "Hard"}]},
    {"number": 2851, "slug": "string-transformation", "title": "String Transformation", "difficulty": "Hard", "tags": ["Math", "String", "Dynamic Programming", "String Matching"], "similar_problems": []},
    {"number": 2858, "slug": "minimum-edge-reversals-so-every-node-is-reachable", "title": "Minimum Edge Reversals So Every Node Is Reachable", "difficulty": "Hard", "tags": ["Dynamic Programming", "Depth-First Search", "Breadth-First Search", "Graph"], "similar_problems": [{"slug": "reorder-routes-to-make-all-paths-lead-to-the-city-zero", "title": "Reorder Routes to Make All Paths Lead to the City Zero", "difficulty": "Medium"}]},
    {"number": 2862, "slug": "maximum-element-sum-of-a-complete-subset-of-indices", "title": "Maximum Element-Sum of a Complete Subset of Indices", "difficulty": "Hard", "tags": ["Array", "Math", "Number Theory"], "similar_problems": [{"slug": "constrained-subsequence-sum", "title": "Constrained Subsequence Sum", "difficulty": "Hard"}, {"slug": "maximum-alternating-subsequence-sum", "title": "Maximum Alternating Subsequence Sum", "difficulty": "Medium"}]},
    {"number": 2867, "slug": "count-valid-paths-in-a-tree", "title": "Count Valid Paths in a Tree", "difficulty": "Hard", "tags": ["Math", "Dynamic Programming", "Tree", "Depth-First Search", "Number Theory"], "similar_problems": [{"slug": "count-paths-that-can-form-a-palindrome-in-a-tree", "title": "Count Paths That Can Form a Palindrome in a Tree", "difficulty": "Hard"}]},
    {"number": 2868, "slug": "the-wording-game", "title": "The Wording Game", "difficulty": "Hard", "tags": ["Array", "Math", "Two Pointers", "String", "Greedy", "Game Theory"], "similar_problems": []},
    {"number": 2872, "slug": "maximum-number-of-k-divisible-components", "title": "Maximum Number of K-Divisible Components", "difficulty": "Hard", "tags": ["Tree", "Depth-First Search"], "similar_problems": [{"slug": "create-components-with-same-value", "title": "Create Components With Same Value", "difficulty": "Hard"}]},
    {"number": 2876, "slug": "count-visited-nodes-in-a-directed-graph", "title": "Count Visited Nodes in a Directed Graph", "difficulty": "Hard", "tags": ["Dynamic Programming", "Graph", "Memoization"], "similar_problems": []},
    {"number": 2897, "slug": "apply-operations-on-array-to-maximize-sum-of-squares", "title": "Apply Operations on Array to Maximize Sum of Squares", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Greedy", "Bit Manipulation"], "similar_problems": [{"slug": "minimize-or-of-remaining-elements-using-operations", "title": "Minimize OR of Remaining Elements Using Operations", "difficulty": "Hard"}]},
    {"number": 2902, "slug": "count-of-sub-multisets-with-bounded-sum", "title": "Count of Sub-Multisets With Bounded Sum", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Dynamic Programming", "Sliding Window"], "similar_problems": [{"slug": "coin-change", "title": "Coin Change", "difficulty": "Medium"}, {"slug": "coin-change-ii", "title": "Coin Change II", "difficulty": "Medium"}]},
    {"number": 2911, "slug": "minimum-changes-to-make-k-semi-palindromes", "title": "Minimum Changes to Make K Semi-palindromes", "difficulty": "Hard", "tags": ["Two Pointers", "String", "Dynamic Programming"], "similar_problems": [{"slug": "palindrome-partitioning-iii", "title": "Palindrome Partitioning III", "difficulty": "Hard"}]},
    {"number": 2912, "slug": "number-of-ways-to-reach-destination-in-the-grid", "title": "Number of Ways to Reach Destination in the Grid", "difficulty": "Hard", "tags": ["Math", "Dynamic Programming", "Combinatorics"], "similar_problems": []},
    {"number": 2916, "slug": "subarrays-distinct-element-sum-of-squares-ii", "title": "Subarrays Distinct Element Sum of Squares II", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Binary Indexed Tree", "Segment Tree"], "similar_problems": []},
    {"number": 2920, "slug": "maximum-points-after-collecting-coins-from-all-nodes", "title": "Maximum Points After Collecting Coins From All Nodes", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Bit Manipulation", "Tree", "Depth-First Search", "Memoization"], "similar_problems": []},
    {"number": 2921, "slug": "maximum-profitable-triplets-with-increasing-prices-ii", "title": "Maximum Profitable Triplets With Increasing Prices II", "difficulty": "Hard", "tags": ["Array", "Binary Indexed Tree", "Segment Tree"], "similar_problems": []},
    {"number": 2926, "slug": "maximum-balanced-subsequence-sum", "title": "Maximum Balanced Subsequence Sum", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Dynamic Programming", "Binary Indexed Tree", "Segment Tree"], "similar_problems": [{"slug": "number-of-pairs-satisfying-inequality", "title": "Number of Pairs Satisfying Inequality", "difficulty": "Hard"}]},
    {"number": 2927, "slug": "distribute-candies-among-children-iii", "title": "Distribute Candies Among Children III", "difficulty": "Hard", "tags": ["Math", "Combinatorics"], "similar_problems": []},
    {"number": 2931, "slug": "maximum-spending-after-buying-items", "title": "Maximum Spending After Buying Items", "difficulty": "Hard", "tags": ["Array", "Greedy", "Sorting", "Heap (Priority Queue)", "Matrix"], "similar_problems": [{"slug": "maximum-points-you-can-obtain-from-cards", "title": "Maximum Points You Can Obtain from Cards", "difficulty": "Medium"}, {"slug": "maximum-score-from-performing-multiplication-operations", "title": "Maximum Score from Performing Multiplication Operations", "difficulty": "Hard"}]},
    {"number": 2935, "slug": "maximum-strong-pair-xor-ii", "title": "Maximum Strong Pair XOR II", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Bit Manipulation", "Trie", "Sliding Window"], "similar_problems": [{"slug": "maximum-xor-of-two-numbers-in-an-array", "title": "Maximum XOR of Two Numbers in an Array", "difficulty": "Medium"}, {"slug": "maximum-xor-with-an-element-from-array", "title": "Maximum XOR With an Element From Array", "difficulty": "Hard"}]},
    {"number": 2940, "slug": "find-building-where-alice-and-bob-can-meet", "title": "Find Building Where Alice and Bob Can Meet", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Stack", "Binary Indexed Tree", "Segment Tree", "Heap (Priority Queue)", "Monotonic Stack"], "similar_problems": [{"slug": "number-of-visible-people-in-a-queue", "title": "Number of Visible People in a Queue", "difficulty": "Hard"}, {"slug": "furthest-building-you-can-reach", "title": "Furthest Building You Can Reach", "difficulty": "Medium"}]},
    {"number": 2941, "slug": "maximum-gcd-sum-of-a-subarray", "title": "Maximum GCD-Sum of a Subarray", "difficulty": "Hard", "tags": ["Array", "Math", "Binary Search", "Number Theory"], "similar_problems": []},
    {"number": 2945, "slug": "find-maximum-non-decreasing-array-length", "title": "Find Maximum Non-decreasing Array Length", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Dynamic Programming", "Stack", "Queue", "Monotonic Stack", "Monotonic Queue"], "similar_problems": []},
    {"number": 2949, "slug": "count-beautiful-substrings-ii", "title": "Count Beautiful Substrings II", "difficulty": "Hard", "tags": ["Hash Table", "Math", "String", "Number Theory", "Prefix Sum"], "similar_problems": []},
    {"number": 2953, "slug": "count-complete-substrings", "title": "Count Complete Substrings", "difficulty": "Hard", "tags": ["Hash Table", "String", "Sliding Window"], "similar_problems": [{"slug": "number-of-substrings-containing-all-three-characters", "title": "Number of Substrings Containing All Three Characters", "difficulty": "Medium"}, {"slug": "count-substrings-without-repeating-character", "title": "Count Substrings Without Repeating Character", "difficulty": "Medium"}]},
    {"number": 2954, "slug": "count-the-number-of-infection-sequences", "title": "Count the Number of Infection Sequences", "difficulty": "Hard", "tags": ["Array", "Math", "Combinatorics"], "similar_problems": [{"slug": "contain-virus", "title": "Contain Virus", "difficulty": "Hard"}, {"slug": "amount-of-time-for-binary-tree-to-be-infected", "title": "Amount of Time for Binary Tree to Be Infected", "difficulty": "Medium"}]},
    {"number": 2959, "slug": "number-of-possible-sets-of-closing-branches", "title": "Number of Possible Sets of Closing Branches", "difficulty": "Hard", "tags": ["Bit Manipulation", "Graph", "Heap (Priority Queue)", "Enumeration", "Shortest Path"], "similar_problems": []},
    {"number": 2963, "slug": "count-the-number-of-good-partitions", "title": "Count the Number of Good Partitions", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Math", "Combinatorics"], "similar_problems": [{"slug": "check-if-there-is-a-valid-partition-for-the-array", "title": "Check if There is a Valid Partition For The Array", "difficulty": "Medium"}]},
    {"number": 2968, "slug": "apply-operations-to-maximize-frequency-score", "title": "Apply Operations to Maximize Frequency Score", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Sliding Window", "Sorting", "Prefix Sum"], "similar_problems": [{"slug": "frequency-of-the-most-frequent-element", "title": "Frequency of the Most Frequent Element", "difficulty": "Medium"}]},
    {"number": 2969, "slug": "minimum-number-of-coins-for-fruits-ii", "title": "Minimum Number of Coins for Fruits II", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Queue", "Heap (Priority Queue)", "Monotonic Queue"], "similar_problems": []},
    {"number": 2972, "slug": "count-the-number-of-incremovable-subarrays-ii", "title": "Count the Number of Incremovable Subarrays II", "difficulty": "Hard", "tags": ["Array", "Two Pointers", "Binary Search"], "similar_problems": [{"slug": "shortest-subarray-to-be-removed-to-make-array-sorted", "title": "Shortest Subarray to be Removed to Make Array Sorted", "difficulty": "Medium"}]},
    {"number": 2973, "slug": "find-number-of-coins-to-place-in-tree-nodes", "title": "Find Number of Coins to Place in Tree Nodes", "difficulty": "Hard", "tags": ["Dynamic Programming", "Tree", "Depth-First Search", "Sorting", "Heap (Priority Queue)"], "similar_problems": [{"slug": "collect-coins-in-a-tree", "title": "Collect Coins in a Tree", "difficulty": "Hard"}, {"slug": "find-the-maximum-sum-of-node-values", "title": "Find the Maximum Sum of Node Values", "difficulty": "Hard"}]},
    {"number": 2977, "slug": "minimum-cost-to-convert-string-ii", "title": "Minimum Cost to Convert String II", "difficulty": "Hard", "tags": ["Array", "String", "Dynamic Programming", "Graph", "Trie", "Shortest Path"], "similar_problems": [{"slug": "can-convert-string-in-k-moves", "title": "Can Convert String in K Moves", "difficulty": "Medium"}, {"slug": "minimum-moves-to-convert-string", "title": "Minimum Moves to Convert String", "difficulty": "Easy"}, {"slug": "minimum-number-of-valid-strings-to-form-target-ii", "title": "Minimum Number of Valid Strings to Form Target II", "difficulty": "Hard"}, {"slug": "minimum-number-of-valid-strings-to-form-target-i", "title": "Minimum Number of Valid Strings to Form Target I", "difficulty": "Medium"}]},
    {"number": 2983, "slug": "palindrome-rearrangement-queries", "title": "Palindrome Rearrangement Queries", "difficulty": "Hard", "tags": ["Hash Table", "String", "Prefix Sum"], "similar_problems": [{"slug": "longest-chunked-palindrome-decomposition", "title": "Longest Chunked Palindrome Decomposition", "difficulty": "Hard"}]},
    {"number": 2991, "slug": "top-three-wineries", "title": "Top Three Wineries ", "difficulty": "Hard", "tags": ["Database"], "similar_problems": []},
    {"number": 2994, "slug": "friday-purchases-ii", "title": "Friday Purchases II ", "difficulty": "Hard", "tags": ["Database"], "similar_problems": []},
    {"number": 2995, "slug": "viewers-turned-streamers", "title": "Viewers Turned Streamers", "difficulty": "Hard", "tags": ["Database"], "similar_problems": []},
    {"number": 2999, "slug": "count-the-number-of-powerful-integers", "title": "Count the Number of Powerful Integers", "difficulty": "Hard", "tags": ["Math", "String", "Dynamic Programming"], "similar_problems": [{"slug": "powerful-integers", "title": "Powerful Integers", "difficulty": "Medium"}, {"slug": "numbers-with-repeated-digits", "title": "Numbers With Repeated Digits", "difficulty": "Hard"}]},
    {"number": 3003, "slug": "maximize-the-number-of-partitions-after-operations", "title": "Maximize the Number of Partitions After Operations", "difficulty": "Hard", "tags": ["String", "Dynamic Programming", "Bit Manipulation", "Bitmask"], "similar_problems": [{"slug": "can-make-palindrome-from-substring", "title": "Can Make Palindrome from Substring", "difficulty": "Medium"}]},
    {"number": 3008, "slug": "find-beautiful-indices-in-the-given-array-ii", "title": "Find Beautiful Indices in the Given Array II", "difficulty": "Hard", "tags": ["Two Pointers", "String", "Binary Search", "Rolling Hash", "String Matching", "Hash Function"], "similar_problems": []},
    {"number": 3009, "slug": "maximum-number-of-intersections-on-the-chart", "title": "Maximum Number of Intersections on the Chart", "difficulty": "Hard", "tags": ["Array", "Math", "Binary Indexed Tree", "Geometry"], "similar_problems": []},
    {"number": 3013, "slug": "divide-an-array-into-subarrays-with-minimum-cost-ii", "title": "Divide an Array Into Subarrays With Minimum Cost II", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Sliding Window", "Heap (Priority Queue)"], "similar_problems": [{"slug": "minimum-cost-to-cut-a-stick", "title": "Minimum Cost to Cut a Stick", "difficulty": "Hard"}, {"slug": "minimum-cost-to-split-an-array", "title": "Minimum Cost to Split an Array", "difficulty": "Hard"}]},
    {"number": 3017, "slug": "count-the-number-of-houses-at-a-certain-distance-ii", "title": "Count the Number of Houses at a Certain Distance II", "difficulty": "Hard", "tags": ["Graph", "Prefix Sum"], "similar_problems": [{"slug": "walls-and-gates", "title": "Walls and Gates", "difficulty": "Medium"}]},
    {"number": 3018, "slug": "maximum-number-of-removal-queries-that-can-be-processed-i", "title": "Maximum Number of Removal Queries That Can Be Processed I", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": []},
    {"number": 3022, "slug": "minimize-or-of-remaining-elements-using-operations", "title": "Minimize OR of Remaining Elements Using Operations", "difficulty": "Hard", "tags": ["Array", "Greedy", "Bit Manipulation"], "similar_problems": [{"slug": "maximum-xor-after-operations", "title": "Maximum XOR After Operations ", "difficulty": "Medium"}, {"slug": "apply-operations-on-array-to-maximize-sum-of-squares", "title": "Apply Operations on Array to Maximize Sum of Squares", "difficulty": "Hard"}]},
    {"number": 3027, "slug": "find-the-number-of-ways-to-place-people-ii", "title": "Find the Number of Ways to Place People II", "difficulty": "Hard", "tags": ["Array", "Math", "Geometry", "Sorting", "Enumeration"], "similar_problems": [{"slug": "rectangle-area", "title": "Rectangle Area", "difficulty": "Medium"}]},
    {"number": 3031, "slug": "minimum-time-to-revert-word-to-initial-state-ii", "title": "Minimum Time to Revert Word to Initial State II", "difficulty": "Hard", "tags": ["String", "Rolling Hash", "String Matching", "Hash Function"], "similar_problems": [{"slug": "longest-happy-prefix", "title": "Longest Happy Prefix", "difficulty": "Hard"}]},
    {"number": 3036, "slug": "number-of-subarrays-that-match-a-pattern-ii", "title": "Number of Subarrays That Match a Pattern II", "difficulty": "Hard", "tags": ["Array", "Rolling Hash", "String Matching", "Hash Function"], "similar_problems": [{"slug": "match-substring-after-replacement", "title": "Match Substring After Replacement", "difficulty": "Hard"}]},
    {"number": 3037, "slug": "find-pattern-in-infinite-stream-ii", "title": "Find Pattern in Infinite Stream II", "difficulty": "Hard", "tags": ["Array", "Sliding Window", "Rolling Hash", "String Matching", "Hash Function"], "similar_problems": [{"slug": "number-of-integers-with-popcount-depth-equal-to-k-i", "title": "Number of Integers With Popcount-Depth Equal to K I", "difficulty": "Hard"}]},
    {"number": 3041, "slug": "maximize-consecutive-elements-in-an-array-after-modification", "title": "Maximize Consecutive Elements in an Array After Modification", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Sorting"], "similar_problems": []},
    {"number": 3045, "slug": "count-prefix-and-suffix-pairs-ii", "title": "Count Prefix and Suffix Pairs II", "difficulty": "Hard", "tags": ["Array", "String", "Trie", "Rolling Hash", "String Matching", "Hash Function"], "similar_problems": [{"slug": "implement-trie-prefix-tree", "title": "Implement Trie (Prefix Tree)", "difficulty": "Medium"}, {"slug": "design-add-and-search-words-data-structure", "title": "Design Add and Search Words Data Structure", "difficulty": "Medium"}]},
    {"number": 3049, "slug": "earliest-second-to-mark-indices-ii", "title": "Earliest Second to Mark Indices II", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Greedy", "Heap (Priority Queue)"], "similar_problems": []},
    {"number": 3052, "slug": "maximize-items", "title": "Maximize Items", "difficulty": "Hard", "tags": ["Database"], "similar_problems": []},
    {"number": 3057, "slug": "employees-project-allocation", "title": "Employees Project Allocation", "difficulty": "Hard", "tags": ["Database"], "similar_problems": []},
    {"number": 3060, "slug": "user-activities-within-time-bounds", "title": "User Activities within Time Bounds", "difficulty": "Hard", "tags": ["Database"], "similar_problems": []},
    {"number": 3061, "slug": "calculate-trapping-rain-water", "title": "Calculate Trapping Rain Water", "difficulty": "Hard", "tags": ["Database"], "similar_problems": []},
    {"number": 3068, "slug": "find-the-maximum-sum-of-node-values", "title": "Find the Maximum Sum of Node Values", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Greedy", "Bit Manipulation", "Tree", "Sorting"], "similar_problems": [{"slug": "maximum-score-after-applying-operations-on-a-tree", "title": "Maximum Score After Applying Operations on a Tree", "difficulty": "Medium"}, {"slug": "find-number-of-coins-to-place-in-tree-nodes", "title": "Find Number of Coins to Place in Tree Nodes", "difficulty": "Hard"}]},
    {"number": 3072, "slug": "distribute-elements-into-two-arrays-ii", "title": "Distribute Elements Into Two Arrays II", "difficulty": "Hard", "tags": ["Array", "Binary Indexed Tree", "Segment Tree", "Simulation"], "similar_problems": [{"slug": "split-array-largest-sum", "title": "Split Array Largest Sum", "difficulty": "Hard"}, {"slug": "divide-array-into-equal-pairs", "title": "Divide Array Into Equal Pairs", "difficulty": "Easy"}]},
    {"number": 3077, "slug": "maximum-strength-of-k-disjoint-subarrays", "title": "Maximum Strength of K Disjoint Subarrays", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Prefix Sum"], "similar_problems": [{"slug": "partition-array-into-disjoint-intervals", "title": "Partition Array into Disjoint Intervals", "difficulty": "Medium"}, {"slug": "maximum-strength-of-a-group", "title": "Maximum Strength of a Group", "difficulty": "Medium"}]},
    {"number": 3082, "slug": "find-the-sum-of-the-power-of-all-subsequences", "title": "Find the Sum of the Power of All Subsequences", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "number-of-subsequences-that-satisfy-the-given-sum-condition", "title": "Number of Subsequences That Satisfy the Given Sum Condition", "difficulty": "Medium"}]},
    {"number": 3086, "slug": "minimum-moves-to-pick-k-ones", "title": "Minimum Moves to Pick K Ones", "difficulty": "Hard", "tags": ["Array", "Greedy", "Sliding Window", "Prefix Sum"], "similar_problems": [{"slug": "minimum-swaps-to-group-all-1s-together", "title": "Minimum Swaps to Group All 1's Together", "difficulty": "Medium"}]},
    {"number": 3088, "slug": "make-string-anti-palindrome", "title": "Make String Anti-palindrome", "difficulty": "Hard", "tags": ["String", "Greedy", "Sorting", "Counting Sort"], "similar_problems": []},
    {"number": 3093, "slug": "longest-common-suffix-queries", "title": "Longest Common Suffix Queries", "difficulty": "Hard", "tags": ["Array", "String", "Trie"], "similar_problems": [{"slug": "longest-common-prefix", "title": "Longest Common Prefix", "difficulty": "Easy"}, {"slug": "find-the-length-of-the-longest-common-prefix", "title": "Find the Length of the Longest Common Prefix", "difficulty": "Medium"}]},
    {"number": 3098, "slug": "find-the-sum-of-subsequence-powers", "title": "Find the Sum of Subsequence Powers", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Sorting"], "similar_problems": [{"slug": "number-of-subsequences-that-satisfy-the-given-sum-condition", "title": "Number of Subsequences That Satisfy the Given Sum Condition", "difficulty": "Medium"}, {"slug": "closest-subsequence-sum", "title": "Closest Subsequence Sum", "difficulty": "Hard"}]},
    {"number": 3102, "slug": "minimize-manhattan-distances", "title": "Minimize Manhattan Distances", "difficulty": "Hard", "tags": ["Array", "Math", "Geometry", "Sorting", "Ordered Set"], "similar_problems": []},
    {"number": 3103, "slug": "find-trending-hashtags-ii", "title": "Find Trending Hashtags II ", "difficulty": "Hard", "tags": ["Database"], "similar_problems": []},
    {"number": 3104, "slug": "find-longest-self-contained-substring", "title": "Find Longest Self-Contained Substring", "difficulty": "Hard", "tags": ["Hash Table", "String", "Binary Search", "Prefix Sum"], "similar_problems": [{"slug": "select-k-disjoint-special-substrings", "title": "Select K Disjoint Special Substrings", "difficulty": "Medium"}]},
    {"number": 3108, "slug": "minimum-cost-walk-in-weighted-graph", "title": "Minimum Cost Walk in Weighted Graph", "difficulty": "Hard", "tags": ["Array", "Bit Manipulation", "Union Find", "Graph"], "similar_problems": []},
    {"number": 3113, "slug": "find-the-number-of-subarrays-where-boundary-elements-are-maximum", "title": "Find the Number of Subarrays Where Boundary Elements Are Maximum", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Stack", "Monotonic Stack"], "similar_problems": [{"slug": "number-of-subarrays-with-bounded-maximum", "title": "Number of Subarrays with Bounded Maximum", "difficulty": "Medium"}, {"slug": "count-subarrays-with-fixed-bounds", "title": "Count Subarrays With Fixed Bounds", "difficulty": "Hard"}, {"slug": "count-subarrays-where-max-element-appears-at-least-k-times", "title": "Count Subarrays Where Max Element Appears at Least K Times", "difficulty": "Medium"}]},
    {"number": 3116, "slug": "kth-smallest-amount-with-single-denomination-combination", "title": "Kth Smallest Amount With Single Denomination Combination", "difficulty": "Hard", "tags": ["Array", "Math", "Binary Search", "Bit Manipulation", "Combinatorics", "Number Theory"], "similar_problems": [{"slug": "kth-smallest-number-in-multiplication-table", "title": "Kth Smallest Number in Multiplication Table", "difficulty": "Hard"}, {"slug": "find-the-number-of-possible-ways-for-an-event", "title": "Find the Number of Possible Ways for an Event", "difficulty": "Hard"}]},
    {"number": 3117, "slug": "minimum-sum-of-values-by-dividing-array", "title": "Minimum Sum of Values by Dividing Array", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Dynamic Programming", "Bit Manipulation", "Segment Tree", "Queue"], "similar_problems": [{"slug": "minimum-cost-to-split-an-array", "title": "Minimum Cost to Split an Array", "difficulty": "Hard"}, {"slug": "split-with-minimum-sum", "title": "Split With Minimum Sum", "difficulty": "Easy"}, {"slug": "find-subarray-with-bitwise-or-closest-to-k", "title": "Find Subarray With Bitwise OR Closest to K", "difficulty": "Hard"}, {"slug": "find-x-value-of-array-ii", "title": "Find X Value of Array II", "difficulty": "Hard"}]},
    {"number": 3123, "slug": "find-edges-in-shortest-paths", "title": "Find Edges in Shortest Paths", "difficulty": "Hard", "tags": ["Depth-First Search", "Breadth-First Search", "Graph", "Heap (Priority Queue)", "Shortest Path"], "similar_problems": []},
    {"number": 3130, "slug": "find-all-possible-stable-binary-arrays-ii", "title": "Find All Possible Stable Binary Arrays II", "difficulty": "Hard", "tags": ["Dynamic Programming", "Prefix Sum"], "similar_problems": [{"slug": "contiguous-array", "title": "Contiguous Array", "difficulty": "Medium"}, {"slug": "binary-subarrays-with-sum", "title": "Binary Subarrays With Sum", "difficulty": "Medium"}]},
    {"number": 3134, "slug": "find-the-median-of-the-uniqueness-array", "title": "Find the Median of the Uniqueness Array", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Binary Search", "Sliding Window"], "similar_problems": [{"slug": "find-k-th-smallest-pair-distance", "title": "Find K-th Smallest Pair Distance", "difficulty": "Hard"}, {"slug": "total-appeal-of-a-string", "title": "Total Appeal of A String", "difficulty": "Hard"}]},
    {"number": 3139, "slug": "minimum-cost-to-equalize-array", "title": "Minimum Cost to Equalize Array", "difficulty": "Hard", "tags": ["Array", "Greedy", "Enumeration"], "similar_problems": []},
    {"number": 3141, "slug": "maximum-hamming-distances", "title": "Maximum Hamming Distances", "difficulty": "Hard", "tags": ["Array", "Bit Manipulation", "Breadth-First Search"], "similar_problems": []},
    {"number": 3145, "slug": "find-products-of-elements-of-big-array", "title": "Find Products of Elements of Big Array", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Bit Manipulation"], "similar_problems": []},
    {"number": 3149, "slug": "find-the-minimum-cost-array-permutation", "title": "Find the Minimum Cost Array Permutation", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Bit Manipulation", "Bitmask"], "similar_problems": [{"slug": "shortest-path-visiting-all-nodes", "title": "Shortest Path Visiting All Nodes", "difficulty": "Hard"}, {"slug": "find-the-shortest-superstring", "title": "Find the Shortest Superstring", "difficulty": "Hard"}]},
    {"number": 3154, "slug": "find-number-of-ways-to-reach-the-k-th-stair", "title": "Find Number of Ways to Reach the K-th Stair", "difficulty": "Hard", "tags": ["Math", "Dynamic Programming", "Bit Manipulation", "Memoization", "Combinatorics"], "similar_problems": [{"slug": "climbing-stairs", "title": "Climbing Stairs", "difficulty": "Easy"}, {"slug": "min-cost-climbing-stairs", "title": "Min Cost Climbing Stairs", "difficulty": "Easy"}]},
    {"number": 3156, "slug": "employee-task-duration-and-concurrent-tasks", "title": "Employee Task Duration and Concurrent Tasks", "difficulty": "Hard", "tags": ["Database"], "similar_problems": []},
    {"number": 3161, "slug": "block-placement-queries", "title": "Block Placement Queries", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Binary Indexed Tree", "Segment Tree"], "similar_problems": [{"slug": "building-boxes", "title": "Building Boxes", "difficulty": "Hard"}, {"slug": "fruits-into-baskets-iii", "title": "Fruits Into Baskets III", "difficulty": "Medium"}]},
    {"number": 3165, "slug": "maximum-sum-of-subsequence-with-non-adjacent-elements", "title": "Maximum Sum of Subsequence With Non-adjacent Elements", "difficulty": "Hard", "tags": ["Array", "Divide and Conquer", "Dynamic Programming", "Segment Tree"], "similar_problems": []},
    {"number": 3171, "slug": "find-subarray-with-bitwise-or-closest-to-k", "title": "Find Subarray With Bitwise OR Closest to K", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Bit Manipulation", "Segment Tree"], "similar_problems": [{"slug": "minimum-sum-of-values-by-dividing-array", "title": "Minimum Sum of Values by Dividing Array", "difficulty": "Hard"}]},
    {"number": 3177, "slug": "find-the-maximum-length-of-a-good-subsequence-ii", "title": "Find the Maximum Length of a Good Subsequence II", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Dynamic Programming"], "similar_problems": [{"slug": "longest-increasing-subsequence", "title": "Longest Increasing Subsequence", "difficulty": "Medium"}, {"slug": "maximum-length-of-repeated-subarray", "title": "Maximum Length of Repeated Subarray", "difficulty": "Medium"}]},
    {"number": 3181, "slug": "maximum-total-reward-using-operations-ii", "title": "Maximum Total Reward Using Operations II", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Bit Manipulation"], "similar_problems": []},
    {"number": 3187, "slug": "peaks-in-array", "title": "Peaks in Array", "difficulty": "Hard", "tags": ["Array", "Binary Indexed Tree", "Segment Tree"], "similar_problems": []},
    {"number": 3188, "slug": "find-top-scoring-students-ii", "title": "Find Top Scoring Students II", "difficulty": "Hard", "tags": ["Database"], "similar_problems": []},
    {"number": 3193, "slug": "count-the-number-of-inversions", "title": "Count the Number of Inversions", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "k-inverse-pairs-array", "title": "K Inverse Pairs Array", "difficulty": "Hard"}]},
    {"number": 3197, "slug": "find-the-minimum-area-to-cover-all-ones-ii", "title": "Find the Minimum Area to Cover All Ones II", "difficulty": "Hard", "tags": ["Array", "Matrix", "Enumeration"], "similar_problems": [{"slug": "smallest-rectangle-enclosing-black-pixels", "title": "Smallest Rectangle Enclosing Black Pixels", "difficulty": "Hard"}]},
    {"number": 3203, "slug": "find-minimum-diameter-after-merging-two-trees", "title": "Find Minimum Diameter After Merging Two Trees", "difficulty": "Hard", "tags": ["Tree", "Depth-First Search", "Breadth-First Search", "Graph"], "similar_problems": [{"slug": "minimum-height-trees", "title": "Minimum Height Trees", "difficulty": "Medium"}, {"slug": "tree-diameter", "title": "Tree Diameter", "difficulty": "Medium"}, {"slug": "maximize-the-number-of-target-nodes-after-connecting-trees-i", "title": "Maximize the Number of Target Nodes After Connecting Trees I", "difficulty": "Medium"}, {"slug": "maximize-the-number-of-target-nodes-after-connecting-trees-ii", "title": "Maximize the Number of Target Nodes After Connecting Trees II", "difficulty": "Hard"}, {"slug": "maximize-sum-of-weights-after-edge-removals", "title": "Maximize Sum of Weights after Edge Removals", "difficulty": "Hard"}]},
    {"number": 3209, "slug": "number-of-subarrays-with-and-value-of-k", "title": "Number of Subarrays With AND Value of K", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Bit Manipulation", "Segment Tree"], "similar_problems": []},
    {"number": 3213, "slug": "construct-string-with-minimum-cost", "title": "Construct String with Minimum Cost", "difficulty": "Hard", "tags": ["Array", "String", "Dynamic Programming", "Suffix Array"], "similar_problems": [{"slug": "minimum-number-of-valid-strings-to-form-target-ii", "title": "Minimum Number of Valid Strings to Form Target II", "difficulty": "Hard"}, {"slug": "minimum-number-of-valid-strings-to-form-target-i", "title": "Minimum Number of Valid Strings to Form Target I", "difficulty": "Medium"}]},
    {"number": 3214, "slug": "year-on-year-growth-rate", "title": "Year on Year Growth Rate", "difficulty": "Hard", "tags": ["Database"], "similar_problems": []},
    {"number": 3219, "slug": "minimum-cost-for-cutting-cake-ii", "title": "Minimum Cost for Cutting Cake II", "difficulty": "Hard", "tags": ["Array", "Greedy", "Sorting"], "similar_problems": [{"slug": "minimum-cost-for-cutting-cake-i", "title": "Minimum Cost for Cutting Cake I", "difficulty": "Medium"}]},
    {"number": 3225, "slug": "maximum-score-from-grid-operations", "title": "Maximum Score From Grid Operations", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Matrix", "Prefix Sum"], "similar_problems": [{"slug": "maximum-difference-score-in-a-grid", "title": "Maximum Difference Score in a Grid", "difficulty": "Medium"}]},
    {"number": 3229, "slug": "minimum-operations-to-make-array-equal-to-target", "title": "Minimum Operations to Make Array Equal to Target", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Stack", "Greedy", "Monotonic Stack"], "similar_problems": []},
    {"number": 3231, "slug": "minimum-number-of-increasing-subsequence-to-be-removed", "title": "Minimum Number of Increasing Subsequence to Be Removed", "difficulty": "Hard", "tags": ["Array", "Binary Search"], "similar_problems": []},
    {"number": 3235, "slug": "check-if-the-rectangle-corner-is-reachable", "title": "Check if the Rectangle Corner Is Reachable", "difficulty": "Hard", "tags": ["Array", "Math", "Depth-First Search", "Breadth-First Search", "Union Find", "Geometry"], "similar_problems": [{"slug": "queries-on-number-of-points-inside-a-circle", "title": "Queries on Number of Points Inside a Circle", "difficulty": "Medium"}, {"slug": "check-if-point-is-reachable", "title": "Check if Point Is Reachable", "difficulty": "Hard"}]},
    {"number": 3236, "slug": "ceo-subordinate-hierarchy", "title": "CEO Subordinate Hierarchy", "difficulty": "Hard", "tags": ["Database"], "similar_problems": []},
    {"number": 3241, "slug": "time-taken-to-mark-all-nodes", "title": "Time Taken to Mark All Nodes", "difficulty": "Hard", "tags": ["Dynamic Programming", "Tree", "Depth-First Search", "Graph"], "similar_problems": [{"slug": "sum-of-distances-in-tree", "title": "Sum of Distances in Tree", "difficulty": "Hard"}, {"slug": "most-profitable-path-in-a-tree", "title": "Most Profitable Path in a Tree", "difficulty": "Medium"}, {"slug": "find-the-last-marked-nodes-in-tree", "title": "Find the Last Marked Nodes in Tree", "difficulty": "Hard"}]},
    {"number": 3244, "slug": "shortest-distance-after-road-addition-queries-ii", "title": "Shortest Distance After Road Addition Queries II", "difficulty": "Hard", "tags": ["Array", "Greedy", "Graph", "Ordered Set"], "similar_problems": []},
    {"number": 3245, "slug": "alternating-groups-iii", "title": "Alternating Groups III", "difficulty": "Hard", "tags": ["Array", "Binary Indexed Tree"], "similar_problems": []},
    {"number": 3250, "slug": "find-the-count-of-monotonic-pairs-i", "title": "Find the Count of Monotonic Pairs I", "difficulty": "Hard", "tags": ["Array", "Math", "Dynamic Programming", "Combinatorics", "Prefix Sum"], "similar_problems": [{"slug": "monotonic-array", "title": "Monotonic Array", "difficulty": "Easy"}]},
    {"number": 3251, "slug": "find-the-count-of-monotonic-pairs-ii", "title": "Find the Count of Monotonic Pairs II", "difficulty": "Hard", "tags": ["Array", "Math", "Dynamic Programming", "Combinatorics", "Prefix Sum"], "similar_problems": []},
    {"number": 3256, "slug": "maximum-value-sum-by-placing-three-rooks-i", "title": "Maximum Value Sum by Placing Three Rooks I", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Matrix", "Enumeration"], "similar_problems": [{"slug": "available-captures-for-rook", "title": "Available Captures for Rook", "difficulty": "Easy"}]},
    {"number": 3257, "slug": "maximum-value-sum-by-placing-three-rooks-ii", "title": "Maximum Value Sum by Placing Three Rooks II", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Matrix", "Enumeration"], "similar_problems": [{"slug": "available-captures-for-rook", "title": "Available Captures for Rook", "difficulty": "Easy"}]},
    {"number": 3260, "slug": "find-the-largest-palindrome-divisible-by-k", "title": "Find the Largest Palindrome Divisible by K", "difficulty": "Hard", "tags": ["Math", "String", "Dynamic Programming", "Greedy", "Number Theory"], "similar_problems": [{"slug": "palindrome-number", "title": "Palindrome Number", "difficulty": "Easy"}, {"slug": "find-the-closest-palindrome", "title": "Find the Closest Palindrome", "difficulty": "Hard"}]},
    {"number": 3261, "slug": "count-substrings-that-satisfy-k-constraint-ii", "title": "Count Substrings That Satisfy K-Constraint II", "difficulty": "Hard", "tags": ["Array", "String", "Binary Search", "Sliding Window", "Prefix Sum"], "similar_problems": []},
    {"number": 3266, "slug": "final-array-state-after-k-multiplication-operations-ii", "title": "Final Array State After K Multiplication Operations II", "difficulty": "Hard", "tags": ["Array", "Heap (Priority Queue)", "Simulation"], "similar_problems": []},
    {"number": 3267, "slug": "count-almost-equal-pairs-ii", "title": "Count Almost Equal Pairs II", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Sorting", "Counting", "Enumeration"], "similar_problems": [{"slug": "find-the-occurrence-of-first-almost-equal-substring", "title": "Find the Occurrence of First Almost Equal Substring", "difficulty": "Hard"}]},
    {"number": 3268, "slug": "find-overlapping-shifts-ii", "title": "Find Overlapping Shifts II", "difficulty": "Hard", "tags": ["Database"], "similar_problems": []},
    {"number": 3269, "slug": "constructing-two-increasing-arrays", "title": "Constructing Two Increasing Arrays", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": []},
    {"number": 3272, "slug": "find-the-count-of-good-integers", "title": "Find the Count of Good Integers", "difficulty": "Hard", "tags": ["Hash Table", "Math", "Combinatorics", "Enumeration"], "similar_problems": [{"slug": "palindrome-number", "title": "Palindrome Number", "difficulty": "Easy"}, {"slug": "find-the-closest-palindrome", "title": "Find the Closest Palindrome", "difficulty": "Hard"}]},
    {"number": 3273, "slug": "minimum-amount-of-damage-dealt-to-bob", "title": "Minimum Amount of Damage Dealt to Bob", "difficulty": "Hard", "tags": ["Array", "Greedy", "Sorting"], "similar_problems": [{"slug": "minimum-time-to-complete-trips", "title": "Minimum Time to Complete Trips", "difficulty": "Medium"}, {"slug": "minimum-penalty-for-a-shop", "title": "Minimum Penalty for a Shop", "difficulty": "Medium"}]},
    {"number": 3276, "slug": "select-cells-in-grid-with-maximum-score", "title": "Select Cells in Grid With Maximum Score", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Bit Manipulation", "Matrix", "Bitmask"], "similar_problems": []},
    {"number": 3277, "slug": "maximum-xor-score-subarray-queries", "title": "Maximum XOR Score Subarray Queries", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": [{"slug": "make-the-xor-of-all-segments-equal-to-zero", "title": "Make the XOR of All Segments Equal to Zero", "difficulty": "Hard"}]},
    {"number": 3279, "slug": "maximum-total-area-occupied-by-pistons", "title": "Maximum Total Area Occupied by Pistons", "difficulty": "Hard", "tags": ["Array", "Hash Table", "String", "Simulation", "Counting", "Prefix Sum"], "similar_problems": []},
    {"number": 3283, "slug": "maximum-number-of-moves-to-kill-all-pawns", "title": "Maximum Number of Moves to Kill All Pawns", "difficulty": "Hard", "tags": ["Array", "Math", "Bit Manipulation", "Breadth-First Search", "Game Theory", "Bitmask"], "similar_problems": [{"slug": "knight-probability-in-chessboard", "title": "Knight Probability in Chessboard", "difficulty": "Medium"}, {"slug": "check-knight-tour-configuration", "title": "Check Knight Tour Configuration", "difficulty": "Medium"}]},
    {"number": 3287, "slug": "find-the-maximum-sequence-value-of-array", "title": "Find the Maximum Sequence Value of Array", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Bit Manipulation"], "similar_problems": [{"slug": "bitwise-ors-of-subarrays", "title": "Bitwise ORs of Subarrays", "difficulty": "Medium"}]},
    {"number": 3288, "slug": "length-of-the-longest-increasing-path", "title": "Length of the Longest Increasing Path", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Sorting"], "similar_problems": []},
    {"number": 3292, "slug": "minimum-number-of-valid-strings-to-form-target-ii", "title": "Minimum Number of Valid Strings to Form Target II", "difficulty": "Hard", "tags": ["Array", "String", "Binary Search", "Dynamic Programming", "Segment Tree", "Rolling Hash", "String Matching", "Hash Function"], "similar_problems": [{"slug": "minimum-cost-to-convert-string-ii", "title": "Minimum Cost to Convert String II", "difficulty": "Hard"}, {"slug": "construct-string-with-minimum-cost", "title": "Construct String with Minimum Cost", "difficulty": "Hard"}]},
    {"number": 3298, "slug": "count-substrings-that-can-be-rearranged-to-contain-a-string-ii", "title": "Count Substrings That Can Be Rearranged to Contain a String II", "difficulty": "Hard", "tags": ["Hash Table", "String", "Sliding Window"], "similar_problems": [{"slug": "minimum-window-substring", "title": "Minimum Window Substring", "difficulty": "Hard"}]},
    {"number": 3299, "slug": "sum-of-consecutive-subsequences", "title": "Sum of Consecutive Subsequences", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Dynamic Programming"], "similar_problems": []},
    {"number": 3303, "slug": "find-the-occurrence-of-first-almost-equal-substring", "title": "Find the Occurrence of First Almost Equal Substring", "difficulty": "Hard", "tags": ["String", "String Matching"], "similar_problems": [{"slug": "check-whether-two-strings-are-almost-equivalent", "title": "Check Whether Two Strings are Almost Equivalent", "difficulty": "Easy"}, {"slug": "count-almost-equal-pairs-ii", "title": "Count Almost Equal Pairs II", "difficulty": "Hard"}]},
    {"number": 3307, "slug": "find-the-k-th-character-in-string-game-ii", "title": "Find the K-th Character in String Game II", "difficulty": "Hard", "tags": ["Math", "Bit Manipulation", "Recursion"], "similar_problems": [{"slug": "shifting-letters", "title": "Shifting Letters", "difficulty": "Medium"}]},
    {"number": 3311, "slug": "construct-2d-grid-matching-graph-layout", "title": "Construct 2D Grid Matching Graph Layout", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Graph", "Matrix"], "similar_problems": []},
    {"number": 3312, "slug": "sorted-gcd-pair-queries", "title": "Sorted GCD Pair Queries", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Math", "Binary Search", "Combinatorics", "Counting", "Number Theory", "Prefix Sum"], "similar_problems": []},
    {"number": 3313, "slug": "find-the-last-marked-nodes-in-tree", "title": "Find the Last Marked Nodes in Tree", "difficulty": "Hard", "tags": ["Tree", "Depth-First Search"], "similar_problems": [{"slug": "minimum-time-to-visit-disappearing-nodes", "title": "Minimum Time to Visit Disappearing Nodes", "difficulty": "Medium"}, {"slug": "time-taken-to-mark-all-nodes", "title": "Time Taken to Mark All Nodes", "difficulty": "Hard"}]},
    {"number": 3317, "slug": "find-the-number-of-possible-ways-for-an-event", "title": "Find the Number of Possible Ways for an Event", "difficulty": "Hard", "tags": ["Math", "Dynamic Programming", "Combinatorics"], "similar_problems": [{"slug": "kth-smallest-amount-with-single-denomination-combination", "title": "Kth Smallest Amount With Single Denomination Combination", "difficulty": "Hard"}]},
    {"number": 3320, "slug": "count-the-number-of-winning-sequences", "title": "Count The Number of Winning Sequences", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "predict-the-winner", "title": "Predict the Winner", "difficulty": "Medium"}]},
    {"number": 3321, "slug": "find-x-sum-of-all-k-long-subarrays-ii", "title": "Find X-Sum of All K-Long Subarrays II", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Sliding Window", "Heap (Priority Queue)"], "similar_problems": []},
    {"number": 3327, "slug": "check-if-dfs-strings-are-palindromes", "title": "Check if DFS Strings Are Palindromes", "difficulty": "Hard", "tags": ["Array", "Hash Table", "String", "Tree", "Depth-First Search", "Hash Function"], "similar_problems": []},
    {"number": 3329, "slug": "count-substrings-with-k-frequency-characters-ii", "title": "Count Substrings With K-Frequency Characters II", "difficulty": "Hard", "tags": ["Hash Table", "String", "Sliding Window"], "similar_problems": []},
    {"number": 3333, "slug": "find-the-original-typed-string-ii", "title": "Find the Original Typed String II", "difficulty": "Hard", "tags": ["String", "Dynamic Programming", "Prefix Sum"], "similar_problems": [{"slug": "keyboard-row", "title": "Keyboard Row", "difficulty": "Easy"}, {"slug": "faulty-keyboard", "title": "Faulty Keyboard", "difficulty": "Easy"}]},
    {"number": 3336, "slug": "find-the-number-of-subsequences-with-equal-gcd", "title": "Find the Number of Subsequences With Equal GCD", "difficulty": "Hard", "tags": ["Array", "Math", "Dynamic Programming", "Number Theory"], "similar_problems": [{"slug": "find-greatest-common-divisor-of-array", "title": "Find Greatest Common Divisor of Array", "difficulty": "Easy"}]},
    {"number": 3337, "slug": "total-characters-in-string-after-transformations-ii", "title": "Total Characters in String After Transformations II", "difficulty": "Hard", "tags": ["Hash Table", "Math", "String", "Dynamic Programming", "Counting"], "similar_problems": []},
    {"number": 3343, "slug": "count-number-of-balanced-permutations", "title": "Count Number of Balanced Permutations", "difficulty": "Hard", "tags": ["Math", "String", "Dynamic Programming", "Combinatorics"], "similar_problems": []},
    {"number": 3347, "slug": "maximum-frequency-of-an-element-after-performing-operations-ii", "title": "Maximum Frequency of an Element After Performing Operations II", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Sliding Window", "Sorting", "Prefix Sum"], "similar_problems": [{"slug": "frequency-of-the-most-frequent-element", "title": "Frequency of the Most Frequent Element", "difficulty": "Medium"}, {"slug": "count-elements-with-maximum-frequency", "title": "Count Elements With Maximum Frequency", "difficulty": "Easy"}]},
    {"number": 3348, "slug": "smallest-divisible-digit-product-ii", "title": "Smallest Divisible Digit Product II", "difficulty": "Hard", "tags": ["Math", "String", "Backtracking", "Greedy", "Number Theory"], "similar_problems": [{"slug": "smallest-number-with-given-digit-product", "title": "Smallest Number With Given Digit Product", "difficulty": "Medium"}]},
    {"number": 3351, "slug": "sum-of-good-subsequences", "title": "Sum of Good Subsequences", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Dynamic Programming"], "similar_problems": []},
    {"number": 3352, "slug": "count-k-reducible-numbers-less-than-n", "title": "Count K-Reducible Numbers Less Than N", "difficulty": "Hard", "tags": ["Math", "String", "Dynamic Programming", "Combinatorics"], "similar_problems": []},
    {"number": 3357, "slug": "minimize-the-maximum-adjacent-element-difference", "title": "Minimize the Maximum Adjacent Element Difference", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Greedy"], "similar_problems": [{"slug": "minimum-absolute-sum-difference", "title": "Minimum Absolute Sum Difference", "difficulty": "Medium"}, {"slug": "minimize-the-maximum-adjacent-element-difference", "title": "Minimize the Maximum Adjacent Element Difference", "difficulty": "Hard"}]},
    {"number": 3359, "slug": "find-sorted-submatrices-with-maximum-element-at-most-k", "title": "Find Sorted Submatrices With Maximum Element at Most K", "difficulty": "Hard", "tags": ["Array", "Stack", "Matrix", "Monotonic Stack"], "similar_problems": [{"slug": "maximal-rectangle", "title": "Maximal Rectangle", "difficulty": "Hard"}]},
    {"number": 3363, "slug": "find-the-maximum-number-of-fruits-collected", "title": "Find the Maximum Number of Fruits Collected", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Matrix"], "similar_problems": []},
    {"number": 3367, "slug": "maximize-sum-of-weights-after-edge-removals", "title": "Maximize Sum of Weights after Edge Removals", "difficulty": "Hard", "tags": ["Dynamic Programming", "Tree", "Depth-First Search"], "similar_problems": [{"slug": "find-minimum-diameter-after-merging-two-trees", "title": "Find Minimum Diameter After Merging Two Trees", "difficulty": "Hard"}]},
    {"number": 3368, "slug": "first-letter-capitalization", "title": "First Letter Capitalization", "difficulty": "Hard", "tags": ["Database"], "similar_problems": []},
    {"number": 3369, "slug": "design-an-array-statistics-tracker", "title": "Design an Array Statistics Tracker ", "difficulty": "Hard", "tags": ["Hash Table", "Binary Search", "Design", "Queue", "Heap (Priority Queue)", "Data Stream", "Ordered Set"], "similar_problems": []},
    {"number": 3373, "slug": "maximize-the-number-of-target-nodes-after-connecting-trees-ii", "title": "Maximize the Number of Target Nodes After Connecting Trees II", "difficulty": "Hard", "tags": ["Tree", "Depth-First Search", "Breadth-First Search"], "similar_problems": [{"slug": "find-minimum-diameter-after-merging-two-trees", "title": "Find Minimum Diameter After Merging Two Trees", "difficulty": "Hard"}]},
    {"number": 3374, "slug": "first-letter-capitalization-ii", "title": "First Letter Capitalization II", "difficulty": "Hard", "tags": ["Database"], "similar_problems": []},
    {"number": 3378, "slug": "count-connected-components-in-lcm-graph", "title": "Count Connected Components in LCM Graph", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Math", "Union Find", "Number Theory"], "similar_problems": []},
    {"number": 3382, "slug": "maximum-area-rectangle-with-point-constraints-ii", "title": "Maximum Area Rectangle With Point Constraints II", "difficulty": "Hard", "tags": ["Array", "Math", "Binary Indexed Tree", "Segment Tree", "Geometry", "Sorting"], "similar_problems": [{"slug": "minimum-area-rectangle", "title": "Minimum Area Rectangle", "difficulty": "Medium"}]},
    {"number": 3383, "slug": "minimum-runes-to-add-to-cast-spell", "title": "Minimum Runes to Add to Cast Spell", "difficulty": "Hard", "tags": ["Array", "Depth-First Search", "Breadth-First Search", "Union Find", "Graph", "Topological Sort"], "similar_problems": [{"slug": "minimum-number-of-days-to-disconnect-island", "title": "Minimum Number of Days to Disconnect Island", "difficulty": "Hard"}, {"slug": "minimum-edge-weight-equilibrium-queries-in-a-tree", "title": "Minimum Edge Weight Equilibrium Queries in a Tree", "difficulty": "Hard"}]},
    {"number": 3384, "slug": "team-dominance-by-pass-success", "title": "Team Dominance by Pass Success", "difficulty": "Hard", "tags": ["Database"], "similar_problems": []},
    {"number": 3385, "slug": "minimum-time-to-break-locks-ii", "title": "Minimum Time to Break Locks II", "difficulty": "Hard", "tags": ["Array", "Depth-First Search", "Graph"], "similar_problems": []},
    {"number": 3389, "slug": "minimum-operations-to-make-character-frequencies-equal", "title": "Minimum Operations to Make Character Frequencies Equal", "difficulty": "Hard", "tags": ["Hash Table", "String", "Dynamic Programming", "Counting", "Enumeration"], "similar_problems": [{"slug": "minimum-number-of-steps-to-make-two-strings-anagram", "title": "Minimum Number of Steps to Make Two Strings Anagram", "difficulty": "Medium"}]},
    {"number": 3390, "slug": "longest-team-pass-streak", "title": "Longest Team Pass Streak", "difficulty": "Hard", "tags": ["Database"], "similar_problems": []},
    {"number": 3395, "slug": "subsequences-with-a-unique-middle-mode-i", "title": "Subsequences with a Unique Middle Mode I", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Math", "Combinatorics"], "similar_problems": [{"slug": "subsequences-with-a-unique-middle-mode-ii", "title": "Subsequences with a Unique Middle Mode II", "difficulty": "Hard"}]},
    {"number": 3398, "slug": "smallest-substring-with-identical-characters-i", "title": "Smallest Substring With Identical Characters I", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Enumeration"], "similar_problems": []},
    {"number": 3399, "slug": "smallest-substring-with-identical-characters-ii", "title": "Smallest Substring With Identical Characters II", "difficulty": "Hard", "tags": ["String", "Binary Search"], "similar_problems": []},
    {"number": 3401, "slug": "find-circular-gift-exchange-chains", "title": "Find Circular Gift Exchange Chains", "difficulty": "Hard", "tags": ["Database"], "similar_problems": []},
    {"number": 3405, "slug": "count-the-number-of-arrays-with-k-matching-adjacent-elements", "title": "Count the Number of Arrays with K Matching Adjacent Elements", "difficulty": "Hard", "tags": ["Math", "Combinatorics"], "similar_problems": [{"slug": "count-good-numbers", "title": "Count Good Numbers", "difficulty": "Medium"}]},
    {"number": 3406, "slug": "find-the-lexicographically-largest-string-from-the-box-ii", "title": "Find the Lexicographically Largest String From the Box II", "difficulty": "Hard", "tags": ["Two Pointers", "String"], "similar_problems": []},
    {"number": 3410, "slug": "maximize-subarray-sum-after-removing-all-occurrences-of-one-element", "title": "Maximize Subarray Sum After Removing All Occurrences of One Element", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Segment Tree"], "similar_problems": [{"slug": "maximum-subarray", "title": "Maximum Subarray", "difficulty": "Medium"}, {"slug": "maximum-subarray-sum-with-one-deletion", "title": "Maximum Subarray Sum with One Deletion", "difficulty": "Medium"}]},
    {"number": 3414, "slug": "maximum-score-of-non-overlapping-intervals", "title": "Maximum Score of Non-overlapping Intervals", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Dynamic Programming", "Sorting"], "similar_problems": [{"slug": "two-best-non-overlapping-events", "title": "Two Best Non-Overlapping Events", "difficulty": "Medium"}]},
    {"number": 3416, "slug": "subsequences-with-a-unique-middle-mode-ii", "title": "Subsequences with a Unique Middle Mode II", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Math", "Combinatorics"], "similar_problems": [{"slug": "subsequences-with-a-unique-middle-mode-i", "title": "Subsequences with a Unique Middle Mode I", "difficulty": "Hard"}]},
    {"number": 3420, "slug": "count-non-decreasing-subarrays-after-k-operations", "title": "Count Non-Decreasing Subarrays After K Operations", "difficulty": "Hard", "tags": ["Array", "Stack", "Segment Tree", "Queue", "Sliding Window", "Monotonic Stack", "Monotonic Queue"], "similar_problems": [{"slug": "non-decreasing-array", "title": "Non-decreasing Array", "difficulty": "Medium"}]},
    {"number": 3425, "slug": "longest-special-path", "title": "Longest Special Path", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Tree", "Depth-First Search", "Prefix Sum"], "similar_problems": [{"slug": "frog-position-after-t-seconds", "title": "Frog Position After T Seconds", "difficulty": "Hard"}, {"slug": "longest-special-path-ii", "title": "Longest Special Path II", "difficulty": "Hard"}]},
    {"number": 3426, "slug": "manhattan-distances-of-all-arrangements-of-pieces", "title": "Manhattan Distances of All Arrangements of Pieces", "difficulty": "Hard", "tags": ["Math", "Combinatorics"], "similar_problems": []},
    {"number": 3430, "slug": "maximum-and-minimum-sums-of-at-most-size-k-subarrays", "title": "Maximum and Minimum Sums of at Most Size K Subarrays", "difficulty": "Hard", "tags": ["Array", "Math", "Stack", "Monotonic Stack"], "similar_problems": [{"slug": "next-greater-element-ii", "title": "Next Greater Element II", "difficulty": "Medium"}]},
    {"number": 3435, "slug": "frequencies-of-shortest-supersequences", "title": "Frequencies of Shortest Supersequences", "difficulty": "Hard", "tags": ["Array", "String", "Bit Manipulation", "Graph", "Topological Sort", "Enumeration"], "similar_problems": []},
    {"number": 3441, "slug": "minimum-cost-good-caption", "title": "Minimum Cost Good Caption", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": []},
    {"number": 3444, "slug": "minimum-increments-for-target-multiples-in-an-array", "title": "Minimum Increments for Target Multiples in an Array", "difficulty": "Hard", "tags": ["Array", "Math", "Dynamic Programming", "Bit Manipulation", "Number Theory", "Bitmask"], "similar_problems": []},
    {"number": 3445, "slug": "maximum-difference-between-even-and-odd-frequency-ii", "title": "Maximum Difference Between Even and Odd Frequency II", "difficulty": "Hard", "tags": ["String", "Sliding Window", "Enumeration", "Prefix Sum"], "similar_problems": [{"slug": "frequency-of-the-most-frequent-element", "title": "Frequency of the Most Frequent Element", "difficulty": "Medium"}, {"slug": "count-elements-with-maximum-frequency", "title": "Count Elements With Maximum Frequency", "difficulty": "Easy"}]},
    {"number": 3448, "slug": "count-substrings-divisible-by-last-digit", "title": "Count Substrings Divisible By Last Digit", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": [{"slug": "number-of-divisible-substrings", "title": "Number of Divisible Substrings", "difficulty": "Medium"}]},
    {"number": 3449, "slug": "maximize-the-minimum-game-score", "title": "Maximize the Minimum Game Score", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Greedy"], "similar_problems": []},
    {"number": 3451, "slug": "find-invalid-ip-addresses", "title": "Find Invalid IP Addresses", "difficulty": "Hard", "tags": ["Database"], "similar_problems": []},
    {"number": 3454, "slug": "separate-squares-ii", "title": "Separate Squares II", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Segment Tree", "Line Sweep"], "similar_problems": [{"slug": "rectangle-area-ii", "title": "Rectangle Area II", "difficulty": "Hard"}]},
    {"number": 3455, "slug": "shortest-matching-substring", "title": "Shortest Matching Substring", "difficulty": "Hard", "tags": ["Two Pointers", "String", "Binary Search", "String Matching"], "similar_problems": []},
    {"number": 3459, "slug": "length-of-longest-v-shaped-diagonal-segment", "title": "Length of Longest V-Shaped Diagonal Segment", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Memoization", "Matrix"], "similar_problems": []},
    {"number": 3463, "slug": "check-if-digits-are-equal-in-string-after-operations-ii", "title": "Check If Digits Are Equal in String After Operations II", "difficulty": "Hard", "tags": ["Math", "String", "Combinatorics", "Number Theory"], "similar_problems": [{"slug": "pascals-triangle", "title": "Pascal's Triangle", "difficulty": "Easy"}]},
    {"number": 3464, "slug": "maximize-the-distance-between-points-on-a-square", "title": "Maximize the Distance Between Points on a Square", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Greedy"], "similar_problems": [{"slug": "maximum-number-of-integers-to-choose-from-a-range-ii", "title": "Maximum Number of Integers to Choose From a Range II", "difficulty": "Medium"}, {"slug": "maximum-points-inside-the-square", "title": "Maximum Points Inside the Square", "difficulty": "Medium"}]},
    {"number": 3470, "slug": "permutations-iv", "title": "Permutations IV", "difficulty": "Hard", "tags": ["Array", "Math", "Combinatorics", "Enumeration"], "similar_problems": [{"slug": "permutations-iii", "title": "Permutations III", "difficulty": "Medium"}]},
    {"number": 3474, "slug": "lexicographically-smallest-generated-string", "title": "Lexicographically Smallest Generated String", "difficulty": "Hard", "tags": ["String", "Greedy", "String Matching"], "similar_problems": [{"slug": "lexicographically-smallest-equivalent-string", "title": "Lexicographically Smallest Equivalent String", "difficulty": "Medium"}]},
    {"number": 3480, "slug": "maximize-subarrays-after-removing-one-conflicting-pair", "title": "Maximize Subarrays After Removing One Conflicting Pair", "difficulty": "Hard", "tags": ["Array", "Segment Tree", "Enumeration", "Prefix Sum"], "similar_problems": []},
    {"number": 3482, "slug": "analyze-organization-hierarchy", "title": "Analyze Organization Hierarchy", "difficulty": "Hard", "tags": ["Database"], "similar_problems": []},
    {"number": 3485, "slug": "longest-common-prefix-of-k-strings-after-removal", "title": "Longest Common Prefix of K Strings After Removal", "difficulty": "Hard", "tags": ["Array", "String", "Trie"], "similar_problems": []},
    {"number": 3486, "slug": "longest-special-path-ii", "title": "Longest Special Path II", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Tree", "Depth-First Search", "Prefix Sum"], "similar_problems": [{"slug": "longest-special-path", "title": "Longest Special Path", "difficulty": "Hard"}]},
    {"number": 3490, "slug": "count-beautiful-numbers", "title": "Count Beautiful Numbers", "difficulty": "Hard", "tags": ["Dynamic Programming"], "similar_problems": []},
    {"number": 3495, "slug": "minimum-operations-to-make-array-elements-zero", "title": "Minimum Operations to Make Array Elements Zero", "difficulty": "Hard", "tags": ["Array", "Math", "Bit Manipulation"], "similar_problems": []},
    {"number": 3500, "slug": "minimum-cost-to-divide-array-into-subarrays", "title": "Minimum Cost to Divide Array Into Subarrays", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Prefix Sum"], "similar_problems": [{"slug": "minimum-cost-to-split-an-array", "title": "Minimum Cost to Split an Array", "difficulty": "Hard"}]},
    {"number": 3501, "slug": "maximize-active-section-with-trade-ii", "title": "Maximize Active Section with Trade II", "difficulty": "Hard", "tags": ["Array", "String", "Binary Search", "Segment Tree"], "similar_problems": []},
    {"number": 3504, "slug": "longest-palindrome-after-substring-concatenation-ii", "title": "Longest Palindrome After Substring Concatenation II", "difficulty": "Hard", "tags": ["Two Pointers", "String", "Dynamic Programming"], "similar_problems": [{"slug": "edit-distance", "title": "Edit Distance", "difficulty": "Medium"}]},
    {"number": 3505, "slug": "minimum-operations-to-make-elements-within-k-subarrays-equal", "title": "Minimum Operations to Make Elements Within K Subarrays Equal", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Math", "Dynamic Programming", "Sliding Window", "Heap (Priority Queue)"], "similar_problems": [{"slug": "find-median-from-data-stream", "title": "Find Median from Data Stream", "difficulty": "Hard"}, {"slug": "minimum-moves-to-equal-array-elements-ii", "title": "Minimum Moves to Equal Array Elements II", "difficulty": "Medium"}]},
    {"number": 3506, "slug": "find-time-required-to-eliminate-bacterial-strains", "title": "Find Time Required to Eliminate Bacterial Strains", "difficulty": "Hard", "tags": ["Array", "Math", "Greedy", "Heap (Priority Queue)"], "similar_problems": [{"slug": "minimum-time-to-build-blocks", "title": "Minimum Time to Build Blocks", "difficulty": "Hard"}]},
    {"number": 3509, "slug": "maximum-product-of-subsequences-with-an-alternating-sum-equal-to-k", "title": "Maximum Product of Subsequences With an Alternating Sum Equal to K", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Dynamic Programming"], "similar_problems": [{"slug": "maximum-alternating-subsequence-sum", "title": "Maximum Alternating Subsequence Sum", "difficulty": "Medium"}]},
    {"number": 3510, "slug": "minimum-pair-removal-to-sort-array-ii", "title": "Minimum Pair Removal to Sort Array II", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Linked List", "Heap (Priority Queue)", "Simulation", "Doubly-Linked List", "Ordered Set"], "similar_problems": []},
    {"number": 3515, "slug": "shortest-path-in-a-weighted-tree", "title": "Shortest Path in a Weighted Tree", "difficulty": "Hard", "tags": ["Array", "Tree", "Depth-First Search", "Binary Indexed Tree", "Segment Tree"], "similar_problems": []},
    {"number": 3518, "slug": "smallest-palindromic-rearrangement-ii", "title": "Smallest Palindromic Rearrangement II", "difficulty": "Hard", "tags": ["Hash Table", "Math", "String", "Combinatorics", "Counting"], "similar_problems": []},
    {"number": 3519, "slug": "count-numbers-with-non-decreasing-digits", "title": "Count Numbers with Non-Decreasing Digits ", "difficulty": "Hard", "tags": ["Math", "String", "Dynamic Programming"], "similar_problems": [{"slug": "count-of-integers", "title": "Count of Integers", "difficulty": "Hard"}, {"slug": "number-of-beautiful-integers-in-the-range", "title": "Number of Beautiful Integers in the Range", "difficulty": "Hard"}]},
    {"number": 3525, "slug": "find-x-value-of-array-ii", "title": "Find X Value of Array II", "difficulty": "Hard", "tags": ["Array", "Math", "Segment Tree"], "similar_problems": [{"slug": "longest-uploaded-prefix", "title": "Longest Uploaded Prefix", "difficulty": "Medium"}, {"slug": "minimum-sum-of-values-by-dividing-array", "title": "Minimum Sum of Values by Dividing Array", "difficulty": "Hard"}]},
    {"number": 3526, "slug": "range-xor-queries-with-subarray-reversals", "title": "Range XOR Queries with Subarray Reversals", "difficulty": "Hard", "tags": ["Array", "Tree", "Binary Tree"], "similar_problems": []},
    {"number": 3530, "slug": "maximum-profit-from-valid-topological-order-in-dag", "title": "Maximum Profit from Valid Topological Order in DAG", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Bit Manipulation", "Graph", "Topological Sort", "Bitmask"], "similar_problems": []},
    {"number": 3533, "slug": "concatenated-divisibility", "title": "Concatenated Divisibility", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Bit Manipulation", "Bitmask"], "similar_problems": []},
    {"number": 3534, "slug": "path-existence-queries-in-a-graph-ii", "title": "Path Existence Queries in a Graph II", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Greedy", "Graph", "Sorting"], "similar_problems": []},
    {"number": 3538, "slug": "merge-operations-for-minimum-travel-time", "title": "Merge Operations for Minimum Travel Time", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Prefix Sum"], "similar_problems": []},
    {"number": 3539, "slug": "find-sum-of-array-product-of-magical-sequences", "title": "Find Sum of Array Product of Magical Sequences", "difficulty": "Hard", "tags": ["Array", "Math", "Dynamic Programming", "Bit Manipulation", "Combinatorics", "Bitmask"], "similar_problems": [{"slug": "product-of-array-except-self", "title": "Product of Array Except Self", "difficulty": "Medium"}, {"slug": "smallest-number-with-all-set-bits", "title": "Smallest Number With All Set Bits", "difficulty": "Easy"}]},
    {"number": 3544, "slug": "subtree-inversion-sum", "title": "Subtree Inversion Sum", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Tree", "Depth-First Search"], "similar_problems": []},
    {"number": 3547, "slug": "maximum-sum-of-edge-values-in-a-graph", "title": "Maximum Sum of Edge Values in a Graph", "difficulty": "Hard", "tags": ["Math", "Greedy", "Graph"], "similar_problems": []},
    {"number": 3548, "slug": "equal-sum-grid-partition-ii", "title": "Equal Sum Grid Partition II", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Matrix", "Enumeration", "Prefix Sum"], "similar_problems": []},
    {"number": 3549, "slug": "multiply-two-polynomials", "title": "Multiply Two Polynomials", "difficulty": "Hard", "tags": ["Array", "Math"], "similar_problems": []},
    {"number": 3553, "slug": "minimum-weighted-subgraph-with-the-required-paths-ii", "title": "Minimum Weighted Subgraph With the Required Paths II", "difficulty": "Hard", "tags": ["Array", "Tree", "Depth-First Search"], "similar_problems": []},
    {"number": 3554, "slug": "find-category-recommendation-pairs", "title": "Find Category Recommendation Pairs", "difficulty": "Hard", "tags": ["Database"], "similar_problems": []},
    {"number": 3559, "slug": "number-of-ways-to-assign-edge-weights-ii", "title": "Number of Ways to Assign Edge Weights II", "difficulty": "Hard", "tags": ["Array", "Math", "Dynamic Programming", "Tree", "Depth-First Search"], "similar_problems": []},
    {"number": 3562, "slug": "maximum-profit-from-trading-stocks-with-discounts", "title": "Maximum Profit from Trading Stocks with Discounts", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Tree", "Depth-First Search"], "similar_problems": []},
    {"number": 3563, "slug": "lexicographically-smallest-string-after-adjacent-removals", "title": "Lexicographically Smallest String After Adjacent Removals", "difficulty": "Hard", "tags": ["String", "Dynamic Programming"], "similar_problems": []},
    {"number": 3569, "slug": "maximize-count-of-distinct-primes-after-split", "title": "Maximize Count of Distinct Primes After Split", "difficulty": "Hard", "tags": ["Array", "Math", "Segment Tree", "Number Theory"], "similar_problems": []},
    {"number": 3574, "slug": "maximize-subarray-gcd-score", "title": "Maximize Subarray GCD Score", "difficulty": "Hard", "tags": ["Array", "Math", "Enumeration", "Number Theory"], "similar_problems": []},
    {"number": 3575, "slug": "maximum-good-subtree-score", "title": "Maximum Good Subtree Score", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Bit Manipulation", "Tree", "Depth-First Search", "Bitmask"], "similar_problems": []},
    {"number": 3579, "slug": "minimum-steps-to-convert-string-with-operations", "title": "Minimum Steps to Convert String with Operations", "difficulty": "Hard", "tags": ["String", "Dynamic Programming", "Greedy"], "similar_problems": [{"slug": "edit-distance", "title": "Edit Distance", "difficulty": "Medium"}]},
    {"number": 3585, "slug": "find-weighted-median-node-in-tree", "title": "Find Weighted Median Node in Tree", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Dynamic Programming", "Tree", "Depth-First Search"], "similar_problems": []},
    {"number": 3590, "slug": "kth-smallest-path-xor-sum", "title": "Kth Smallest Path XOR Sum", "difficulty": "Hard", "tags": ["Array", "Tree", "Depth-First Search", "Ordered Set"], "similar_problems": []},
    {"number": 3594, "slug": "minimum-time-to-transport-all-individuals", "title": "Minimum Time to Transport All Individuals", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming", "Bit Manipulation", "Graph", "Heap (Priority Queue)", "Shortest Path", "Bitmask"], "similar_problems": []},
    {"number": 3600, "slug": "maximize-spanning-tree-stability-with-upgrades", "title": "Maximize Spanning Tree Stability with Upgrades", "difficulty": "Hard", "tags": ["Binary Search", "Greedy", "Union Find", "Graph", "Minimum Spanning Tree"], "similar_problems": []},
    {"number": 3605, "slug": "minimum-stability-factor-of-array", "title": "Minimum Stability Factor of Array", "difficulty": "Hard", "tags": ["Array", "Math", "Binary Search", "Greedy", "Segment Tree", "Number Theory"], "similar_problems": []},
    {"number": 3609, "slug": "minimum-moves-to-reach-target-in-grid", "title": "Minimum Moves to Reach Target in Grid", "difficulty": "Hard", "tags": ["Math"], "similar_problems": []},
    {"number": 3614, "slug": "process-string-with-special-operations-ii", "title": "Process String with Special Operations II", "difficulty": "Hard", "tags": ["String", "Simulation"], "similar_problems": []},
    {"number": 3615, "slug": "longest-palindromic-path-in-graph", "title": "Longest Palindromic Path in Graph", "difficulty": "Hard", "tags": ["String", "Dynamic Programming", "Bit Manipulation", "Graph", "Bitmask"], "similar_problems": []},
    {"number": 3617, "slug": "find-students-with-study-spiral-pattern", "title": "Find Students with Study Spiral Pattern", "difficulty": "Hard", "tags": [], "similar_problems": []},
    {"number": 3620, "slug": "network-recovery-pathways", "title": "Network Recovery Pathways", "difficulty": "Hard", "tags": ["Array", "Binary Search", "Dynamic Programming", "Graph", "Topological Sort", "Heap (Priority Queue)", "Shortest Path"], "similar_problems": []},
    {"number": 3621, "slug": "number-of-integers-with-popcount-depth-equal-to-k-i", "title": "Number of Integers With Popcount-Depth Equal to K I", "difficulty": "Hard", "tags": ["Math", "Dynamic Programming", "Combinatorics"], "similar_problems": [{"slug": "find-pattern-in-infinite-stream-ii", "title": "Find Pattern in Infinite Stream II", "difficulty": "Hard"}]},
    {"number": 3624, "slug": "number-of-integers-with-popcount-depth-equal-to-k-ii", "title": "Number of Integers With Popcount-Depth Equal to K II", "difficulty": "Hard", "tags": ["Array", "Divide and Conquer", "Binary Indexed Tree", "Segment Tree"], "similar_problems": []},
    {"number": 3625, "slug": "count-number-of-trapezoids-ii", "title": "Count Number of Trapezoids II", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Math", "Geometry"], "similar_problems": []},
    {"number": 3630, "slug": "partition-array-for-maximum-xor-and-and", "title": "Partition Array for Maximum XOR and AND", "difficulty": "Hard", "tags": ["Array", "Math", "Greedy", "Enumeration"], "similar_problems": []},
    {"number": 3632, "slug": "subarrays-with-xor-at-least-k", "title": "Subarrays with XOR at Least K", "difficulty": "Hard", "tags": [], "similar_problems": []},
    {"number": 3636, "slug": "threshold-majority-queries", "title": "Threshold Majority Queries", "difficulty": "Hard", "tags": ["Array", "Hash Table", "Binary Search", "Divide and Conquer", "Counting", "Prefix Sum"], "similar_problems": []},
    {"number": 3640, "slug": "trionic-array-ii", "title": "Trionic Array II", "difficulty": "Hard", "tags": ["Array", "Dynamic Programming"], "similar_problems": []},
    {"number": 3646, "slug": "next-special-palindrome-number", "title": "Next Special Palindrome Number", "difficulty": "Hard", "tags": ["Backtracking"], "similar_problems": []},
    {"number": 3651, "slug": "minimum-cost-path-with-teleportations", "title": "Minimum Cost Path with Teleportations", "difficulty": "Hard", "tags": [], "similar_problems": []},
    {"number": 3655, "slug": "xor-after-range-multiplication-queries-ii", "title": "XOR After Range Multiplication Queries II", "difficulty": "Hard", "tags": ["Array", "Divide and Conquer"], "similar_problems": []},
    {"number": 3661, "slug": "maximum-walls-destroyed-by-robots", "title": "Maximum Walls Destroyed by Robots", "difficulty": "Hard", "tags": [], "similar_problems": []},
    {"number": 3666, "slug": "minimum-operations-to-equalize-binary-string", "title": "Minimum Operations to Equalize Binary String", "difficulty": "Hard", "tags": [], "similar_problems": []},
    {"number": 3671, "slug": "sum-of-beautiful-subsequences", "title": "Sum of Beautiful Subsequences", "difficulty": "Hard", "tags": [], "similar_problems": []},
    {"number": 3673, "slug": "find-zombie-sessions", "title": "Find Zombie Sessions", "difficulty": "Hard", "tags": [], "similar_problems": []},
    {"number": 3677, "slug": "count-binary-palindromic-numbers", "title": "Count Binary Palindromic Numbers", "difficulty": "Hard", "tags": [], "similar_problems": []}
]